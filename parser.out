Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    RESET
    EOF
    SIMPLE
    TEXT
    EXP
    TRUE
    PACKED
    COMMENT
    OPENCOMMENT
    TO
    GOTO
    CHR
    NIL
    OPENCOMMENT2
    SQR
    OUTPUT
    PACK
    FILE
    CLOSECOMMENT2
    LABEL
    SUCC
    AMPERSANT
    ROUND
    GET
    WITH
    SIN
    TRUNC
    FUNCTION
    REPEAT
    DIVIDE
    FOR
    MAXINT
    INPUT
    UNTIL
    ARCTAN
    DOWNTO
    MOD
    REAL
    COS
    NEW
    CASE
    SET
    ODD
    UNPACK
    FALSE
    REWRITE
    PRED
    EOLN
    READLN
    BOOLEAN
    HASHTAG
    PUT
    ORD
    TYPE
    PAGE
    CONST
    LN
    RECORD
    STRING
    DISPOSE
    ABS
    IN
    WRITELN
    SQRT
    CLOSECOMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON block
Rule 2     block -> variable_declaration_part procedure_declaration_part statement_part
Rule 3     variable_declaration_part -> empty
Rule 4     variable_declaration_part -> VAR variable_declaration SEMICOLON
Rule 5     variable_declaration -> ID variable_declaration2 COLON type
Rule 6     variable_declaration2 -> COMMA ID variable_declaration2
Rule 7     variable_declaration2 -> empty
Rule 8     type -> simple_type
Rule 9     type -> array_type
Rule 10    array_type -> ARRAY LBRACKET index_range RBRACKET OF simple_type
Rule 11    index_range -> NUMBER DOT DOT NUMBER
Rule 12    simple_type -> type_identifier
Rule 13    type_identifier -> INTEGER
Rule 14    type_identifier -> CHAR
Rule 15    procedure_declaration_part -> empty
Rule 16    procedure_declaration_part -> procedure_declaration
Rule 17    procedure_declaration -> PROCEDURE ID SEMICOLON block
Rule 18    statement_part -> compound_statement
Rule 19    compound_statement -> BEGIN statement END DOT
Rule 20    statement -> simple_statement
Rule 21    statement -> statement SEMICOLON simple_statement
Rule 22    statement -> statement structured_statement
Rule 23    statement -> structured_statement
Rule 24    statement3 -> SEMICOLON statement
Rule 25    statement3 -> empty
Rule 26    simple_statement -> assignment_statement
Rule 27    simple_statement -> procedure_statement
Rule 28    simple_statement -> read_statement
Rule 29    simple_statement -> write_statement
Rule 30    assignment_statement -> variable
Rule 31    assignment_statement -> expression
Rule 32    procedure_statement -> procedure_identifier
Rule 33    procedure_identifier -> ID
Rule 34    read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON
Rule 35    input_variable -> variable
Rule 36    input_variable2 -> empty
Rule 37    input_variable2 -> COMMA variable
Rule 38    write_statement -> WRITE LPAREN output_value COMMA output_value2 RPAREN
Rule 39    output_value -> expression
Rule 40    output_value2 -> empty
Rule 41    output_value2 -> expression
Rule 42    structured_statement -> compound_statement
Rule 43    structured_statement -> if_statement
Rule 44    structured_statement -> while_statement
Rule 45    if_statement -> IF LPAREN expression RPAREN THEN statement
Rule 46    if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement
Rule 47    while_statement -> WHILE expression DO statement
Rule 48    expression -> simple_expression
Rule 49    expression -> simple_expression relational_operator simple_expression
Rule 50    simple_expression -> sign term simple_expression2
Rule 51    simple_expression2 -> adding_operator term
Rule 52    simple_expression2 -> empty
Rule 53    term -> factor term2
Rule 54    term2 -> multiplying_operator factor
Rule 55    term2 -> empty
Rule 56    factor -> variable
Rule 57    factor -> NUMBER
Rule 58    factor -> LPAREN expression RPAREN
Rule 59    factor -> NOT factor
Rule 60    relational_operator -> EQUAL
Rule 61    relational_operator -> DISTINT
Rule 62    relational_operator -> LESS
Rule 63    relational_operator -> GREATER
Rule 64    sign -> PLUS
Rule 65    sign -> MINUS
Rule 66    sign -> empty
Rule 67    adding_operator -> PLUS
Rule 68    adding_operator -> MINUS
Rule 69    adding_operator -> OR
Rule 70    multiplying_operator -> TIMES
Rule 71    multiplying_operator -> DIV
Rule 72    multiplying_operator -> AND
Rule 73    variable -> entire_variable
Rule 74    variable -> indexed_variable
Rule 75    indexed_variable -> array_variable LBRACKET expression RBRACKET
Rule 76    array_variable -> entire_variable
Rule 77    entire_variable -> variable_identifier
Rule 78    variable_identifier -> ID
Rule 79    empty -> <empty>

Terminals, with rules where they appear

ABS                  : 
AMPERSANT            : 
AND                  : 72
ARCTAN               : 
ARRAY                : 10
BEGIN                : 19
BOOLEAN              : 
CASE                 : 
CHAR                 : 14
CHR                  : 
CLOSECOMMENT         : 
CLOSECOMMENT2        : 
COLON                : 5
COMMA                : 6 37 38
COMMENT              : 
CONST                : 
COS                  : 
DISPOSE              : 
DISTINT              : 61
DIV                  : 71
DIVIDE               : 
DO                   : 47
DOT                  : 11 11 19
DOWNTO               : 
ELSE                 : 46
END                  : 19
EOF                  : 
EOLN                 : 
EQUAL                : 60
EXP                  : 
FALSE                : 
FILE                 : 
FOR                  : 
FUNCTION             : 
GET                  : 
GOTO                 : 
GREATER              : 63
HASHTAG              : 
ID                   : 1 5 6 17 33 78
IF                   : 45 46
IN                   : 
INPUT                : 
INTEGER              : 13
LABEL                : 
LBRACKET             : 10 75
LESS                 : 62
LN                   : 
LPAREN               : 34 38 45 46 58
MAXINT               : 
MINUS                : 65 68
MOD                  : 
NEW                  : 
NIL                  : 
NOT                  : 59
NUMBER               : 11 11 57
ODD                  : 
OF                   : 10
OPENCOMMENT          : 
OPENCOMMENT2         : 
OR                   : 69
ORD                  : 
OUTPUT               : 
PACK                 : 
PACKED               : 
PAGE                 : 
PLUS                 : 64 67
PRED                 : 
PROCEDURE            : 17
PROGRAM              : 1
PUT                  : 
RBRACKET             : 10 75
READ                 : 34
READLN               : 
REAL                 : 
RECORD               : 
REPEAT               : 
RESET                : 
REWRITE              : 
ROUND                : 
RPAREN               : 34 38 45 46 58
SEMICOLON            : 1 4 17 21 24 34
SET                  : 
SIMPLE               : 
SIN                  : 
SQR                  : 
SQRT                 : 
STRING               : 
SUCC                 : 
TEXT                 : 
THEN                 : 45 46
TIMES                : 70
TO                   : 
TRUE                 : 
TRUNC                : 
TYPE                 : 
UNPACK               : 
UNTIL                : 
VAR                  : 4
WHILE                : 47
WITH                 : 
WRITE                : 38
WRITELN              : 
error                : 

Nonterminals, with rules where they appear

adding_operator      : 51
array_type           : 9
array_variable       : 75
assignment_statement : 26
block                : 1 17
compound_statement   : 18 42
empty                : 3 7 15 25 36 40 52 55 66
entire_variable      : 73 76
expression           : 31 39 41 45 46 47 58 75
factor               : 53 54 59
if_statement         : 43
index_range          : 10
indexed_variable     : 74
input_variable       : 34
input_variable2      : 34
multiplying_operator : 54
output_value         : 38
output_value2        : 38
procedure_declaration : 16
procedure_declaration_part : 2
procedure_identifier : 32
procedure_statement  : 27
program              : 0
read_statement       : 28
relational_operator  : 49
sign                 : 50
simple_expression    : 48 49 49
simple_expression2   : 50
simple_statement     : 20 21
simple_type          : 8 10
statement            : 19 21 22 24 45 46 46 47
statement3           : 
statement_part       : 2
structured_statement : 22 23
term                 : 50 51
term2                : 53
type                 : 5
type_identifier      : 12
variable             : 30 35 37 56
variable_declaration : 4
variable_declaration2 : 5 6
variable_declaration_part : 2
variable_identifier  : 77
while_statement      : 44
write_statement      : 29

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON block

    PROGRAM         shift and go to state 1

    program                        shift and go to state 2

state 1

    (1) program -> PROGRAM . ID SEMICOLON block

    ID              shift and go to state 3


state 2

    (0) S' -> program .



state 3

    (1) program -> PROGRAM ID . SEMICOLON block

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . block
    (2) block -> . variable_declaration_part procedure_declaration_part statement_part
    (3) variable_declaration_part -> . empty
    (4) variable_declaration_part -> . VAR variable_declaration SEMICOLON
    (79) empty -> .

    VAR             shift and go to state 6
    PROCEDURE       reduce using rule 79 (empty -> .)
    BEGIN           reduce using rule 79 (empty -> .)

    variable_declaration_part      shift and go to state 5
    block                          shift and go to state 8
    empty                          shift and go to state 7

state 5

    (2) block -> variable_declaration_part . procedure_declaration_part statement_part
    (15) procedure_declaration_part -> . empty
    (16) procedure_declaration_part -> . procedure_declaration
    (79) empty -> .
    (17) procedure_declaration -> . PROCEDURE ID SEMICOLON block

    BEGIN           reduce using rule 79 (empty -> .)
    PROCEDURE       shift and go to state 12

    procedure_declaration          shift and go to state 9
    empty                          shift and go to state 10
    procedure_declaration_part     shift and go to state 11

state 6

    (4) variable_declaration_part -> VAR . variable_declaration SEMICOLON
    (5) variable_declaration -> . ID variable_declaration2 COLON type

    ID              shift and go to state 13

    variable_declaration           shift and go to state 14

state 7

    (3) variable_declaration_part -> empty .

    PROCEDURE       reduce using rule 3 (variable_declaration_part -> empty .)
    BEGIN           reduce using rule 3 (variable_declaration_part -> empty .)


state 8

    (1) program -> PROGRAM ID SEMICOLON block .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON block .)


state 9

    (16) procedure_declaration_part -> procedure_declaration .

    BEGIN           reduce using rule 16 (procedure_declaration_part -> procedure_declaration .)


state 10

    (15) procedure_declaration_part -> empty .

    BEGIN           reduce using rule 15 (procedure_declaration_part -> empty .)


state 11

    (2) block -> variable_declaration_part procedure_declaration_part . statement_part
    (18) statement_part -> . compound_statement
    (19) compound_statement -> . BEGIN statement END DOT

    BEGIN           shift and go to state 15

    statement_part                 shift and go to state 17
    compound_statement             shift and go to state 16

state 12

    (17) procedure_declaration -> PROCEDURE . ID SEMICOLON block

    ID              shift and go to state 18


state 13

    (5) variable_declaration -> ID . variable_declaration2 COLON type
    (6) variable_declaration2 -> . COMMA ID variable_declaration2
    (7) variable_declaration2 -> . empty
    (79) empty -> .

    COMMA           shift and go to state 19
    COLON           reduce using rule 79 (empty -> .)

    variable_declaration2          shift and go to state 20
    empty                          shift and go to state 21

state 14

    (4) variable_declaration_part -> VAR variable_declaration . SEMICOLON

    SEMICOLON       shift and go to state 22


state 15

    (19) compound_statement -> BEGIN . statement END DOT
    (20) statement -> . simple_statement
    (21) statement -> . statement SEMICOLON simple_statement
    (22) statement -> . statement structured_statement
    (23) statement -> . structured_statement
    (26) simple_statement -> . assignment_statement
    (27) simple_statement -> . procedure_statement
    (28) simple_statement -> . read_statement
    (29) simple_statement -> . write_statement
    (42) structured_statement -> . compound_statement
    (43) structured_statement -> . if_statement
    (44) structured_statement -> . while_statement
    (30) assignment_statement -> . variable
    (31) assignment_statement -> . expression
    (32) procedure_statement -> . procedure_identifier
    (34) read_statement -> . READ LPAREN input_variable input_variable2 RPAREN SEMICOLON
    (38) write_statement -> . WRITE LPAREN output_value COMMA output_value2 RPAREN
    (19) compound_statement -> . BEGIN statement END DOT
    (45) if_statement -> . IF LPAREN expression RPAREN THEN statement
    (46) if_statement -> . IF LPAREN expression RPAREN THEN statement ELSE statement
    (47) while_statement -> . WHILE expression DO statement
    (73) variable -> . entire_variable
    (74) variable -> . indexed_variable
    (48) expression -> . simple_expression
    (49) expression -> . simple_expression relational_operator simple_expression
    (33) procedure_identifier -> . ID
    (77) entire_variable -> . variable_identifier
    (75) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (50) simple_expression -> . sign term simple_expression2
    (78) variable_identifier -> . ID
    (76) array_variable -> . entire_variable
    (64) sign -> . PLUS
    (65) sign -> . MINUS
    (66) sign -> . empty
    (79) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    READ            shift and go to state 24
    WRITE           shift and go to state 43
    BEGIN           shift and go to state 15
    IF              shift and go to state 46
    WHILE           shift and go to state 27
    ID              shift and go to state 45
    PLUS            shift and go to state 40
    MINUS           shift and go to state 30
    NUMBER          reduce using rule 79 (empty -> .)
    LPAREN          reduce using rule 79 (empty -> .)
    NOT             reduce using rule 79 (empty -> .)

  ! ID              [ reduce using rule 79 (empty -> .) ]

    indexed_variable               shift and go to state 23
    simple_statement               shift and go to state 25
    sign                           shift and go to state 26
    simple_expression              shift and go to state 28
    array_variable                 shift and go to state 29
    compound_statement             shift and go to state 31
    assignment_statement           shift and go to state 32
    procedure_statement            shift and go to state 33
    structured_statement           shift and go to state 34
    write_statement                shift and go to state 35
    entire_variable                shift and go to state 36
    while_statement                shift and go to state 37
    statement                      shift and go to state 38
    read_statement                 shift and go to state 39
    if_statement                   shift and go to state 41
    empty                          shift and go to state 42
    variable_identifier            shift and go to state 47
    variable                       shift and go to state 44
    procedure_identifier           shift and go to state 48
    expression                     shift and go to state 49

state 16

    (18) statement_part -> compound_statement .

    $end            reduce using rule 18 (statement_part -> compound_statement .)
    BEGIN           reduce using rule 18 (statement_part -> compound_statement .)


state 17

    (2) block -> variable_declaration_part procedure_declaration_part statement_part .

    BEGIN           reduce using rule 2 (block -> variable_declaration_part procedure_declaration_part statement_part .)
    $end            reduce using rule 2 (block -> variable_declaration_part procedure_declaration_part statement_part .)


state 18

    (17) procedure_declaration -> PROCEDURE ID . SEMICOLON block

    SEMICOLON       shift and go to state 50


state 19

    (6) variable_declaration2 -> COMMA . ID variable_declaration2

    ID              shift and go to state 51


state 20

    (5) variable_declaration -> ID variable_declaration2 . COLON type

    COLON           shift and go to state 52


state 21

    (7) variable_declaration2 -> empty .

    COLON           reduce using rule 7 (variable_declaration2 -> empty .)


state 22

    (4) variable_declaration_part -> VAR variable_declaration SEMICOLON .

    PROCEDURE       reduce using rule 4 (variable_declaration_part -> VAR variable_declaration SEMICOLON .)
    BEGIN           reduce using rule 4 (variable_declaration_part -> VAR variable_declaration SEMICOLON .)


state 23

    (74) variable -> indexed_variable .

    END             reduce using rule 74 (variable -> indexed_variable .)
    SEMICOLON       reduce using rule 74 (variable -> indexed_variable .)
    BEGIN           reduce using rule 74 (variable -> indexed_variable .)
    IF              reduce using rule 74 (variable -> indexed_variable .)
    WHILE           reduce using rule 74 (variable -> indexed_variable .)
    TIMES           reduce using rule 74 (variable -> indexed_variable .)
    DIV             reduce using rule 74 (variable -> indexed_variable .)
    AND             reduce using rule 74 (variable -> indexed_variable .)
    PLUS            reduce using rule 74 (variable -> indexed_variable .)
    MINUS           reduce using rule 74 (variable -> indexed_variable .)
    OR              reduce using rule 74 (variable -> indexed_variable .)
    EQUAL           reduce using rule 74 (variable -> indexed_variable .)
    DISTINT         reduce using rule 74 (variable -> indexed_variable .)
    LESS            reduce using rule 74 (variable -> indexed_variable .)
    GREATER         reduce using rule 74 (variable -> indexed_variable .)
    DO              reduce using rule 74 (variable -> indexed_variable .)
    RPAREN          reduce using rule 74 (variable -> indexed_variable .)
    RBRACKET        reduce using rule 74 (variable -> indexed_variable .)
    ELSE            reduce using rule 74 (variable -> indexed_variable .)
    COMMA           reduce using rule 74 (variable -> indexed_variable .)


state 24

    (34) read_statement -> READ . LPAREN input_variable input_variable2 RPAREN SEMICOLON

    LPAREN          shift and go to state 53


state 25

    (20) statement -> simple_statement .

    SEMICOLON       reduce using rule 20 (statement -> simple_statement .)
    BEGIN           reduce using rule 20 (statement -> simple_statement .)
    IF              reduce using rule 20 (statement -> simple_statement .)
    WHILE           reduce using rule 20 (statement -> simple_statement .)
    END             reduce using rule 20 (statement -> simple_statement .)
    ELSE            reduce using rule 20 (statement -> simple_statement .)


state 26

    (50) simple_expression -> sign . term simple_expression2
    (53) term -> . factor term2
    (56) factor -> . variable
    (57) factor -> . NUMBER
    (58) factor -> . LPAREN expression RPAREN
    (59) factor -> . NOT factor
    (73) variable -> . entire_variable
    (74) variable -> . indexed_variable
    (77) entire_variable -> . variable_identifier
    (75) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (78) variable_identifier -> . ID
    (76) array_variable -> . entire_variable

    NUMBER          shift and go to state 55
    LPAREN          shift and go to state 57
    NOT             shift and go to state 56
    ID              shift and go to state 60

    term                           shift and go to state 54
    indexed_variable               shift and go to state 23
    variable_identifier            shift and go to state 47
    entire_variable                shift and go to state 36
    factor                         shift and go to state 58
    variable                       shift and go to state 59
    array_variable                 shift and go to state 29

state 27

    (47) while_statement -> WHILE . expression DO statement
    (48) expression -> . simple_expression
    (49) expression -> . simple_expression relational_operator simple_expression
    (50) simple_expression -> . sign term simple_expression2
    (64) sign -> . PLUS
    (65) sign -> . MINUS
    (66) sign -> . empty
    (79) empty -> .

    PLUS            shift and go to state 40
    MINUS           shift and go to state 30
    NUMBER          reduce using rule 79 (empty -> .)
    LPAREN          reduce using rule 79 (empty -> .)
    NOT             reduce using rule 79 (empty -> .)
    ID              reduce using rule 79 (empty -> .)

    sign                           shift and go to state 26
    simple_expression              shift and go to state 28
    expression                     shift and go to state 61
    empty                          shift and go to state 42

state 28

    (48) expression -> simple_expression .
    (49) expression -> simple_expression . relational_operator simple_expression
    (60) relational_operator -> . EQUAL
    (61) relational_operator -> . DISTINT
    (62) relational_operator -> . LESS
    (63) relational_operator -> . GREATER

    COMMA           reduce using rule 48 (expression -> simple_expression .)
    RPAREN          reduce using rule 48 (expression -> simple_expression .)
    END             reduce using rule 48 (expression -> simple_expression .)
    SEMICOLON       reduce using rule 48 (expression -> simple_expression .)
    BEGIN           reduce using rule 48 (expression -> simple_expression .)
    IF              reduce using rule 48 (expression -> simple_expression .)
    WHILE           reduce using rule 48 (expression -> simple_expression .)
    ELSE            reduce using rule 48 (expression -> simple_expression .)
    RBRACKET        reduce using rule 48 (expression -> simple_expression .)
    DO              reduce using rule 48 (expression -> simple_expression .)
    EQUAL           shift and go to state 65
    DISTINT         shift and go to state 64
    LESS            shift and go to state 63
    GREATER         shift and go to state 66

    relational_operator            shift and go to state 62

state 29

    (75) indexed_variable -> array_variable . LBRACKET expression RBRACKET

    LBRACKET        shift and go to state 67


state 30

    (65) sign -> MINUS .

    NUMBER          reduce using rule 65 (sign -> MINUS .)
    LPAREN          reduce using rule 65 (sign -> MINUS .)
    NOT             reduce using rule 65 (sign -> MINUS .)
    ID              reduce using rule 65 (sign -> MINUS .)


state 31

    (42) structured_statement -> compound_statement .

    END             reduce using rule 42 (structured_statement -> compound_statement .)
    SEMICOLON       reduce using rule 42 (structured_statement -> compound_statement .)
    BEGIN           reduce using rule 42 (structured_statement -> compound_statement .)
    IF              reduce using rule 42 (structured_statement -> compound_statement .)
    WHILE           reduce using rule 42 (structured_statement -> compound_statement .)
    ELSE            reduce using rule 42 (structured_statement -> compound_statement .)


state 32

    (26) simple_statement -> assignment_statement .

    SEMICOLON       reduce using rule 26 (simple_statement -> assignment_statement .)
    BEGIN           reduce using rule 26 (simple_statement -> assignment_statement .)
    IF              reduce using rule 26 (simple_statement -> assignment_statement .)
    WHILE           reduce using rule 26 (simple_statement -> assignment_statement .)
    END             reduce using rule 26 (simple_statement -> assignment_statement .)
    ELSE            reduce using rule 26 (simple_statement -> assignment_statement .)


state 33

    (27) simple_statement -> procedure_statement .

    SEMICOLON       reduce using rule 27 (simple_statement -> procedure_statement .)
    BEGIN           reduce using rule 27 (simple_statement -> procedure_statement .)
    IF              reduce using rule 27 (simple_statement -> procedure_statement .)
    WHILE           reduce using rule 27 (simple_statement -> procedure_statement .)
    END             reduce using rule 27 (simple_statement -> procedure_statement .)
    ELSE            reduce using rule 27 (simple_statement -> procedure_statement .)


state 34

    (23) statement -> structured_statement .

    SEMICOLON       reduce using rule 23 (statement -> structured_statement .)
    BEGIN           reduce using rule 23 (statement -> structured_statement .)
    IF              reduce using rule 23 (statement -> structured_statement .)
    WHILE           reduce using rule 23 (statement -> structured_statement .)
    END             reduce using rule 23 (statement -> structured_statement .)
    ELSE            reduce using rule 23 (statement -> structured_statement .)


state 35

    (29) simple_statement -> write_statement .

    SEMICOLON       reduce using rule 29 (simple_statement -> write_statement .)
    BEGIN           reduce using rule 29 (simple_statement -> write_statement .)
    IF              reduce using rule 29 (simple_statement -> write_statement .)
    WHILE           reduce using rule 29 (simple_statement -> write_statement .)
    END             reduce using rule 29 (simple_statement -> write_statement .)
    ELSE            reduce using rule 29 (simple_statement -> write_statement .)


state 36

    (73) variable -> entire_variable .
    (76) array_variable -> entire_variable .

    END             reduce using rule 73 (variable -> entire_variable .)
    SEMICOLON       reduce using rule 73 (variable -> entire_variable .)
    BEGIN           reduce using rule 73 (variable -> entire_variable .)
    IF              reduce using rule 73 (variable -> entire_variable .)
    WHILE           reduce using rule 73 (variable -> entire_variable .)
    TIMES           reduce using rule 73 (variable -> entire_variable .)
    DIV             reduce using rule 73 (variable -> entire_variable .)
    AND             reduce using rule 73 (variable -> entire_variable .)
    PLUS            reduce using rule 73 (variable -> entire_variable .)
    MINUS           reduce using rule 73 (variable -> entire_variable .)
    OR              reduce using rule 73 (variable -> entire_variable .)
    EQUAL           reduce using rule 73 (variable -> entire_variable .)
    DISTINT         reduce using rule 73 (variable -> entire_variable .)
    LESS            reduce using rule 73 (variable -> entire_variable .)
    GREATER         reduce using rule 73 (variable -> entire_variable .)
    DO              reduce using rule 73 (variable -> entire_variable .)
    RPAREN          reduce using rule 73 (variable -> entire_variable .)
    RBRACKET        reduce using rule 73 (variable -> entire_variable .)
    ELSE            reduce using rule 73 (variable -> entire_variable .)
    COMMA           reduce using rule 73 (variable -> entire_variable .)
    LBRACKET        reduce using rule 76 (array_variable -> entire_variable .)


state 37

    (44) structured_statement -> while_statement .

    END             reduce using rule 44 (structured_statement -> while_statement .)
    SEMICOLON       reduce using rule 44 (structured_statement -> while_statement .)
    BEGIN           reduce using rule 44 (structured_statement -> while_statement .)
    IF              reduce using rule 44 (structured_statement -> while_statement .)
    WHILE           reduce using rule 44 (structured_statement -> while_statement .)
    ELSE            reduce using rule 44 (structured_statement -> while_statement .)


state 38

    (19) compound_statement -> BEGIN statement . END DOT
    (21) statement -> statement . SEMICOLON simple_statement
    (22) statement -> statement . structured_statement
    (42) structured_statement -> . compound_statement
    (43) structured_statement -> . if_statement
    (44) structured_statement -> . while_statement
    (19) compound_statement -> . BEGIN statement END DOT
    (45) if_statement -> . IF LPAREN expression RPAREN THEN statement
    (46) if_statement -> . IF LPAREN expression RPAREN THEN statement ELSE statement
    (47) while_statement -> . WHILE expression DO statement

    END             shift and go to state 68
    SEMICOLON       shift and go to state 69
    BEGIN           shift and go to state 15
    IF              shift and go to state 46
    WHILE           shift and go to state 27

    compound_statement             shift and go to state 31
    structured_statement           shift and go to state 70
    while_statement                shift and go to state 37
    if_statement                   shift and go to state 41

state 39

    (28) simple_statement -> read_statement .

    SEMICOLON       reduce using rule 28 (simple_statement -> read_statement .)
    BEGIN           reduce using rule 28 (simple_statement -> read_statement .)
    IF              reduce using rule 28 (simple_statement -> read_statement .)
    WHILE           reduce using rule 28 (simple_statement -> read_statement .)
    END             reduce using rule 28 (simple_statement -> read_statement .)
    ELSE            reduce using rule 28 (simple_statement -> read_statement .)


state 40

    (64) sign -> PLUS .

    NUMBER          reduce using rule 64 (sign -> PLUS .)
    LPAREN          reduce using rule 64 (sign -> PLUS .)
    NOT             reduce using rule 64 (sign -> PLUS .)
    ID              reduce using rule 64 (sign -> PLUS .)


state 41

    (43) structured_statement -> if_statement .

    END             reduce using rule 43 (structured_statement -> if_statement .)
    SEMICOLON       reduce using rule 43 (structured_statement -> if_statement .)
    BEGIN           reduce using rule 43 (structured_statement -> if_statement .)
    IF              reduce using rule 43 (structured_statement -> if_statement .)
    WHILE           reduce using rule 43 (structured_statement -> if_statement .)
    ELSE            reduce using rule 43 (structured_statement -> if_statement .)


state 42

    (66) sign -> empty .

    NUMBER          reduce using rule 66 (sign -> empty .)
    LPAREN          reduce using rule 66 (sign -> empty .)
    NOT             reduce using rule 66 (sign -> empty .)
    ID              reduce using rule 66 (sign -> empty .)


state 43

    (38) write_statement -> WRITE . LPAREN output_value COMMA output_value2 RPAREN

    LPAREN          shift and go to state 71


state 44

    (30) assignment_statement -> variable .

    SEMICOLON       reduce using rule 30 (assignment_statement -> variable .)
    BEGIN           reduce using rule 30 (assignment_statement -> variable .)
    IF              reduce using rule 30 (assignment_statement -> variable .)
    WHILE           reduce using rule 30 (assignment_statement -> variable .)
    END             reduce using rule 30 (assignment_statement -> variable .)
    ELSE            reduce using rule 30 (assignment_statement -> variable .)


state 45

    (33) procedure_identifier -> ID .
    (78) variable_identifier -> ID .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 33 (procedure_identifier -> ID .)
  ! reduce/reduce conflict for BEGIN resolved using rule 33 (procedure_identifier -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 33 (procedure_identifier -> ID .)
  ! reduce/reduce conflict for WHILE resolved using rule 33 (procedure_identifier -> ID .)
  ! reduce/reduce conflict for END resolved using rule 33 (procedure_identifier -> ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 33 (procedure_identifier -> ID .)
    END             reduce using rule 33 (procedure_identifier -> ID .)
    SEMICOLON       reduce using rule 33 (procedure_identifier -> ID .)
    BEGIN           reduce using rule 33 (procedure_identifier -> ID .)
    IF              reduce using rule 33 (procedure_identifier -> ID .)
    WHILE           reduce using rule 33 (procedure_identifier -> ID .)
    ELSE            reduce using rule 33 (procedure_identifier -> ID .)
    LBRACKET        reduce using rule 78 (variable_identifier -> ID .)

  ! SEMICOLON       [ reduce using rule 78 (variable_identifier -> ID .) ]
  ! BEGIN           [ reduce using rule 78 (variable_identifier -> ID .) ]
  ! IF              [ reduce using rule 78 (variable_identifier -> ID .) ]
  ! WHILE           [ reduce using rule 78 (variable_identifier -> ID .) ]
  ! END             [ reduce using rule 78 (variable_identifier -> ID .) ]
  ! ELSE            [ reduce using rule 78 (variable_identifier -> ID .) ]


state 46

    (45) if_statement -> IF . LPAREN expression RPAREN THEN statement
    (46) if_statement -> IF . LPAREN expression RPAREN THEN statement ELSE statement

    LPAREN          shift and go to state 72


state 47

    (77) entire_variable -> variable_identifier .

    TIMES           reduce using rule 77 (entire_variable -> variable_identifier .)
    DIV             reduce using rule 77 (entire_variable -> variable_identifier .)
    AND             reduce using rule 77 (entire_variable -> variable_identifier .)
    PLUS            reduce using rule 77 (entire_variable -> variable_identifier .)
    MINUS           reduce using rule 77 (entire_variable -> variable_identifier .)
    OR              reduce using rule 77 (entire_variable -> variable_identifier .)
    EQUAL           reduce using rule 77 (entire_variable -> variable_identifier .)
    DISTINT         reduce using rule 77 (entire_variable -> variable_identifier .)
    LESS            reduce using rule 77 (entire_variable -> variable_identifier .)
    GREATER         reduce using rule 77 (entire_variable -> variable_identifier .)
    END             reduce using rule 77 (entire_variable -> variable_identifier .)
    SEMICOLON       reduce using rule 77 (entire_variable -> variable_identifier .)
    BEGIN           reduce using rule 77 (entire_variable -> variable_identifier .)
    IF              reduce using rule 77 (entire_variable -> variable_identifier .)
    WHILE           reduce using rule 77 (entire_variable -> variable_identifier .)
    DO              reduce using rule 77 (entire_variable -> variable_identifier .)
    RPAREN          reduce using rule 77 (entire_variable -> variable_identifier .)
    RBRACKET        reduce using rule 77 (entire_variable -> variable_identifier .)
    ELSE            reduce using rule 77 (entire_variable -> variable_identifier .)
    COMMA           reduce using rule 77 (entire_variable -> variable_identifier .)
    LBRACKET        reduce using rule 77 (entire_variable -> variable_identifier .)


state 48

    (32) procedure_statement -> procedure_identifier .

    SEMICOLON       reduce using rule 32 (procedure_statement -> procedure_identifier .)
    BEGIN           reduce using rule 32 (procedure_statement -> procedure_identifier .)
    IF              reduce using rule 32 (procedure_statement -> procedure_identifier .)
    WHILE           reduce using rule 32 (procedure_statement -> procedure_identifier .)
    END             reduce using rule 32 (procedure_statement -> procedure_identifier .)
    ELSE            reduce using rule 32 (procedure_statement -> procedure_identifier .)


state 49

    (31) assignment_statement -> expression .

    SEMICOLON       reduce using rule 31 (assignment_statement -> expression .)
    BEGIN           reduce using rule 31 (assignment_statement -> expression .)
    IF              reduce using rule 31 (assignment_statement -> expression .)
    WHILE           reduce using rule 31 (assignment_statement -> expression .)
    END             reduce using rule 31 (assignment_statement -> expression .)
    ELSE            reduce using rule 31 (assignment_statement -> expression .)


state 50

    (17) procedure_declaration -> PROCEDURE ID SEMICOLON . block
    (2) block -> . variable_declaration_part procedure_declaration_part statement_part
    (3) variable_declaration_part -> . empty
    (4) variable_declaration_part -> . VAR variable_declaration SEMICOLON
    (79) empty -> .

    VAR             shift and go to state 6
    PROCEDURE       reduce using rule 79 (empty -> .)
    BEGIN           reduce using rule 79 (empty -> .)

    variable_declaration_part      shift and go to state 5
    block                          shift and go to state 73
    empty                          shift and go to state 7

state 51

    (6) variable_declaration2 -> COMMA ID . variable_declaration2
    (6) variable_declaration2 -> . COMMA ID variable_declaration2
    (7) variable_declaration2 -> . empty
    (79) empty -> .

    COMMA           shift and go to state 19
    COLON           reduce using rule 79 (empty -> .)

    variable_declaration2          shift and go to state 74
    empty                          shift and go to state 21

state 52

    (5) variable_declaration -> ID variable_declaration2 COLON . type
    (8) type -> . simple_type
    (9) type -> . array_type
    (12) simple_type -> . type_identifier
    (10) array_type -> . ARRAY LBRACKET index_range RBRACKET OF simple_type
    (13) type_identifier -> . INTEGER
    (14) type_identifier -> . CHAR

    ARRAY           shift and go to state 80
    INTEGER         shift and go to state 79
    CHAR            shift and go to state 81

    type_identifier                shift and go to state 75
    simple_type                    shift and go to state 76
    array_type                     shift and go to state 78
    type                           shift and go to state 77

state 53

    (34) read_statement -> READ LPAREN . input_variable input_variable2 RPAREN SEMICOLON
    (35) input_variable -> . variable
    (73) variable -> . entire_variable
    (74) variable -> . indexed_variable
    (77) entire_variable -> . variable_identifier
    (75) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (78) variable_identifier -> . ID
    (76) array_variable -> . entire_variable

    ID              shift and go to state 60

    indexed_variable               shift and go to state 23
    variable_identifier            shift and go to state 47
    entire_variable                shift and go to state 36
    variable                       shift and go to state 82
    array_variable                 shift and go to state 29
    input_variable                 shift and go to state 83

state 54

    (50) simple_expression -> sign term . simple_expression2
    (51) simple_expression2 -> . adding_operator term
    (52) simple_expression2 -> . empty
    (67) adding_operator -> . PLUS
    (68) adding_operator -> . MINUS
    (69) adding_operator -> . OR
    (79) empty -> .

    PLUS            shift and go to state 85
    MINUS           shift and go to state 87
    OR              shift and go to state 89
    EQUAL           reduce using rule 79 (empty -> .)
    DISTINT         reduce using rule 79 (empty -> .)
    LESS            reduce using rule 79 (empty -> .)
    GREATER         reduce using rule 79 (empty -> .)
    END             reduce using rule 79 (empty -> .)
    SEMICOLON       reduce using rule 79 (empty -> .)
    BEGIN           reduce using rule 79 (empty -> .)
    IF              reduce using rule 79 (empty -> .)
    WHILE           reduce using rule 79 (empty -> .)
    DO              reduce using rule 79 (empty -> .)
    RPAREN          reduce using rule 79 (empty -> .)
    RBRACKET        reduce using rule 79 (empty -> .)
    ELSE            reduce using rule 79 (empty -> .)
    COMMA           reduce using rule 79 (empty -> .)

    simple_expression2             shift and go to state 84
    adding_operator                shift and go to state 86
    empty                          shift and go to state 88

state 55

    (57) factor -> NUMBER .

    TIMES           reduce using rule 57 (factor -> NUMBER .)
    DIV             reduce using rule 57 (factor -> NUMBER .)
    AND             reduce using rule 57 (factor -> NUMBER .)
    PLUS            reduce using rule 57 (factor -> NUMBER .)
    MINUS           reduce using rule 57 (factor -> NUMBER .)
    OR              reduce using rule 57 (factor -> NUMBER .)
    EQUAL           reduce using rule 57 (factor -> NUMBER .)
    DISTINT         reduce using rule 57 (factor -> NUMBER .)
    LESS            reduce using rule 57 (factor -> NUMBER .)
    GREATER         reduce using rule 57 (factor -> NUMBER .)
    END             reduce using rule 57 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 57 (factor -> NUMBER .)
    BEGIN           reduce using rule 57 (factor -> NUMBER .)
    IF              reduce using rule 57 (factor -> NUMBER .)
    WHILE           reduce using rule 57 (factor -> NUMBER .)
    DO              reduce using rule 57 (factor -> NUMBER .)
    RPAREN          reduce using rule 57 (factor -> NUMBER .)
    RBRACKET        reduce using rule 57 (factor -> NUMBER .)
    ELSE            reduce using rule 57 (factor -> NUMBER .)
    COMMA           reduce using rule 57 (factor -> NUMBER .)


state 56

    (59) factor -> NOT . factor
    (56) factor -> . variable
    (57) factor -> . NUMBER
    (58) factor -> . LPAREN expression RPAREN
    (59) factor -> . NOT factor
    (73) variable -> . entire_variable
    (74) variable -> . indexed_variable
    (77) entire_variable -> . variable_identifier
    (75) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (78) variable_identifier -> . ID
    (76) array_variable -> . entire_variable

    NUMBER          shift and go to state 55
    LPAREN          shift and go to state 57
    NOT             shift and go to state 56
    ID              shift and go to state 60

    indexed_variable               shift and go to state 23
    variable_identifier            shift and go to state 47
    entire_variable                shift and go to state 36
    factor                         shift and go to state 90
    variable                       shift and go to state 59
    array_variable                 shift and go to state 29

state 57

    (58) factor -> LPAREN . expression RPAREN
    (48) expression -> . simple_expression
    (49) expression -> . simple_expression relational_operator simple_expression
    (50) simple_expression -> . sign term simple_expression2
    (64) sign -> . PLUS
    (65) sign -> . MINUS
    (66) sign -> . empty
    (79) empty -> .

    PLUS            shift and go to state 40
    MINUS           shift and go to state 30
    NUMBER          reduce using rule 79 (empty -> .)
    LPAREN          reduce using rule 79 (empty -> .)
    NOT             reduce using rule 79 (empty -> .)
    ID              reduce using rule 79 (empty -> .)

    sign                           shift and go to state 26
    simple_expression              shift and go to state 28
    expression                     shift and go to state 91
    empty                          shift and go to state 42

state 58

    (53) term -> factor . term2
    (54) term2 -> . multiplying_operator factor
    (55) term2 -> . empty
    (70) multiplying_operator -> . TIMES
    (71) multiplying_operator -> . DIV
    (72) multiplying_operator -> . AND
    (79) empty -> .

    TIMES           shift and go to state 94
    DIV             shift and go to state 95
    AND             shift and go to state 92
    PLUS            reduce using rule 79 (empty -> .)
    MINUS           reduce using rule 79 (empty -> .)
    OR              reduce using rule 79 (empty -> .)
    EQUAL           reduce using rule 79 (empty -> .)
    DISTINT         reduce using rule 79 (empty -> .)
    LESS            reduce using rule 79 (empty -> .)
    GREATER         reduce using rule 79 (empty -> .)
    END             reduce using rule 79 (empty -> .)
    SEMICOLON       reduce using rule 79 (empty -> .)
    BEGIN           reduce using rule 79 (empty -> .)
    IF              reduce using rule 79 (empty -> .)
    WHILE           reduce using rule 79 (empty -> .)
    DO              reduce using rule 79 (empty -> .)
    RPAREN          reduce using rule 79 (empty -> .)
    RBRACKET        reduce using rule 79 (empty -> .)
    ELSE            reduce using rule 79 (empty -> .)
    COMMA           reduce using rule 79 (empty -> .)

    multiplying_operator           shift and go to state 96
    term2                          shift and go to state 93
    empty                          shift and go to state 97

state 59

    (56) factor -> variable .

    TIMES           reduce using rule 56 (factor -> variable .)
    DIV             reduce using rule 56 (factor -> variable .)
    AND             reduce using rule 56 (factor -> variable .)
    PLUS            reduce using rule 56 (factor -> variable .)
    MINUS           reduce using rule 56 (factor -> variable .)
    OR              reduce using rule 56 (factor -> variable .)
    EQUAL           reduce using rule 56 (factor -> variable .)
    DISTINT         reduce using rule 56 (factor -> variable .)
    LESS            reduce using rule 56 (factor -> variable .)
    GREATER         reduce using rule 56 (factor -> variable .)
    END             reduce using rule 56 (factor -> variable .)
    SEMICOLON       reduce using rule 56 (factor -> variable .)
    BEGIN           reduce using rule 56 (factor -> variable .)
    IF              reduce using rule 56 (factor -> variable .)
    WHILE           reduce using rule 56 (factor -> variable .)
    DO              reduce using rule 56 (factor -> variable .)
    RPAREN          reduce using rule 56 (factor -> variable .)
    RBRACKET        reduce using rule 56 (factor -> variable .)
    ELSE            reduce using rule 56 (factor -> variable .)
    COMMA           reduce using rule 56 (factor -> variable .)


state 60

    (78) variable_identifier -> ID .

    TIMES           reduce using rule 78 (variable_identifier -> ID .)
    DIV             reduce using rule 78 (variable_identifier -> ID .)
    AND             reduce using rule 78 (variable_identifier -> ID .)
    EQUAL           reduce using rule 78 (variable_identifier -> ID .)
    DISTINT         reduce using rule 78 (variable_identifier -> ID .)
    LESS            reduce using rule 78 (variable_identifier -> ID .)
    GREATER         reduce using rule 78 (variable_identifier -> ID .)
    END             reduce using rule 78 (variable_identifier -> ID .)
    SEMICOLON       reduce using rule 78 (variable_identifier -> ID .)
    BEGIN           reduce using rule 78 (variable_identifier -> ID .)
    IF              reduce using rule 78 (variable_identifier -> ID .)
    WHILE           reduce using rule 78 (variable_identifier -> ID .)
    DO              reduce using rule 78 (variable_identifier -> ID .)
    RPAREN          reduce using rule 78 (variable_identifier -> ID .)
    RBRACKET        reduce using rule 78 (variable_identifier -> ID .)
    ELSE            reduce using rule 78 (variable_identifier -> ID .)
    COMMA           reduce using rule 78 (variable_identifier -> ID .)
    LBRACKET        reduce using rule 78 (variable_identifier -> ID .)
    PLUS            reduce using rule 78 (variable_identifier -> ID .)
    MINUS           reduce using rule 78 (variable_identifier -> ID .)
    OR              reduce using rule 78 (variable_identifier -> ID .)


state 61

    (47) while_statement -> WHILE expression . DO statement

    DO              shift and go to state 98


state 62

    (49) expression -> simple_expression relational_operator . simple_expression
    (50) simple_expression -> . sign term simple_expression2
    (64) sign -> . PLUS
    (65) sign -> . MINUS
    (66) sign -> . empty
    (79) empty -> .

    PLUS            shift and go to state 40
    MINUS           shift and go to state 30
    NUMBER          reduce using rule 79 (empty -> .)
    LPAREN          reduce using rule 79 (empty -> .)
    NOT             reduce using rule 79 (empty -> .)
    ID              reduce using rule 79 (empty -> .)

    sign                           shift and go to state 26
    simple_expression              shift and go to state 99
    empty                          shift and go to state 42

state 63

    (62) relational_operator -> LESS .

    PLUS            reduce using rule 62 (relational_operator -> LESS .)
    MINUS           reduce using rule 62 (relational_operator -> LESS .)
    NUMBER          reduce using rule 62 (relational_operator -> LESS .)
    LPAREN          reduce using rule 62 (relational_operator -> LESS .)
    NOT             reduce using rule 62 (relational_operator -> LESS .)
    ID              reduce using rule 62 (relational_operator -> LESS .)


state 64

    (61) relational_operator -> DISTINT .

    PLUS            reduce using rule 61 (relational_operator -> DISTINT .)
    MINUS           reduce using rule 61 (relational_operator -> DISTINT .)
    NUMBER          reduce using rule 61 (relational_operator -> DISTINT .)
    LPAREN          reduce using rule 61 (relational_operator -> DISTINT .)
    NOT             reduce using rule 61 (relational_operator -> DISTINT .)
    ID              reduce using rule 61 (relational_operator -> DISTINT .)


state 65

    (60) relational_operator -> EQUAL .

    PLUS            reduce using rule 60 (relational_operator -> EQUAL .)
    MINUS           reduce using rule 60 (relational_operator -> EQUAL .)
    NUMBER          reduce using rule 60 (relational_operator -> EQUAL .)
    LPAREN          reduce using rule 60 (relational_operator -> EQUAL .)
    NOT             reduce using rule 60 (relational_operator -> EQUAL .)
    ID              reduce using rule 60 (relational_operator -> EQUAL .)


state 66

    (63) relational_operator -> GREATER .

    PLUS            reduce using rule 63 (relational_operator -> GREATER .)
    MINUS           reduce using rule 63 (relational_operator -> GREATER .)
    NUMBER          reduce using rule 63 (relational_operator -> GREATER .)
    LPAREN          reduce using rule 63 (relational_operator -> GREATER .)
    NOT             reduce using rule 63 (relational_operator -> GREATER .)
    ID              reduce using rule 63 (relational_operator -> GREATER .)


state 67

    (75) indexed_variable -> array_variable LBRACKET . expression RBRACKET
    (48) expression -> . simple_expression
    (49) expression -> . simple_expression relational_operator simple_expression
    (50) simple_expression -> . sign term simple_expression2
    (64) sign -> . PLUS
    (65) sign -> . MINUS
    (66) sign -> . empty
    (79) empty -> .

    PLUS            shift and go to state 40
    MINUS           shift and go to state 30
    NUMBER          reduce using rule 79 (empty -> .)
    LPAREN          reduce using rule 79 (empty -> .)
    NOT             reduce using rule 79 (empty -> .)
    ID              reduce using rule 79 (empty -> .)

    sign                           shift and go to state 26
    simple_expression              shift and go to state 28
    expression                     shift and go to state 100
    empty                          shift and go to state 42

state 68

    (19) compound_statement -> BEGIN statement END . DOT

    DOT             shift and go to state 101


state 69

    (21) statement -> statement SEMICOLON . simple_statement
    (26) simple_statement -> . assignment_statement
    (27) simple_statement -> . procedure_statement
    (28) simple_statement -> . read_statement
    (29) simple_statement -> . write_statement
    (30) assignment_statement -> . variable
    (31) assignment_statement -> . expression
    (32) procedure_statement -> . procedure_identifier
    (34) read_statement -> . READ LPAREN input_variable input_variable2 RPAREN SEMICOLON
    (38) write_statement -> . WRITE LPAREN output_value COMMA output_value2 RPAREN
    (73) variable -> . entire_variable
    (74) variable -> . indexed_variable
    (48) expression -> . simple_expression
    (49) expression -> . simple_expression relational_operator simple_expression
    (33) procedure_identifier -> . ID
    (77) entire_variable -> . variable_identifier
    (75) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (50) simple_expression -> . sign term simple_expression2
    (78) variable_identifier -> . ID
    (76) array_variable -> . entire_variable
    (64) sign -> . PLUS
    (65) sign -> . MINUS
    (66) sign -> . empty
    (79) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    READ            shift and go to state 24
    WRITE           shift and go to state 43
    ID              shift and go to state 45
    PLUS            shift and go to state 40
    MINUS           shift and go to state 30
    NUMBER          reduce using rule 79 (empty -> .)
    LPAREN          reduce using rule 79 (empty -> .)
    NOT             reduce using rule 79 (empty -> .)

  ! ID              [ reduce using rule 79 (empty -> .) ]

    indexed_variable               shift and go to state 23
    simple_statement               shift and go to state 102
    sign                           shift and go to state 26
    simple_expression              shift and go to state 28
    array_variable                 shift and go to state 29
    assignment_statement           shift and go to state 32
    procedure_statement            shift and go to state 33
    write_statement                shift and go to state 35
    entire_variable                shift and go to state 36
    read_statement                 shift and go to state 39
    empty                          shift and go to state 42
    variable_identifier            shift and go to state 47
    variable                       shift and go to state 44
    procedure_identifier           shift and go to state 48
    expression                     shift and go to state 49

state 70

    (22) statement -> statement structured_statement .

    SEMICOLON       reduce using rule 22 (statement -> statement structured_statement .)
    BEGIN           reduce using rule 22 (statement -> statement structured_statement .)
    IF              reduce using rule 22 (statement -> statement structured_statement .)
    WHILE           reduce using rule 22 (statement -> statement structured_statement .)
    END             reduce using rule 22 (statement -> statement structured_statement .)
    ELSE            reduce using rule 22 (statement -> statement structured_statement .)


state 71

    (38) write_statement -> WRITE LPAREN . output_value COMMA output_value2 RPAREN
    (39) output_value -> . expression
    (48) expression -> . simple_expression
    (49) expression -> . simple_expression relational_operator simple_expression
    (50) simple_expression -> . sign term simple_expression2
    (64) sign -> . PLUS
    (65) sign -> . MINUS
    (66) sign -> . empty
    (79) empty -> .

    PLUS            shift and go to state 40
    MINUS           shift and go to state 30
    NUMBER          reduce using rule 79 (empty -> .)
    LPAREN          reduce using rule 79 (empty -> .)
    NOT             reduce using rule 79 (empty -> .)
    ID              reduce using rule 79 (empty -> .)

    sign                           shift and go to state 26
    output_value                   shift and go to state 103
    simple_expression              shift and go to state 28
    expression                     shift and go to state 104
    empty                          shift and go to state 42

state 72

    (45) if_statement -> IF LPAREN . expression RPAREN THEN statement
    (46) if_statement -> IF LPAREN . expression RPAREN THEN statement ELSE statement
    (48) expression -> . simple_expression
    (49) expression -> . simple_expression relational_operator simple_expression
    (50) simple_expression -> . sign term simple_expression2
    (64) sign -> . PLUS
    (65) sign -> . MINUS
    (66) sign -> . empty
    (79) empty -> .

    PLUS            shift and go to state 40
    MINUS           shift and go to state 30
    NUMBER          reduce using rule 79 (empty -> .)
    LPAREN          reduce using rule 79 (empty -> .)
    NOT             reduce using rule 79 (empty -> .)
    ID              reduce using rule 79 (empty -> .)

    sign                           shift and go to state 26
    simple_expression              shift and go to state 28
    expression                     shift and go to state 105
    empty                          shift and go to state 42

state 73

    (17) procedure_declaration -> PROCEDURE ID SEMICOLON block .

    BEGIN           reduce using rule 17 (procedure_declaration -> PROCEDURE ID SEMICOLON block .)


state 74

    (6) variable_declaration2 -> COMMA ID variable_declaration2 .

    COLON           reduce using rule 6 (variable_declaration2 -> COMMA ID variable_declaration2 .)


state 75

    (12) simple_type -> type_identifier .

    SEMICOLON       reduce using rule 12 (simple_type -> type_identifier .)


state 76

    (8) type -> simple_type .

    SEMICOLON       reduce using rule 8 (type -> simple_type .)


state 77

    (5) variable_declaration -> ID variable_declaration2 COLON type .

    SEMICOLON       reduce using rule 5 (variable_declaration -> ID variable_declaration2 COLON type .)


state 78

    (9) type -> array_type .

    SEMICOLON       reduce using rule 9 (type -> array_type .)


state 79

    (13) type_identifier -> INTEGER .

    SEMICOLON       reduce using rule 13 (type_identifier -> INTEGER .)


state 80

    (10) array_type -> ARRAY . LBRACKET index_range RBRACKET OF simple_type

    LBRACKET        shift and go to state 106


state 81

    (14) type_identifier -> CHAR .

    SEMICOLON       reduce using rule 14 (type_identifier -> CHAR .)


state 82

    (35) input_variable -> variable .

    COMMA           reduce using rule 35 (input_variable -> variable .)
    RPAREN          reduce using rule 35 (input_variable -> variable .)


state 83

    (34) read_statement -> READ LPAREN input_variable . input_variable2 RPAREN SEMICOLON
    (36) input_variable2 -> . empty
    (37) input_variable2 -> . COMMA variable
    (79) empty -> .

    COMMA           shift and go to state 107
    RPAREN          reduce using rule 79 (empty -> .)

    input_variable2                shift and go to state 108
    empty                          shift and go to state 109

state 84

    (50) simple_expression -> sign term simple_expression2 .

    EQUAL           reduce using rule 50 (simple_expression -> sign term simple_expression2 .)
    DISTINT         reduce using rule 50 (simple_expression -> sign term simple_expression2 .)
    LESS            reduce using rule 50 (simple_expression -> sign term simple_expression2 .)
    GREATER         reduce using rule 50 (simple_expression -> sign term simple_expression2 .)
    COMMA           reduce using rule 50 (simple_expression -> sign term simple_expression2 .)
    END             reduce using rule 50 (simple_expression -> sign term simple_expression2 .)
    SEMICOLON       reduce using rule 50 (simple_expression -> sign term simple_expression2 .)
    BEGIN           reduce using rule 50 (simple_expression -> sign term simple_expression2 .)
    IF              reduce using rule 50 (simple_expression -> sign term simple_expression2 .)
    WHILE           reduce using rule 50 (simple_expression -> sign term simple_expression2 .)
    ELSE            reduce using rule 50 (simple_expression -> sign term simple_expression2 .)
    RPAREN          reduce using rule 50 (simple_expression -> sign term simple_expression2 .)
    DO              reduce using rule 50 (simple_expression -> sign term simple_expression2 .)
    RBRACKET        reduce using rule 50 (simple_expression -> sign term simple_expression2 .)


state 85

    (67) adding_operator -> PLUS .

    NUMBER          reduce using rule 67 (adding_operator -> PLUS .)
    LPAREN          reduce using rule 67 (adding_operator -> PLUS .)
    NOT             reduce using rule 67 (adding_operator -> PLUS .)
    ID              reduce using rule 67 (adding_operator -> PLUS .)


state 86

    (51) simple_expression2 -> adding_operator . term
    (53) term -> . factor term2
    (56) factor -> . variable
    (57) factor -> . NUMBER
    (58) factor -> . LPAREN expression RPAREN
    (59) factor -> . NOT factor
    (73) variable -> . entire_variable
    (74) variable -> . indexed_variable
    (77) entire_variable -> . variable_identifier
    (75) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (78) variable_identifier -> . ID
    (76) array_variable -> . entire_variable

    NUMBER          shift and go to state 55
    LPAREN          shift and go to state 57
    NOT             shift and go to state 56
    ID              shift and go to state 60

    term                           shift and go to state 110
    indexed_variable               shift and go to state 23
    variable_identifier            shift and go to state 47
    entire_variable                shift and go to state 36
    factor                         shift and go to state 58
    variable                       shift and go to state 59
    array_variable                 shift and go to state 29

state 87

    (68) adding_operator -> MINUS .

    NUMBER          reduce using rule 68 (adding_operator -> MINUS .)
    LPAREN          reduce using rule 68 (adding_operator -> MINUS .)
    NOT             reduce using rule 68 (adding_operator -> MINUS .)
    ID              reduce using rule 68 (adding_operator -> MINUS .)


state 88

    (52) simple_expression2 -> empty .

    EQUAL           reduce using rule 52 (simple_expression2 -> empty .)
    DISTINT         reduce using rule 52 (simple_expression2 -> empty .)
    LESS            reduce using rule 52 (simple_expression2 -> empty .)
    GREATER         reduce using rule 52 (simple_expression2 -> empty .)
    END             reduce using rule 52 (simple_expression2 -> empty .)
    SEMICOLON       reduce using rule 52 (simple_expression2 -> empty .)
    BEGIN           reduce using rule 52 (simple_expression2 -> empty .)
    IF              reduce using rule 52 (simple_expression2 -> empty .)
    WHILE           reduce using rule 52 (simple_expression2 -> empty .)
    DO              reduce using rule 52 (simple_expression2 -> empty .)
    RPAREN          reduce using rule 52 (simple_expression2 -> empty .)
    RBRACKET        reduce using rule 52 (simple_expression2 -> empty .)
    ELSE            reduce using rule 52 (simple_expression2 -> empty .)
    COMMA           reduce using rule 52 (simple_expression2 -> empty .)


state 89

    (69) adding_operator -> OR .

    NUMBER          reduce using rule 69 (adding_operator -> OR .)
    LPAREN          reduce using rule 69 (adding_operator -> OR .)
    NOT             reduce using rule 69 (adding_operator -> OR .)
    ID              reduce using rule 69 (adding_operator -> OR .)


state 90

    (59) factor -> NOT factor .

    TIMES           reduce using rule 59 (factor -> NOT factor .)
    DIV             reduce using rule 59 (factor -> NOT factor .)
    AND             reduce using rule 59 (factor -> NOT factor .)
    PLUS            reduce using rule 59 (factor -> NOT factor .)
    MINUS           reduce using rule 59 (factor -> NOT factor .)
    OR              reduce using rule 59 (factor -> NOT factor .)
    EQUAL           reduce using rule 59 (factor -> NOT factor .)
    DISTINT         reduce using rule 59 (factor -> NOT factor .)
    LESS            reduce using rule 59 (factor -> NOT factor .)
    GREATER         reduce using rule 59 (factor -> NOT factor .)
    END             reduce using rule 59 (factor -> NOT factor .)
    SEMICOLON       reduce using rule 59 (factor -> NOT factor .)
    BEGIN           reduce using rule 59 (factor -> NOT factor .)
    IF              reduce using rule 59 (factor -> NOT factor .)
    WHILE           reduce using rule 59 (factor -> NOT factor .)
    DO              reduce using rule 59 (factor -> NOT factor .)
    RPAREN          reduce using rule 59 (factor -> NOT factor .)
    RBRACKET        reduce using rule 59 (factor -> NOT factor .)
    ELSE            reduce using rule 59 (factor -> NOT factor .)
    COMMA           reduce using rule 59 (factor -> NOT factor .)


state 91

    (58) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 111


state 92

    (72) multiplying_operator -> AND .

    NUMBER          reduce using rule 72 (multiplying_operator -> AND .)
    LPAREN          reduce using rule 72 (multiplying_operator -> AND .)
    NOT             reduce using rule 72 (multiplying_operator -> AND .)
    ID              reduce using rule 72 (multiplying_operator -> AND .)


state 93

    (53) term -> factor term2 .

    PLUS            reduce using rule 53 (term -> factor term2 .)
    MINUS           reduce using rule 53 (term -> factor term2 .)
    OR              reduce using rule 53 (term -> factor term2 .)
    EQUAL           reduce using rule 53 (term -> factor term2 .)
    DISTINT         reduce using rule 53 (term -> factor term2 .)
    LESS            reduce using rule 53 (term -> factor term2 .)
    GREATER         reduce using rule 53 (term -> factor term2 .)
    END             reduce using rule 53 (term -> factor term2 .)
    SEMICOLON       reduce using rule 53 (term -> factor term2 .)
    BEGIN           reduce using rule 53 (term -> factor term2 .)
    IF              reduce using rule 53 (term -> factor term2 .)
    WHILE           reduce using rule 53 (term -> factor term2 .)
    DO              reduce using rule 53 (term -> factor term2 .)
    RPAREN          reduce using rule 53 (term -> factor term2 .)
    RBRACKET        reduce using rule 53 (term -> factor term2 .)
    ELSE            reduce using rule 53 (term -> factor term2 .)
    COMMA           reduce using rule 53 (term -> factor term2 .)


state 94

    (70) multiplying_operator -> TIMES .

    NUMBER          reduce using rule 70 (multiplying_operator -> TIMES .)
    LPAREN          reduce using rule 70 (multiplying_operator -> TIMES .)
    NOT             reduce using rule 70 (multiplying_operator -> TIMES .)
    ID              reduce using rule 70 (multiplying_operator -> TIMES .)


state 95

    (71) multiplying_operator -> DIV .

    NUMBER          reduce using rule 71 (multiplying_operator -> DIV .)
    LPAREN          reduce using rule 71 (multiplying_operator -> DIV .)
    NOT             reduce using rule 71 (multiplying_operator -> DIV .)
    ID              reduce using rule 71 (multiplying_operator -> DIV .)


state 96

    (54) term2 -> multiplying_operator . factor
    (56) factor -> . variable
    (57) factor -> . NUMBER
    (58) factor -> . LPAREN expression RPAREN
    (59) factor -> . NOT factor
    (73) variable -> . entire_variable
    (74) variable -> . indexed_variable
    (77) entire_variable -> . variable_identifier
    (75) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (78) variable_identifier -> . ID
    (76) array_variable -> . entire_variable

    NUMBER          shift and go to state 55
    LPAREN          shift and go to state 57
    NOT             shift and go to state 56
    ID              shift and go to state 60

    indexed_variable               shift and go to state 23
    variable_identifier            shift and go to state 47
    array_variable                 shift and go to state 29
    entire_variable                shift and go to state 36
    factor                         shift and go to state 112
    variable                       shift and go to state 59

state 97

    (55) term2 -> empty .

    PLUS            reduce using rule 55 (term2 -> empty .)
    MINUS           reduce using rule 55 (term2 -> empty .)
    OR              reduce using rule 55 (term2 -> empty .)
    EQUAL           reduce using rule 55 (term2 -> empty .)
    DISTINT         reduce using rule 55 (term2 -> empty .)
    LESS            reduce using rule 55 (term2 -> empty .)
    GREATER         reduce using rule 55 (term2 -> empty .)
    END             reduce using rule 55 (term2 -> empty .)
    SEMICOLON       reduce using rule 55 (term2 -> empty .)
    BEGIN           reduce using rule 55 (term2 -> empty .)
    IF              reduce using rule 55 (term2 -> empty .)
    WHILE           reduce using rule 55 (term2 -> empty .)
    DO              reduce using rule 55 (term2 -> empty .)
    RPAREN          reduce using rule 55 (term2 -> empty .)
    RBRACKET        reduce using rule 55 (term2 -> empty .)
    ELSE            reduce using rule 55 (term2 -> empty .)
    COMMA           reduce using rule 55 (term2 -> empty .)


state 98

    (47) while_statement -> WHILE expression DO . statement
    (20) statement -> . simple_statement
    (21) statement -> . statement SEMICOLON simple_statement
    (22) statement -> . statement structured_statement
    (23) statement -> . structured_statement
    (26) simple_statement -> . assignment_statement
    (27) simple_statement -> . procedure_statement
    (28) simple_statement -> . read_statement
    (29) simple_statement -> . write_statement
    (42) structured_statement -> . compound_statement
    (43) structured_statement -> . if_statement
    (44) structured_statement -> . while_statement
    (30) assignment_statement -> . variable
    (31) assignment_statement -> . expression
    (32) procedure_statement -> . procedure_identifier
    (34) read_statement -> . READ LPAREN input_variable input_variable2 RPAREN SEMICOLON
    (38) write_statement -> . WRITE LPAREN output_value COMMA output_value2 RPAREN
    (19) compound_statement -> . BEGIN statement END DOT
    (45) if_statement -> . IF LPAREN expression RPAREN THEN statement
    (46) if_statement -> . IF LPAREN expression RPAREN THEN statement ELSE statement
    (47) while_statement -> . WHILE expression DO statement
    (73) variable -> . entire_variable
    (74) variable -> . indexed_variable
    (48) expression -> . simple_expression
    (49) expression -> . simple_expression relational_operator simple_expression
    (33) procedure_identifier -> . ID
    (77) entire_variable -> . variable_identifier
    (75) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (50) simple_expression -> . sign term simple_expression2
    (78) variable_identifier -> . ID
    (76) array_variable -> . entire_variable
    (64) sign -> . PLUS
    (65) sign -> . MINUS
    (66) sign -> . empty
    (79) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    READ            shift and go to state 24
    WRITE           shift and go to state 43
    BEGIN           shift and go to state 15
    IF              shift and go to state 46
    WHILE           shift and go to state 27
    ID              shift and go to state 45
    PLUS            shift and go to state 40
    MINUS           shift and go to state 30
    NUMBER          reduce using rule 79 (empty -> .)
    LPAREN          reduce using rule 79 (empty -> .)
    NOT             reduce using rule 79 (empty -> .)

  ! ID              [ reduce using rule 79 (empty -> .) ]

    indexed_variable               shift and go to state 23
    simple_statement               shift and go to state 25
    sign                           shift and go to state 26
    simple_expression              shift and go to state 28
    array_variable                 shift and go to state 29
    compound_statement             shift and go to state 31
    assignment_statement           shift and go to state 32
    procedure_statement            shift and go to state 33
    structured_statement           shift and go to state 34
    write_statement                shift and go to state 35
    entire_variable                shift and go to state 36
    while_statement                shift and go to state 37
    statement                      shift and go to state 113
    read_statement                 shift and go to state 39
    if_statement                   shift and go to state 41
    empty                          shift and go to state 42
    variable_identifier            shift and go to state 47
    variable                       shift and go to state 44
    procedure_identifier           shift and go to state 48
    expression                     shift and go to state 49

state 99

    (49) expression -> simple_expression relational_operator simple_expression .

    COMMA           reduce using rule 49 (expression -> simple_expression relational_operator simple_expression .)
    RPAREN          reduce using rule 49 (expression -> simple_expression relational_operator simple_expression .)
    END             reduce using rule 49 (expression -> simple_expression relational_operator simple_expression .)
    SEMICOLON       reduce using rule 49 (expression -> simple_expression relational_operator simple_expression .)
    BEGIN           reduce using rule 49 (expression -> simple_expression relational_operator simple_expression .)
    IF              reduce using rule 49 (expression -> simple_expression relational_operator simple_expression .)
    WHILE           reduce using rule 49 (expression -> simple_expression relational_operator simple_expression .)
    ELSE            reduce using rule 49 (expression -> simple_expression relational_operator simple_expression .)
    RBRACKET        reduce using rule 49 (expression -> simple_expression relational_operator simple_expression .)
    DO              reduce using rule 49 (expression -> simple_expression relational_operator simple_expression .)


state 100

    (75) indexed_variable -> array_variable LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 114


state 101

    (19) compound_statement -> BEGIN statement END DOT .

    END             reduce using rule 19 (compound_statement -> BEGIN statement END DOT .)
    SEMICOLON       reduce using rule 19 (compound_statement -> BEGIN statement END DOT .)
    BEGIN           reduce using rule 19 (compound_statement -> BEGIN statement END DOT .)
    IF              reduce using rule 19 (compound_statement -> BEGIN statement END DOT .)
    WHILE           reduce using rule 19 (compound_statement -> BEGIN statement END DOT .)
    ELSE            reduce using rule 19 (compound_statement -> BEGIN statement END DOT .)
    $end            reduce using rule 19 (compound_statement -> BEGIN statement END DOT .)


state 102

    (21) statement -> statement SEMICOLON simple_statement .

    SEMICOLON       reduce using rule 21 (statement -> statement SEMICOLON simple_statement .)
    BEGIN           reduce using rule 21 (statement -> statement SEMICOLON simple_statement .)
    IF              reduce using rule 21 (statement -> statement SEMICOLON simple_statement .)
    WHILE           reduce using rule 21 (statement -> statement SEMICOLON simple_statement .)
    END             reduce using rule 21 (statement -> statement SEMICOLON simple_statement .)
    ELSE            reduce using rule 21 (statement -> statement SEMICOLON simple_statement .)


state 103

    (38) write_statement -> WRITE LPAREN output_value . COMMA output_value2 RPAREN

    COMMA           shift and go to state 115


state 104

    (39) output_value -> expression .

    COMMA           reduce using rule 39 (output_value -> expression .)


state 105

    (45) if_statement -> IF LPAREN expression . RPAREN THEN statement
    (46) if_statement -> IF LPAREN expression . RPAREN THEN statement ELSE statement

    RPAREN          shift and go to state 116


state 106

    (10) array_type -> ARRAY LBRACKET . index_range RBRACKET OF simple_type
    (11) index_range -> . NUMBER DOT DOT NUMBER

    NUMBER          shift and go to state 118

    index_range                    shift and go to state 117

state 107

    (37) input_variable2 -> COMMA . variable
    (73) variable -> . entire_variable
    (74) variable -> . indexed_variable
    (77) entire_variable -> . variable_identifier
    (75) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (78) variable_identifier -> . ID
    (76) array_variable -> . entire_variable

    ID              shift and go to state 60

    indexed_variable               shift and go to state 23
    variable_identifier            shift and go to state 47
    entire_variable                shift and go to state 36
    variable                       shift and go to state 119
    array_variable                 shift and go to state 29

state 108

    (34) read_statement -> READ LPAREN input_variable input_variable2 . RPAREN SEMICOLON

    RPAREN          shift and go to state 120


state 109

    (36) input_variable2 -> empty .

    RPAREN          reduce using rule 36 (input_variable2 -> empty .)


state 110

    (51) simple_expression2 -> adding_operator term .

    EQUAL           reduce using rule 51 (simple_expression2 -> adding_operator term .)
    DISTINT         reduce using rule 51 (simple_expression2 -> adding_operator term .)
    LESS            reduce using rule 51 (simple_expression2 -> adding_operator term .)
    GREATER         reduce using rule 51 (simple_expression2 -> adding_operator term .)
    END             reduce using rule 51 (simple_expression2 -> adding_operator term .)
    SEMICOLON       reduce using rule 51 (simple_expression2 -> adding_operator term .)
    BEGIN           reduce using rule 51 (simple_expression2 -> adding_operator term .)
    IF              reduce using rule 51 (simple_expression2 -> adding_operator term .)
    WHILE           reduce using rule 51 (simple_expression2 -> adding_operator term .)
    DO              reduce using rule 51 (simple_expression2 -> adding_operator term .)
    RPAREN          reduce using rule 51 (simple_expression2 -> adding_operator term .)
    RBRACKET        reduce using rule 51 (simple_expression2 -> adding_operator term .)
    ELSE            reduce using rule 51 (simple_expression2 -> adding_operator term .)
    COMMA           reduce using rule 51 (simple_expression2 -> adding_operator term .)


state 111

    (58) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    DIV             reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    DISTINT         reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    BEGIN           reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    IF              reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 58 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 58 (factor -> LPAREN expression RPAREN .)


state 112

    (54) term2 -> multiplying_operator factor .

    PLUS            reduce using rule 54 (term2 -> multiplying_operator factor .)
    MINUS           reduce using rule 54 (term2 -> multiplying_operator factor .)
    OR              reduce using rule 54 (term2 -> multiplying_operator factor .)
    EQUAL           reduce using rule 54 (term2 -> multiplying_operator factor .)
    DISTINT         reduce using rule 54 (term2 -> multiplying_operator factor .)
    LESS            reduce using rule 54 (term2 -> multiplying_operator factor .)
    GREATER         reduce using rule 54 (term2 -> multiplying_operator factor .)
    END             reduce using rule 54 (term2 -> multiplying_operator factor .)
    SEMICOLON       reduce using rule 54 (term2 -> multiplying_operator factor .)
    BEGIN           reduce using rule 54 (term2 -> multiplying_operator factor .)
    IF              reduce using rule 54 (term2 -> multiplying_operator factor .)
    WHILE           reduce using rule 54 (term2 -> multiplying_operator factor .)
    DO              reduce using rule 54 (term2 -> multiplying_operator factor .)
    RPAREN          reduce using rule 54 (term2 -> multiplying_operator factor .)
    RBRACKET        reduce using rule 54 (term2 -> multiplying_operator factor .)
    ELSE            reduce using rule 54 (term2 -> multiplying_operator factor .)
    COMMA           reduce using rule 54 (term2 -> multiplying_operator factor .)


state 113

    (47) while_statement -> WHILE expression DO statement .
    (21) statement -> statement . SEMICOLON simple_statement
    (22) statement -> statement . structured_statement
    (42) structured_statement -> . compound_statement
    (43) structured_statement -> . if_statement
    (44) structured_statement -> . while_statement
    (19) compound_statement -> . BEGIN statement END DOT
    (45) if_statement -> . IF LPAREN expression RPAREN THEN statement
    (46) if_statement -> . IF LPAREN expression RPAREN THEN statement ELSE statement
    (47) while_statement -> . WHILE expression DO statement

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    END             reduce using rule 47 (while_statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 47 (while_statement -> WHILE expression DO statement .)
    SEMICOLON       shift and go to state 69
    BEGIN           shift and go to state 15
    IF              shift and go to state 46
    WHILE           shift and go to state 27

  ! SEMICOLON       [ reduce using rule 47 (while_statement -> WHILE expression DO statement .) ]
  ! BEGIN           [ reduce using rule 47 (while_statement -> WHILE expression DO statement .) ]
  ! IF              [ reduce using rule 47 (while_statement -> WHILE expression DO statement .) ]
  ! WHILE           [ reduce using rule 47 (while_statement -> WHILE expression DO statement .) ]

    compound_statement             shift and go to state 31
    structured_statement           shift and go to state 70
    while_statement                shift and go to state 37
    if_statement                   shift and go to state 41

state 114

    (75) indexed_variable -> array_variable LBRACKET expression RBRACKET .

    COMMA           reduce using rule 75 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 75 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    END             reduce using rule 75 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 75 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    BEGIN           reduce using rule 75 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    IF              reduce using rule 75 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 75 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 75 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 75 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    DIV             reduce using rule 75 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    AND             reduce using rule 75 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 75 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 75 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    OR              reduce using rule 75 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 75 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    DISTINT         reduce using rule 75 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    LESS            reduce using rule 75 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 75 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    DO              reduce using rule 75 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 75 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)


state 115

    (38) write_statement -> WRITE LPAREN output_value COMMA . output_value2 RPAREN
    (40) output_value2 -> . empty
    (41) output_value2 -> . expression
    (79) empty -> .
    (48) expression -> . simple_expression
    (49) expression -> . simple_expression relational_operator simple_expression
    (50) simple_expression -> . sign term simple_expression2
    (64) sign -> . PLUS
    (65) sign -> . MINUS
    (66) sign -> . empty

    RPAREN          reduce using rule 79 (empty -> .)
    NUMBER          reduce using rule 79 (empty -> .)
    LPAREN          reduce using rule 79 (empty -> .)
    NOT             reduce using rule 79 (empty -> .)
    ID              reduce using rule 79 (empty -> .)
    PLUS            shift and go to state 40
    MINUS           shift and go to state 30

    output_value2                  shift and go to state 121
    sign                           shift and go to state 26
    simple_expression              shift and go to state 28
    expression                     shift and go to state 122
    empty                          shift and go to state 123

state 116

    (45) if_statement -> IF LPAREN expression RPAREN . THEN statement
    (46) if_statement -> IF LPAREN expression RPAREN . THEN statement ELSE statement

    THEN            shift and go to state 124


state 117

    (10) array_type -> ARRAY LBRACKET index_range . RBRACKET OF simple_type

    RBRACKET        shift and go to state 125


state 118

    (11) index_range -> NUMBER . DOT DOT NUMBER

    DOT             shift and go to state 126


state 119

    (37) input_variable2 -> COMMA variable .

    RPAREN          reduce using rule 37 (input_variable2 -> COMMA variable .)


state 120

    (34) read_statement -> READ LPAREN input_variable input_variable2 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 127


state 121

    (38) write_statement -> WRITE LPAREN output_value COMMA output_value2 . RPAREN

    RPAREN          shift and go to state 128


state 122

    (41) output_value2 -> expression .

    RPAREN          reduce using rule 41 (output_value2 -> expression .)


state 123

    (40) output_value2 -> empty .
    (66) sign -> empty .

    RPAREN          reduce using rule 40 (output_value2 -> empty .)
    NUMBER          reduce using rule 66 (sign -> empty .)
    LPAREN          reduce using rule 66 (sign -> empty .)
    NOT             reduce using rule 66 (sign -> empty .)
    ID              reduce using rule 66 (sign -> empty .)


state 124

    (45) if_statement -> IF LPAREN expression RPAREN THEN . statement
    (46) if_statement -> IF LPAREN expression RPAREN THEN . statement ELSE statement
    (20) statement -> . simple_statement
    (21) statement -> . statement SEMICOLON simple_statement
    (22) statement -> . statement structured_statement
    (23) statement -> . structured_statement
    (26) simple_statement -> . assignment_statement
    (27) simple_statement -> . procedure_statement
    (28) simple_statement -> . read_statement
    (29) simple_statement -> . write_statement
    (42) structured_statement -> . compound_statement
    (43) structured_statement -> . if_statement
    (44) structured_statement -> . while_statement
    (30) assignment_statement -> . variable
    (31) assignment_statement -> . expression
    (32) procedure_statement -> . procedure_identifier
    (34) read_statement -> . READ LPAREN input_variable input_variable2 RPAREN SEMICOLON
    (38) write_statement -> . WRITE LPAREN output_value COMMA output_value2 RPAREN
    (19) compound_statement -> . BEGIN statement END DOT
    (45) if_statement -> . IF LPAREN expression RPAREN THEN statement
    (46) if_statement -> . IF LPAREN expression RPAREN THEN statement ELSE statement
    (47) while_statement -> . WHILE expression DO statement
    (73) variable -> . entire_variable
    (74) variable -> . indexed_variable
    (48) expression -> . simple_expression
    (49) expression -> . simple_expression relational_operator simple_expression
    (33) procedure_identifier -> . ID
    (77) entire_variable -> . variable_identifier
    (75) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (50) simple_expression -> . sign term simple_expression2
    (78) variable_identifier -> . ID
    (76) array_variable -> . entire_variable
    (64) sign -> . PLUS
    (65) sign -> . MINUS
    (66) sign -> . empty
    (79) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    READ            shift and go to state 24
    WRITE           shift and go to state 43
    BEGIN           shift and go to state 15
    IF              shift and go to state 46
    WHILE           shift and go to state 27
    ID              shift and go to state 45
    PLUS            shift and go to state 40
    MINUS           shift and go to state 30
    NUMBER          reduce using rule 79 (empty -> .)
    LPAREN          reduce using rule 79 (empty -> .)
    NOT             reduce using rule 79 (empty -> .)

  ! ID              [ reduce using rule 79 (empty -> .) ]

    indexed_variable               shift and go to state 23
    simple_statement               shift and go to state 25
    sign                           shift and go to state 26
    simple_expression              shift and go to state 28
    array_variable                 shift and go to state 29
    compound_statement             shift and go to state 31
    assignment_statement           shift and go to state 32
    procedure_statement            shift and go to state 33
    structured_statement           shift and go to state 34
    write_statement                shift and go to state 35
    entire_variable                shift and go to state 36
    while_statement                shift and go to state 37
    statement                      shift and go to state 129
    read_statement                 shift and go to state 39
    if_statement                   shift and go to state 41
    empty                          shift and go to state 42
    variable_identifier            shift and go to state 47
    variable                       shift and go to state 44
    procedure_identifier           shift and go to state 48
    expression                     shift and go to state 49

state 125

    (10) array_type -> ARRAY LBRACKET index_range RBRACKET . OF simple_type

    OF              shift and go to state 130


state 126

    (11) index_range -> NUMBER DOT . DOT NUMBER

    DOT             shift and go to state 131


state 127

    (34) read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .

    SEMICOLON       reduce using rule 34 (read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .)
    BEGIN           reduce using rule 34 (read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .)
    IF              reduce using rule 34 (read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .)
    WHILE           reduce using rule 34 (read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .)
    END             reduce using rule 34 (read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .)
    ELSE            reduce using rule 34 (read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .)


state 128

    (38) write_statement -> WRITE LPAREN output_value COMMA output_value2 RPAREN .

    SEMICOLON       reduce using rule 38 (write_statement -> WRITE LPAREN output_value COMMA output_value2 RPAREN .)
    BEGIN           reduce using rule 38 (write_statement -> WRITE LPAREN output_value COMMA output_value2 RPAREN .)
    IF              reduce using rule 38 (write_statement -> WRITE LPAREN output_value COMMA output_value2 RPAREN .)
    WHILE           reduce using rule 38 (write_statement -> WRITE LPAREN output_value COMMA output_value2 RPAREN .)
    END             reduce using rule 38 (write_statement -> WRITE LPAREN output_value COMMA output_value2 RPAREN .)
    ELSE            reduce using rule 38 (write_statement -> WRITE LPAREN output_value COMMA output_value2 RPAREN .)


state 129

    (45) if_statement -> IF LPAREN expression RPAREN THEN statement .
    (46) if_statement -> IF LPAREN expression RPAREN THEN statement . ELSE statement
    (21) statement -> statement . SEMICOLON simple_statement
    (22) statement -> statement . structured_statement
    (42) structured_statement -> . compound_statement
    (43) structured_statement -> . if_statement
    (44) structured_statement -> . while_statement
    (19) compound_statement -> . BEGIN statement END DOT
    (45) if_statement -> . IF LPAREN expression RPAREN THEN statement
    (46) if_statement -> . IF LPAREN expression RPAREN THEN statement ELSE statement
    (47) while_statement -> . WHILE expression DO statement

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    END             reduce using rule 45 (if_statement -> IF LPAREN expression RPAREN THEN statement .)
    ELSE            shift and go to state 132
    SEMICOLON       shift and go to state 69
    BEGIN           shift and go to state 15
    IF              shift and go to state 46
    WHILE           shift and go to state 27

  ! SEMICOLON       [ reduce using rule 45 (if_statement -> IF LPAREN expression RPAREN THEN statement .) ]
  ! BEGIN           [ reduce using rule 45 (if_statement -> IF LPAREN expression RPAREN THEN statement .) ]
  ! IF              [ reduce using rule 45 (if_statement -> IF LPAREN expression RPAREN THEN statement .) ]
  ! WHILE           [ reduce using rule 45 (if_statement -> IF LPAREN expression RPAREN THEN statement .) ]
  ! ELSE            [ reduce using rule 45 (if_statement -> IF LPAREN expression RPAREN THEN statement .) ]

    compound_statement             shift and go to state 31
    structured_statement           shift and go to state 70
    while_statement                shift and go to state 37
    if_statement                   shift and go to state 41

state 130

    (10) array_type -> ARRAY LBRACKET index_range RBRACKET OF . simple_type
    (12) simple_type -> . type_identifier
    (13) type_identifier -> . INTEGER
    (14) type_identifier -> . CHAR

    INTEGER         shift and go to state 79
    CHAR            shift and go to state 81

    type_identifier                shift and go to state 75
    simple_type                    shift and go to state 133

state 131

    (11) index_range -> NUMBER DOT DOT . NUMBER

    NUMBER          shift and go to state 134


state 132

    (46) if_statement -> IF LPAREN expression RPAREN THEN statement ELSE . statement
    (20) statement -> . simple_statement
    (21) statement -> . statement SEMICOLON simple_statement
    (22) statement -> . statement structured_statement
    (23) statement -> . structured_statement
    (26) simple_statement -> . assignment_statement
    (27) simple_statement -> . procedure_statement
    (28) simple_statement -> . read_statement
    (29) simple_statement -> . write_statement
    (42) structured_statement -> . compound_statement
    (43) structured_statement -> . if_statement
    (44) structured_statement -> . while_statement
    (30) assignment_statement -> . variable
    (31) assignment_statement -> . expression
    (32) procedure_statement -> . procedure_identifier
    (34) read_statement -> . READ LPAREN input_variable input_variable2 RPAREN SEMICOLON
    (38) write_statement -> . WRITE LPAREN output_value COMMA output_value2 RPAREN
    (19) compound_statement -> . BEGIN statement END DOT
    (45) if_statement -> . IF LPAREN expression RPAREN THEN statement
    (46) if_statement -> . IF LPAREN expression RPAREN THEN statement ELSE statement
    (47) while_statement -> . WHILE expression DO statement
    (73) variable -> . entire_variable
    (74) variable -> . indexed_variable
    (48) expression -> . simple_expression
    (49) expression -> . simple_expression relational_operator simple_expression
    (33) procedure_identifier -> . ID
    (77) entire_variable -> . variable_identifier
    (75) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (50) simple_expression -> . sign term simple_expression2
    (78) variable_identifier -> . ID
    (76) array_variable -> . entire_variable
    (64) sign -> . PLUS
    (65) sign -> . MINUS
    (66) sign -> . empty
    (79) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    READ            shift and go to state 24
    WRITE           shift and go to state 43
    BEGIN           shift and go to state 15
    IF              shift and go to state 46
    WHILE           shift and go to state 27
    ID              shift and go to state 45
    PLUS            shift and go to state 40
    MINUS           shift and go to state 30
    NUMBER          reduce using rule 79 (empty -> .)
    LPAREN          reduce using rule 79 (empty -> .)
    NOT             reduce using rule 79 (empty -> .)

  ! ID              [ reduce using rule 79 (empty -> .) ]

    indexed_variable               shift and go to state 23
    simple_statement               shift and go to state 25
    sign                           shift and go to state 26
    simple_expression              shift and go to state 28
    array_variable                 shift and go to state 29
    compound_statement             shift and go to state 31
    assignment_statement           shift and go to state 32
    procedure_statement            shift and go to state 33
    structured_statement           shift and go to state 34
    write_statement                shift and go to state 35
    entire_variable                shift and go to state 36
    while_statement                shift and go to state 37
    statement                      shift and go to state 135
    read_statement                 shift and go to state 39
    if_statement                   shift and go to state 41
    empty                          shift and go to state 42
    variable_identifier            shift and go to state 47
    variable                       shift and go to state 44
    procedure_identifier           shift and go to state 48
    expression                     shift and go to state 49

state 133

    (10) array_type -> ARRAY LBRACKET index_range RBRACKET OF simple_type .

    SEMICOLON       reduce using rule 10 (array_type -> ARRAY LBRACKET index_range RBRACKET OF simple_type .)


state 134

    (11) index_range -> NUMBER DOT DOT NUMBER .

    RBRACKET        reduce using rule 11 (index_range -> NUMBER DOT DOT NUMBER .)


state 135

    (46) if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .
    (21) statement -> statement . SEMICOLON simple_statement
    (22) statement -> statement . structured_statement
    (42) structured_statement -> . compound_statement
    (43) structured_statement -> . if_statement
    (44) structured_statement -> . while_statement
    (19) compound_statement -> . BEGIN statement END DOT
    (45) if_statement -> . IF LPAREN expression RPAREN THEN statement
    (46) if_statement -> . IF LPAREN expression RPAREN THEN statement ELSE statement
    (47) while_statement -> . WHILE expression DO statement

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    END             reduce using rule 46 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .)
    ELSE            reduce using rule 46 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .)
    SEMICOLON       shift and go to state 69
    BEGIN           shift and go to state 15
    IF              shift and go to state 46
    WHILE           shift and go to state 27

  ! SEMICOLON       [ reduce using rule 46 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .) ]
  ! BEGIN           [ reduce using rule 46 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .) ]
  ! IF              [ reduce using rule 46 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .) ]
  ! WHILE           [ reduce using rule 46 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .) ]

    compound_statement             shift and go to state 31
    structured_statement           shift and go to state 70
    while_statement                shift and go to state 37
    if_statement                   shift and go to state 41
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 15 resolved as shift
WARNING: shift/reduce conflict for ID in state 69 resolved as shift
WARNING: shift/reduce conflict for ID in state 98 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 113 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 113 resolved as shift
WARNING: shift/reduce conflict for IF in state 113 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 113 resolved as shift
WARNING: shift/reduce conflict for ID in state 124 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 129 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 129 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 129 resolved as shift
WARNING: shift/reduce conflict for IF in state 129 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 129 resolved as shift
WARNING: shift/reduce conflict for ID in state 132 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 135 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 135 resolved as shift
WARNING: shift/reduce conflict for IF in state 135 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 135 resolved as shift
WARNING: reduce/reduce conflict in state 45 resolved using rule (procedure_identifier -> ID)
WARNING: rejected rule (variable_identifier -> ID) in state 45
