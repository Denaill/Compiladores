Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    RESET
    EOF
    SIMPLE
    TEXT
    EXP
    TRUE
    PACKED
    COMMENT
    OPENCOMMENT
    TO
    GOTO
    CHR
    NIL
    OPENCOMMENT2
    SQR
    OUTPUT
    PACK
    FILE
    CLOSECOMMENT2
    LABEL
    SUCC
    AMPERSANT
    ROUND
    GET
    WITH
    SIN
    TRUNC
    REPEAT
    DIVIDE
    FOR
    MAXINT
    INPUT
    UNTIL
    ARCTAN
    DOWNTO
    MOD
    REAL
    COS
    NEW
    CASE
    SET
    ODD
    UNPACK
    FALSE
    REWRITE
    PRED
    EOLN
    READLN
    BOOLEAN
    HASHTAG
    PUT
    ORD
    TYPE
    PAGE
    LN
    RECORD
    DISPOSE
    ABS
    IN
    WRITELN
    SQRT
    CLOSECOMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON block
Rule 2     block -> variable_declaration_part procedure_declaration_part statement_part
Rule 3     variable_declaration_part -> empty
Rule 4     variable_declaration_part -> VAR variable_declaration SEMICOLON variable_declaration_part
Rule 5     variable_declaration_part -> CONST const_declaration SEMICOLON variable_declaration_part
Rule 6     variable_declaration -> ID variable_declaration2 COLON type
Rule 7     variable_declaration2 -> COMMA ID variable_declaration2
Rule 8     variable_declaration2 -> empty
Rule 9     const_declaration -> ID EQUAL NUMBER
Rule 10    const_declaration -> ID EQUAL STRING
Rule 11    type -> simple_type
Rule 12    type -> array_type
Rule 13    array_type -> ARRAY LBRACKET index_range RBRACKET OF simple_type
Rule 14    index_range -> NUMBER DOT DOT NUMBER
Rule 15    simple_type -> type_identifier
Rule 16    type_identifier -> INTEGER
Rule 17    type_identifier -> CHAR
Rule 18    procedure_declaration_part -> empty
Rule 19    procedure_declaration_part -> procedure_declaration
Rule 20    procedure_declaration_part -> function_declaration
Rule 21    procedure_declaration -> PROCEDURE ID SEMICOLON block
Rule 22    function_declaration -> FUNCTION ID LPAREN variable_declaration RPAREN COLON type SEMICOLON variable_declaration_part
Rule 23    statement_part -> compound_statement
Rule 24    compound_statement -> BEGIN statement END DOT compound_statement2
Rule 25    compound_statement2 -> empty
Rule 26    compound_statement2 -> compound_statement
Rule 27    statement -> simple_statement
Rule 28    statement -> statement simple_statement
Rule 29    statement -> statement structured_statement
Rule 30    statement -> structured_statement
Rule 31    statement3 -> SEMICOLON statement
Rule 32    statement3 -> empty
Rule 33    simple_statement -> assignment_statement
Rule 34    simple_statement -> procedure_statement
Rule 35    simple_statement -> read_statement
Rule 36    simple_statement -> write_statement
Rule 37    assignment_statement -> variable COLON EQUAL expression SEMICOLON
Rule 38    procedure_statement -> procedure_identifier
Rule 39    procedure_identifier -> ID
Rule 40    read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON
Rule 41    input_variable -> variable
Rule 42    input_variable2 -> empty
Rule 43    input_variable2 -> COMMA variable
Rule 44    write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON
Rule 45    output_value -> expression
Rule 46    output_value -> STRING
Rule 47    output_value2 -> empty
Rule 48    output_value2 -> COMMA expression
Rule 49    structured_statement -> compound_statement
Rule 50    structured_statement -> if_statement
Rule 51    structured_statement -> while_statement
Rule 52    if_statement -> IF LPAREN expression RPAREN THEN statement
Rule 53    if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement
Rule 54    while_statement -> WHILE expression DO statement
Rule 55    expression -> simple_expression
Rule 56    expression -> simple_expression relational_operator simple_expression
Rule 57    simple_expression -> sign term simple_expression2
Rule 58    simple_expression2 -> adding_operator term
Rule 59    simple_expression2 -> empty
Rule 60    term -> factor term2
Rule 61    term2 -> multiplying_operator factor
Rule 62    term2 -> empty
Rule 63    factor -> variable
Rule 64    factor -> NUMBER
Rule 65    factor -> LPAREN expression RPAREN
Rule 66    factor -> NOT factor
Rule 67    relational_operator -> EQUAL
Rule 68    relational_operator -> DISTINT
Rule 69    relational_operator -> LESS
Rule 70    relational_operator -> GREATER
Rule 71    sign -> PLUS
Rule 72    sign -> MINUS
Rule 73    sign -> empty
Rule 74    adding_operator -> PLUS
Rule 75    adding_operator -> MINUS
Rule 76    adding_operator -> OR
Rule 77    multiplying_operator -> TIMES
Rule 78    multiplying_operator -> DIV
Rule 79    multiplying_operator -> AND
Rule 80    variable -> entire_variable
Rule 81    variable -> indexed_variable
Rule 82    indexed_variable -> array_variable LBRACKET expression RBRACKET
Rule 83    array_variable -> entire_variable
Rule 84    entire_variable -> variable_identifier
Rule 85    variable_identifier -> ID
Rule 86    empty -> <empty>

Terminals, with rules where they appear

ABS                  : 
AMPERSANT            : 
AND                  : 79
ARCTAN               : 
ARRAY                : 13
BEGIN                : 24
BOOLEAN              : 
CASE                 : 
CHAR                 : 17
CHR                  : 
CLOSECOMMENT         : 
CLOSECOMMENT2        : 
COLON                : 6 22 37
COMMA                : 7 43 48
COMMENT              : 
CONST                : 5
COS                  : 
DISPOSE              : 
DISTINT              : 68
DIV                  : 78
DIVIDE               : 
DO                   : 54
DOT                  : 14 14 24
DOWNTO               : 
ELSE                 : 53
END                  : 24
EOF                  : 
EOLN                 : 
EQUAL                : 9 10 37 67
EXP                  : 
FALSE                : 
FILE                 : 
FOR                  : 
FUNCTION             : 22
GET                  : 
GOTO                 : 
GREATER              : 70
HASHTAG              : 
ID                   : 1 6 7 9 10 21 22 39 85
IF                   : 52 53
IN                   : 
INPUT                : 
INTEGER              : 16
LABEL                : 
LBRACKET             : 13 82
LESS                 : 69
LN                   : 
LPAREN               : 22 40 44 52 53 65
MAXINT               : 
MINUS                : 72 75
MOD                  : 
NEW                  : 
NIL                  : 
NOT                  : 66
NUMBER               : 9 14 14 64
ODD                  : 
OF                   : 13
OPENCOMMENT          : 
OPENCOMMENT2         : 
OR                   : 76
ORD                  : 
OUTPUT               : 
PACK                 : 
PACKED               : 
PAGE                 : 
PLUS                 : 71 74
PRED                 : 
PROCEDURE            : 21
PROGRAM              : 1
PUT                  : 
RBRACKET             : 13 82
READ                 : 40
READLN               : 
REAL                 : 
RECORD               : 
REPEAT               : 
RESET                : 
REWRITE              : 
ROUND                : 
RPAREN               : 22 40 44 52 53 65
SEMICOLON            : 1 4 5 21 22 31 37 40 44
SET                  : 
SIMPLE               : 
SIN                  : 
SQR                  : 
SQRT                 : 
STRING               : 10 46
SUCC                 : 
TEXT                 : 
THEN                 : 52 53
TIMES                : 77
TO                   : 
TRUE                 : 
TRUNC                : 
TYPE                 : 
UNPACK               : 
UNTIL                : 
VAR                  : 4
WHILE                : 54
WITH                 : 
WRITE                : 44
WRITELN              : 
error                : 

Nonterminals, with rules where they appear

adding_operator      : 58
array_type           : 12
array_variable       : 82
assignment_statement : 33
block                : 1 21
compound_statement   : 23 26 49
compound_statement2  : 24
const_declaration    : 5
empty                : 3 8 18 25 32 42 47 59 62 73
entire_variable      : 80 83
expression           : 37 45 48 52 53 54 65 82
factor               : 60 61 66
function_declaration : 20
if_statement         : 50
index_range          : 13
indexed_variable     : 81
input_variable       : 40
input_variable2      : 40
multiplying_operator : 61
output_value         : 44
output_value2        : 44
procedure_declaration : 19
procedure_declaration_part : 2
procedure_identifier : 38
procedure_statement  : 34
program              : 0
read_statement       : 35
relational_operator  : 56
sign                 : 57
simple_expression    : 55 56 56
simple_expression2   : 57
simple_statement     : 27 28
simple_type          : 11 13
statement            : 24 28 29 31 52 53 53 54
statement3           : 
statement_part       : 2
structured_statement : 29 30
term                 : 57 58
term2                : 60
type                 : 6 22
type_identifier      : 15
variable             : 37 41 43 63
variable_declaration : 4 22
variable_declaration2 : 6 7
variable_declaration_part : 2 4 5 22
variable_identifier  : 84
while_statement      : 51
write_statement      : 36

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON block

    PROGRAM         shift and go to state 1

    program                        shift and go to state 2

state 1

    (1) program -> PROGRAM . ID SEMICOLON block

    ID              shift and go to state 3


state 2

    (0) S' -> program .



state 3

    (1) program -> PROGRAM ID . SEMICOLON block

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . block
    (2) block -> . variable_declaration_part procedure_declaration_part statement_part
    (3) variable_declaration_part -> . empty
    (4) variable_declaration_part -> . VAR variable_declaration SEMICOLON variable_declaration_part
    (5) variable_declaration_part -> . CONST const_declaration SEMICOLON variable_declaration_part
    (86) empty -> .

    VAR             shift and go to state 7
    CONST           shift and go to state 5
    PROCEDURE       reduce using rule 86 (empty -> .)
    FUNCTION        reduce using rule 86 (empty -> .)
    BEGIN           reduce using rule 86 (empty -> .)

    variable_declaration_part      shift and go to state 6
    block                          shift and go to state 9
    empty                          shift and go to state 8

state 5

    (5) variable_declaration_part -> CONST . const_declaration SEMICOLON variable_declaration_part
    (9) const_declaration -> . ID EQUAL NUMBER
    (10) const_declaration -> . ID EQUAL STRING

    ID              shift and go to state 11

    const_declaration              shift and go to state 10

state 6

    (2) block -> variable_declaration_part . procedure_declaration_part statement_part
    (18) procedure_declaration_part -> . empty
    (19) procedure_declaration_part -> . procedure_declaration
    (20) procedure_declaration_part -> . function_declaration
    (86) empty -> .
    (21) procedure_declaration -> . PROCEDURE ID SEMICOLON block
    (22) function_declaration -> . FUNCTION ID LPAREN variable_declaration RPAREN COLON type SEMICOLON variable_declaration_part

    BEGIN           reduce using rule 86 (empty -> .)
    PROCEDURE       shift and go to state 15
    FUNCTION        shift and go to state 12

    function_declaration           shift and go to state 13
    procedure_declaration          shift and go to state 14
    procedure_declaration_part     shift and go to state 16
    empty                          shift and go to state 17

state 7

    (4) variable_declaration_part -> VAR . variable_declaration SEMICOLON variable_declaration_part
    (6) variable_declaration -> . ID variable_declaration2 COLON type

    ID              shift and go to state 18

    variable_declaration           shift and go to state 19

state 8

    (3) variable_declaration_part -> empty .

    PROCEDURE       reduce using rule 3 (variable_declaration_part -> empty .)
    FUNCTION        reduce using rule 3 (variable_declaration_part -> empty .)
    BEGIN           reduce using rule 3 (variable_declaration_part -> empty .)


state 9

    (1) program -> PROGRAM ID SEMICOLON block .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON block .)


state 10

    (5) variable_declaration_part -> CONST const_declaration . SEMICOLON variable_declaration_part

    SEMICOLON       shift and go to state 20


state 11

    (9) const_declaration -> ID . EQUAL NUMBER
    (10) const_declaration -> ID . EQUAL STRING

    EQUAL           shift and go to state 21


state 12

    (22) function_declaration -> FUNCTION . ID LPAREN variable_declaration RPAREN COLON type SEMICOLON variable_declaration_part

    ID              shift and go to state 22


state 13

    (20) procedure_declaration_part -> function_declaration .

    BEGIN           reduce using rule 20 (procedure_declaration_part -> function_declaration .)


state 14

    (19) procedure_declaration_part -> procedure_declaration .

    BEGIN           reduce using rule 19 (procedure_declaration_part -> procedure_declaration .)


state 15

    (21) procedure_declaration -> PROCEDURE . ID SEMICOLON block

    ID              shift and go to state 23


state 16

    (2) block -> variable_declaration_part procedure_declaration_part . statement_part
    (23) statement_part -> . compound_statement
    (24) compound_statement -> . BEGIN statement END DOT compound_statement2

    BEGIN           shift and go to state 24

    compound_statement             shift and go to state 25
    statement_part                 shift and go to state 26

state 17

    (18) procedure_declaration_part -> empty .

    BEGIN           reduce using rule 18 (procedure_declaration_part -> empty .)


state 18

    (6) variable_declaration -> ID . variable_declaration2 COLON type
    (7) variable_declaration2 -> . COMMA ID variable_declaration2
    (8) variable_declaration2 -> . empty
    (86) empty -> .

    COMMA           shift and go to state 27
    COLON           reduce using rule 86 (empty -> .)

    variable_declaration2          shift and go to state 28
    empty                          shift and go to state 29

state 19

    (4) variable_declaration_part -> VAR variable_declaration . SEMICOLON variable_declaration_part

    SEMICOLON       shift and go to state 30


state 20

    (5) variable_declaration_part -> CONST const_declaration SEMICOLON . variable_declaration_part
    (3) variable_declaration_part -> . empty
    (4) variable_declaration_part -> . VAR variable_declaration SEMICOLON variable_declaration_part
    (5) variable_declaration_part -> . CONST const_declaration SEMICOLON variable_declaration_part
    (86) empty -> .

    VAR             shift and go to state 7
    CONST           shift and go to state 5
    PROCEDURE       reduce using rule 86 (empty -> .)
    FUNCTION        reduce using rule 86 (empty -> .)
    BEGIN           reduce using rule 86 (empty -> .)

    variable_declaration_part      shift and go to state 31
    empty                          shift and go to state 8

state 21

    (9) const_declaration -> ID EQUAL . NUMBER
    (10) const_declaration -> ID EQUAL . STRING

    NUMBER          shift and go to state 32
    STRING          shift and go to state 33


state 22

    (22) function_declaration -> FUNCTION ID . LPAREN variable_declaration RPAREN COLON type SEMICOLON variable_declaration_part

    LPAREN          shift and go to state 34


state 23

    (21) procedure_declaration -> PROCEDURE ID . SEMICOLON block

    SEMICOLON       shift and go to state 35


state 24

    (24) compound_statement -> BEGIN . statement END DOT compound_statement2
    (27) statement -> . simple_statement
    (28) statement -> . statement simple_statement
    (29) statement -> . statement structured_statement
    (30) statement -> . structured_statement
    (33) simple_statement -> . assignment_statement
    (34) simple_statement -> . procedure_statement
    (35) simple_statement -> . read_statement
    (36) simple_statement -> . write_statement
    (49) structured_statement -> . compound_statement
    (50) structured_statement -> . if_statement
    (51) structured_statement -> . while_statement
    (37) assignment_statement -> . variable COLON EQUAL expression SEMICOLON
    (38) procedure_statement -> . procedure_identifier
    (40) read_statement -> . READ LPAREN input_variable input_variable2 RPAREN SEMICOLON
    (44) write_statement -> . WRITE LPAREN output_value output_value2 RPAREN SEMICOLON
    (24) compound_statement -> . BEGIN statement END DOT compound_statement2
    (52) if_statement -> . IF LPAREN expression RPAREN THEN statement
    (53) if_statement -> . IF LPAREN expression RPAREN THEN statement ELSE statement
    (54) while_statement -> . WHILE expression DO statement
    (80) variable -> . entire_variable
    (81) variable -> . indexed_variable
    (39) procedure_identifier -> . ID
    (84) entire_variable -> . variable_identifier
    (82) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (85) variable_identifier -> . ID
    (83) array_variable -> . entire_variable

    READ            shift and go to state 37
    WRITE           shift and go to state 51
    BEGIN           shift and go to state 24
    IF              shift and go to state 54
    WHILE           shift and go to state 39
    ID              shift and go to state 53

    indexed_variable               shift and go to state 36
    simple_statement               shift and go to state 38
    compound_statement             shift and go to state 41
    assignment_statement           shift and go to state 42
    procedure_statement            shift and go to state 43
    structured_statement           shift and go to state 44
    write_statement                shift and go to state 45
    entire_variable                shift and go to state 46
    while_statement                shift and go to state 47
    statement                      shift and go to state 48
    array_variable                 shift and go to state 40
    if_statement                   shift and go to state 50
    variable_identifier            shift and go to state 55
    variable                       shift and go to state 52
    read_statement                 shift and go to state 49
    procedure_identifier           shift and go to state 56

state 25

    (23) statement_part -> compound_statement .

    $end            reduce using rule 23 (statement_part -> compound_statement .)
    BEGIN           reduce using rule 23 (statement_part -> compound_statement .)


state 26

    (2) block -> variable_declaration_part procedure_declaration_part statement_part .

    BEGIN           reduce using rule 2 (block -> variable_declaration_part procedure_declaration_part statement_part .)
    $end            reduce using rule 2 (block -> variable_declaration_part procedure_declaration_part statement_part .)


state 27

    (7) variable_declaration2 -> COMMA . ID variable_declaration2

    ID              shift and go to state 57


state 28

    (6) variable_declaration -> ID variable_declaration2 . COLON type

    COLON           shift and go to state 58


state 29

    (8) variable_declaration2 -> empty .

    COLON           reduce using rule 8 (variable_declaration2 -> empty .)


state 30

    (4) variable_declaration_part -> VAR variable_declaration SEMICOLON . variable_declaration_part
    (3) variable_declaration_part -> . empty
    (4) variable_declaration_part -> . VAR variable_declaration SEMICOLON variable_declaration_part
    (5) variable_declaration_part -> . CONST const_declaration SEMICOLON variable_declaration_part
    (86) empty -> .

    VAR             shift and go to state 7
    CONST           shift and go to state 5
    PROCEDURE       reduce using rule 86 (empty -> .)
    FUNCTION        reduce using rule 86 (empty -> .)
    BEGIN           reduce using rule 86 (empty -> .)

    variable_declaration_part      shift and go to state 59
    empty                          shift and go to state 8

state 31

    (5) variable_declaration_part -> CONST const_declaration SEMICOLON variable_declaration_part .

    PROCEDURE       reduce using rule 5 (variable_declaration_part -> CONST const_declaration SEMICOLON variable_declaration_part .)
    FUNCTION        reduce using rule 5 (variable_declaration_part -> CONST const_declaration SEMICOLON variable_declaration_part .)
    BEGIN           reduce using rule 5 (variable_declaration_part -> CONST const_declaration SEMICOLON variable_declaration_part .)


state 32

    (9) const_declaration -> ID EQUAL NUMBER .

    SEMICOLON       reduce using rule 9 (const_declaration -> ID EQUAL NUMBER .)


state 33

    (10) const_declaration -> ID EQUAL STRING .

    SEMICOLON       reduce using rule 10 (const_declaration -> ID EQUAL STRING .)


state 34

    (22) function_declaration -> FUNCTION ID LPAREN . variable_declaration RPAREN COLON type SEMICOLON variable_declaration_part
    (6) variable_declaration -> . ID variable_declaration2 COLON type

    ID              shift and go to state 18

    variable_declaration           shift and go to state 60

state 35

    (21) procedure_declaration -> PROCEDURE ID SEMICOLON . block
    (2) block -> . variable_declaration_part procedure_declaration_part statement_part
    (3) variable_declaration_part -> . empty
    (4) variable_declaration_part -> . VAR variable_declaration SEMICOLON variable_declaration_part
    (5) variable_declaration_part -> . CONST const_declaration SEMICOLON variable_declaration_part
    (86) empty -> .

    VAR             shift and go to state 7
    CONST           shift and go to state 5
    PROCEDURE       reduce using rule 86 (empty -> .)
    FUNCTION        reduce using rule 86 (empty -> .)
    BEGIN           reduce using rule 86 (empty -> .)

    variable_declaration_part      shift and go to state 6
    block                          shift and go to state 61
    empty                          shift and go to state 8

state 36

    (81) variable -> indexed_variable .

    TIMES           reduce using rule 81 (variable -> indexed_variable .)
    DIV             reduce using rule 81 (variable -> indexed_variable .)
    AND             reduce using rule 81 (variable -> indexed_variable .)
    PLUS            reduce using rule 81 (variable -> indexed_variable .)
    MINUS           reduce using rule 81 (variable -> indexed_variable .)
    OR              reduce using rule 81 (variable -> indexed_variable .)
    EQUAL           reduce using rule 81 (variable -> indexed_variable .)
    DISTINT         reduce using rule 81 (variable -> indexed_variable .)
    LESS            reduce using rule 81 (variable -> indexed_variable .)
    GREATER         reduce using rule 81 (variable -> indexed_variable .)
    DO              reduce using rule 81 (variable -> indexed_variable .)
    RBRACKET        reduce using rule 81 (variable -> indexed_variable .)
    COMMA           reduce using rule 81 (variable -> indexed_variable .)
    RPAREN          reduce using rule 81 (variable -> indexed_variable .)
    SEMICOLON       reduce using rule 81 (variable -> indexed_variable .)
    COLON           reduce using rule 81 (variable -> indexed_variable .)


state 37

    (40) read_statement -> READ . LPAREN input_variable input_variable2 RPAREN SEMICOLON

    LPAREN          shift and go to state 62


state 38

    (27) statement -> simple_statement .

    READ            reduce using rule 27 (statement -> simple_statement .)
    WRITE           reduce using rule 27 (statement -> simple_statement .)
    BEGIN           reduce using rule 27 (statement -> simple_statement .)
    IF              reduce using rule 27 (statement -> simple_statement .)
    WHILE           reduce using rule 27 (statement -> simple_statement .)
    ID              reduce using rule 27 (statement -> simple_statement .)
    END             reduce using rule 27 (statement -> simple_statement .)
    ELSE            reduce using rule 27 (statement -> simple_statement .)


state 39

    (54) while_statement -> WHILE . expression DO statement
    (55) expression -> . simple_expression
    (56) expression -> . simple_expression relational_operator simple_expression
    (57) simple_expression -> . sign term simple_expression2
    (71) sign -> . PLUS
    (72) sign -> . MINUS
    (73) sign -> . empty
    (86) empty -> .

    PLUS            shift and go to state 64
    MINUS           shift and go to state 67
    NUMBER          reduce using rule 86 (empty -> .)
    LPAREN          reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)

    sign                           shift and go to state 63
    simple_expression              shift and go to state 65
    expression                     shift and go to state 66
    empty                          shift and go to state 68

state 40

    (82) indexed_variable -> array_variable . LBRACKET expression RBRACKET

    LBRACKET        shift and go to state 69


state 41

    (49) structured_statement -> compound_statement .

    READ            reduce using rule 49 (structured_statement -> compound_statement .)
    WRITE           reduce using rule 49 (structured_statement -> compound_statement .)
    BEGIN           reduce using rule 49 (structured_statement -> compound_statement .)
    IF              reduce using rule 49 (structured_statement -> compound_statement .)
    WHILE           reduce using rule 49 (structured_statement -> compound_statement .)
    ID              reduce using rule 49 (structured_statement -> compound_statement .)
    END             reduce using rule 49 (structured_statement -> compound_statement .)
    ELSE            reduce using rule 49 (structured_statement -> compound_statement .)


state 42

    (33) simple_statement -> assignment_statement .

    END             reduce using rule 33 (simple_statement -> assignment_statement .)
    READ            reduce using rule 33 (simple_statement -> assignment_statement .)
    WRITE           reduce using rule 33 (simple_statement -> assignment_statement .)
    BEGIN           reduce using rule 33 (simple_statement -> assignment_statement .)
    IF              reduce using rule 33 (simple_statement -> assignment_statement .)
    WHILE           reduce using rule 33 (simple_statement -> assignment_statement .)
    ID              reduce using rule 33 (simple_statement -> assignment_statement .)
    ELSE            reduce using rule 33 (simple_statement -> assignment_statement .)


state 43

    (34) simple_statement -> procedure_statement .

    END             reduce using rule 34 (simple_statement -> procedure_statement .)
    READ            reduce using rule 34 (simple_statement -> procedure_statement .)
    WRITE           reduce using rule 34 (simple_statement -> procedure_statement .)
    BEGIN           reduce using rule 34 (simple_statement -> procedure_statement .)
    IF              reduce using rule 34 (simple_statement -> procedure_statement .)
    WHILE           reduce using rule 34 (simple_statement -> procedure_statement .)
    ID              reduce using rule 34 (simple_statement -> procedure_statement .)
    ELSE            reduce using rule 34 (simple_statement -> procedure_statement .)


state 44

    (30) statement -> structured_statement .

    READ            reduce using rule 30 (statement -> structured_statement .)
    WRITE           reduce using rule 30 (statement -> structured_statement .)
    BEGIN           reduce using rule 30 (statement -> structured_statement .)
    IF              reduce using rule 30 (statement -> structured_statement .)
    WHILE           reduce using rule 30 (statement -> structured_statement .)
    ID              reduce using rule 30 (statement -> structured_statement .)
    END             reduce using rule 30 (statement -> structured_statement .)
    ELSE            reduce using rule 30 (statement -> structured_statement .)


state 45

    (36) simple_statement -> write_statement .

    END             reduce using rule 36 (simple_statement -> write_statement .)
    READ            reduce using rule 36 (simple_statement -> write_statement .)
    WRITE           reduce using rule 36 (simple_statement -> write_statement .)
    BEGIN           reduce using rule 36 (simple_statement -> write_statement .)
    IF              reduce using rule 36 (simple_statement -> write_statement .)
    WHILE           reduce using rule 36 (simple_statement -> write_statement .)
    ID              reduce using rule 36 (simple_statement -> write_statement .)
    ELSE            reduce using rule 36 (simple_statement -> write_statement .)


state 46

    (80) variable -> entire_variable .
    (83) array_variable -> entire_variable .

    TIMES           reduce using rule 80 (variable -> entire_variable .)
    DIV             reduce using rule 80 (variable -> entire_variable .)
    AND             reduce using rule 80 (variable -> entire_variable .)
    PLUS            reduce using rule 80 (variable -> entire_variable .)
    MINUS           reduce using rule 80 (variable -> entire_variable .)
    OR              reduce using rule 80 (variable -> entire_variable .)
    EQUAL           reduce using rule 80 (variable -> entire_variable .)
    DISTINT         reduce using rule 80 (variable -> entire_variable .)
    LESS            reduce using rule 80 (variable -> entire_variable .)
    GREATER         reduce using rule 80 (variable -> entire_variable .)
    DO              reduce using rule 80 (variable -> entire_variable .)
    RBRACKET        reduce using rule 80 (variable -> entire_variable .)
    COMMA           reduce using rule 80 (variable -> entire_variable .)
    RPAREN          reduce using rule 80 (variable -> entire_variable .)
    SEMICOLON       reduce using rule 80 (variable -> entire_variable .)
    COLON           reduce using rule 80 (variable -> entire_variable .)
    LBRACKET        reduce using rule 83 (array_variable -> entire_variable .)


state 47

    (51) structured_statement -> while_statement .

    READ            reduce using rule 51 (structured_statement -> while_statement .)
    WRITE           reduce using rule 51 (structured_statement -> while_statement .)
    BEGIN           reduce using rule 51 (structured_statement -> while_statement .)
    IF              reduce using rule 51 (structured_statement -> while_statement .)
    WHILE           reduce using rule 51 (structured_statement -> while_statement .)
    ID              reduce using rule 51 (structured_statement -> while_statement .)
    END             reduce using rule 51 (structured_statement -> while_statement .)
    ELSE            reduce using rule 51 (structured_statement -> while_statement .)


state 48

    (24) compound_statement -> BEGIN statement . END DOT compound_statement2
    (28) statement -> statement . simple_statement
    (29) statement -> statement . structured_statement
    (33) simple_statement -> . assignment_statement
    (34) simple_statement -> . procedure_statement
    (35) simple_statement -> . read_statement
    (36) simple_statement -> . write_statement
    (49) structured_statement -> . compound_statement
    (50) structured_statement -> . if_statement
    (51) structured_statement -> . while_statement
    (37) assignment_statement -> . variable COLON EQUAL expression SEMICOLON
    (38) procedure_statement -> . procedure_identifier
    (40) read_statement -> . READ LPAREN input_variable input_variable2 RPAREN SEMICOLON
    (44) write_statement -> . WRITE LPAREN output_value output_value2 RPAREN SEMICOLON
    (24) compound_statement -> . BEGIN statement END DOT compound_statement2
    (52) if_statement -> . IF LPAREN expression RPAREN THEN statement
    (53) if_statement -> . IF LPAREN expression RPAREN THEN statement ELSE statement
    (54) while_statement -> . WHILE expression DO statement
    (80) variable -> . entire_variable
    (81) variable -> . indexed_variable
    (39) procedure_identifier -> . ID
    (84) entire_variable -> . variable_identifier
    (82) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (85) variable_identifier -> . ID
    (83) array_variable -> . entire_variable

    END             shift and go to state 72
    READ            shift and go to state 37
    WRITE           shift and go to state 51
    BEGIN           shift and go to state 24
    IF              shift and go to state 54
    WHILE           shift and go to state 39
    ID              shift and go to state 53

    indexed_variable               shift and go to state 36
    simple_statement               shift and go to state 70
    compound_statement             shift and go to state 41
    assignment_statement           shift and go to state 42
    procedure_statement            shift and go to state 43
    structured_statement           shift and go to state 71
    write_statement                shift and go to state 45
    entire_variable                shift and go to state 46
    while_statement                shift and go to state 47
    array_variable                 shift and go to state 40
    if_statement                   shift and go to state 50
    variable_identifier            shift and go to state 55
    variable                       shift and go to state 52
    read_statement                 shift and go to state 49
    procedure_identifier           shift and go to state 56

state 49

    (35) simple_statement -> read_statement .

    END             reduce using rule 35 (simple_statement -> read_statement .)
    READ            reduce using rule 35 (simple_statement -> read_statement .)
    WRITE           reduce using rule 35 (simple_statement -> read_statement .)
    BEGIN           reduce using rule 35 (simple_statement -> read_statement .)
    IF              reduce using rule 35 (simple_statement -> read_statement .)
    WHILE           reduce using rule 35 (simple_statement -> read_statement .)
    ID              reduce using rule 35 (simple_statement -> read_statement .)
    ELSE            reduce using rule 35 (simple_statement -> read_statement .)


state 50

    (50) structured_statement -> if_statement .

    READ            reduce using rule 50 (structured_statement -> if_statement .)
    WRITE           reduce using rule 50 (structured_statement -> if_statement .)
    BEGIN           reduce using rule 50 (structured_statement -> if_statement .)
    IF              reduce using rule 50 (structured_statement -> if_statement .)
    WHILE           reduce using rule 50 (structured_statement -> if_statement .)
    ID              reduce using rule 50 (structured_statement -> if_statement .)
    END             reduce using rule 50 (structured_statement -> if_statement .)
    ELSE            reduce using rule 50 (structured_statement -> if_statement .)


state 51

    (44) write_statement -> WRITE . LPAREN output_value output_value2 RPAREN SEMICOLON

    LPAREN          shift and go to state 73


state 52

    (37) assignment_statement -> variable . COLON EQUAL expression SEMICOLON

    COLON           shift and go to state 74


state 53

    (39) procedure_identifier -> ID .
    (85) variable_identifier -> ID .

    READ            reduce using rule 39 (procedure_identifier -> ID .)
    WRITE           reduce using rule 39 (procedure_identifier -> ID .)
    BEGIN           reduce using rule 39 (procedure_identifier -> ID .)
    IF              reduce using rule 39 (procedure_identifier -> ID .)
    WHILE           reduce using rule 39 (procedure_identifier -> ID .)
    ID              reduce using rule 39 (procedure_identifier -> ID .)
    END             reduce using rule 39 (procedure_identifier -> ID .)
    ELSE            reduce using rule 39 (procedure_identifier -> ID .)
    COLON           reduce using rule 85 (variable_identifier -> ID .)
    LBRACKET        reduce using rule 85 (variable_identifier -> ID .)


state 54

    (52) if_statement -> IF . LPAREN expression RPAREN THEN statement
    (53) if_statement -> IF . LPAREN expression RPAREN THEN statement ELSE statement

    LPAREN          shift and go to state 75


state 55

    (84) entire_variable -> variable_identifier .

    COLON           reduce using rule 84 (entire_variable -> variable_identifier .)
    LBRACKET        reduce using rule 84 (entire_variable -> variable_identifier .)
    COMMA           reduce using rule 84 (entire_variable -> variable_identifier .)
    RPAREN          reduce using rule 84 (entire_variable -> variable_identifier .)
    TIMES           reduce using rule 84 (entire_variable -> variable_identifier .)
    DIV             reduce using rule 84 (entire_variable -> variable_identifier .)
    AND             reduce using rule 84 (entire_variable -> variable_identifier .)
    PLUS            reduce using rule 84 (entire_variable -> variable_identifier .)
    MINUS           reduce using rule 84 (entire_variable -> variable_identifier .)
    OR              reduce using rule 84 (entire_variable -> variable_identifier .)
    EQUAL           reduce using rule 84 (entire_variable -> variable_identifier .)
    DISTINT         reduce using rule 84 (entire_variable -> variable_identifier .)
    LESS            reduce using rule 84 (entire_variable -> variable_identifier .)
    GREATER         reduce using rule 84 (entire_variable -> variable_identifier .)
    DO              reduce using rule 84 (entire_variable -> variable_identifier .)
    RBRACKET        reduce using rule 84 (entire_variable -> variable_identifier .)
    SEMICOLON       reduce using rule 84 (entire_variable -> variable_identifier .)


state 56

    (38) procedure_statement -> procedure_identifier .

    END             reduce using rule 38 (procedure_statement -> procedure_identifier .)
    READ            reduce using rule 38 (procedure_statement -> procedure_identifier .)
    WRITE           reduce using rule 38 (procedure_statement -> procedure_identifier .)
    BEGIN           reduce using rule 38 (procedure_statement -> procedure_identifier .)
    IF              reduce using rule 38 (procedure_statement -> procedure_identifier .)
    WHILE           reduce using rule 38 (procedure_statement -> procedure_identifier .)
    ID              reduce using rule 38 (procedure_statement -> procedure_identifier .)
    ELSE            reduce using rule 38 (procedure_statement -> procedure_identifier .)


state 57

    (7) variable_declaration2 -> COMMA ID . variable_declaration2
    (7) variable_declaration2 -> . COMMA ID variable_declaration2
    (8) variable_declaration2 -> . empty
    (86) empty -> .

    COMMA           shift and go to state 27
    COLON           reduce using rule 86 (empty -> .)

    variable_declaration2          shift and go to state 76
    empty                          shift and go to state 29

state 58

    (6) variable_declaration -> ID variable_declaration2 COLON . type
    (11) type -> . simple_type
    (12) type -> . array_type
    (15) simple_type -> . type_identifier
    (13) array_type -> . ARRAY LBRACKET index_range RBRACKET OF simple_type
    (16) type_identifier -> . INTEGER
    (17) type_identifier -> . CHAR

    ARRAY           shift and go to state 82
    INTEGER         shift and go to state 81
    CHAR            shift and go to state 83

    type_identifier                shift and go to state 77
    simple_type                    shift and go to state 78
    array_type                     shift and go to state 80
    type                           shift and go to state 79

state 59

    (4) variable_declaration_part -> VAR variable_declaration SEMICOLON variable_declaration_part .

    PROCEDURE       reduce using rule 4 (variable_declaration_part -> VAR variable_declaration SEMICOLON variable_declaration_part .)
    FUNCTION        reduce using rule 4 (variable_declaration_part -> VAR variable_declaration SEMICOLON variable_declaration_part .)
    BEGIN           reduce using rule 4 (variable_declaration_part -> VAR variable_declaration SEMICOLON variable_declaration_part .)


state 60

    (22) function_declaration -> FUNCTION ID LPAREN variable_declaration . RPAREN COLON type SEMICOLON variable_declaration_part

    RPAREN          shift and go to state 84


state 61

    (21) procedure_declaration -> PROCEDURE ID SEMICOLON block .

    BEGIN           reduce using rule 21 (procedure_declaration -> PROCEDURE ID SEMICOLON block .)


state 62

    (40) read_statement -> READ LPAREN . input_variable input_variable2 RPAREN SEMICOLON
    (41) input_variable -> . variable
    (80) variable -> . entire_variable
    (81) variable -> . indexed_variable
    (84) entire_variable -> . variable_identifier
    (82) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (85) variable_identifier -> . ID
    (83) array_variable -> . entire_variable

    ID              shift and go to state 85

    indexed_variable               shift and go to state 36
    variable_identifier            shift and go to state 55
    entire_variable                shift and go to state 46
    variable                       shift and go to state 86
    array_variable                 shift and go to state 40
    input_variable                 shift and go to state 87

state 63

    (57) simple_expression -> sign . term simple_expression2
    (60) term -> . factor term2
    (63) factor -> . variable
    (64) factor -> . NUMBER
    (65) factor -> . LPAREN expression RPAREN
    (66) factor -> . NOT factor
    (80) variable -> . entire_variable
    (81) variable -> . indexed_variable
    (84) entire_variable -> . variable_identifier
    (82) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (85) variable_identifier -> . ID
    (83) array_variable -> . entire_variable

    NUMBER          shift and go to state 89
    LPAREN          shift and go to state 91
    NOT             shift and go to state 90
    ID              shift and go to state 85

    term                           shift and go to state 88
    indexed_variable               shift and go to state 36
    variable_identifier            shift and go to state 55
    entire_variable                shift and go to state 46
    factor                         shift and go to state 92
    variable                       shift and go to state 93
    array_variable                 shift and go to state 40

state 64

    (71) sign -> PLUS .

    NUMBER          reduce using rule 71 (sign -> PLUS .)
    LPAREN          reduce using rule 71 (sign -> PLUS .)
    NOT             reduce using rule 71 (sign -> PLUS .)
    ID              reduce using rule 71 (sign -> PLUS .)


state 65

    (55) expression -> simple_expression .
    (56) expression -> simple_expression . relational_operator simple_expression
    (67) relational_operator -> . EQUAL
    (68) relational_operator -> . DISTINT
    (69) relational_operator -> . LESS
    (70) relational_operator -> . GREATER

    RPAREN          reduce using rule 55 (expression -> simple_expression .)
    SEMICOLON       reduce using rule 55 (expression -> simple_expression .)
    RBRACKET        reduce using rule 55 (expression -> simple_expression .)
    DO              reduce using rule 55 (expression -> simple_expression .)
    COMMA           reduce using rule 55 (expression -> simple_expression .)
    EQUAL           shift and go to state 97
    DISTINT         shift and go to state 96
    LESS            shift and go to state 95
    GREATER         shift and go to state 98

    relational_operator            shift and go to state 94

state 66

    (54) while_statement -> WHILE expression . DO statement

    DO              shift and go to state 99


state 67

    (72) sign -> MINUS .

    NUMBER          reduce using rule 72 (sign -> MINUS .)
    LPAREN          reduce using rule 72 (sign -> MINUS .)
    NOT             reduce using rule 72 (sign -> MINUS .)
    ID              reduce using rule 72 (sign -> MINUS .)


state 68

    (73) sign -> empty .

    NUMBER          reduce using rule 73 (sign -> empty .)
    LPAREN          reduce using rule 73 (sign -> empty .)
    NOT             reduce using rule 73 (sign -> empty .)
    ID              reduce using rule 73 (sign -> empty .)


state 69

    (82) indexed_variable -> array_variable LBRACKET . expression RBRACKET
    (55) expression -> . simple_expression
    (56) expression -> . simple_expression relational_operator simple_expression
    (57) simple_expression -> . sign term simple_expression2
    (71) sign -> . PLUS
    (72) sign -> . MINUS
    (73) sign -> . empty
    (86) empty -> .

    PLUS            shift and go to state 64
    MINUS           shift and go to state 67
    NUMBER          reduce using rule 86 (empty -> .)
    LPAREN          reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)

    sign                           shift and go to state 63
    simple_expression              shift and go to state 65
    expression                     shift and go to state 100
    empty                          shift and go to state 68

state 70

    (28) statement -> statement simple_statement .

    READ            reduce using rule 28 (statement -> statement simple_statement .)
    WRITE           reduce using rule 28 (statement -> statement simple_statement .)
    BEGIN           reduce using rule 28 (statement -> statement simple_statement .)
    IF              reduce using rule 28 (statement -> statement simple_statement .)
    WHILE           reduce using rule 28 (statement -> statement simple_statement .)
    ID              reduce using rule 28 (statement -> statement simple_statement .)
    END             reduce using rule 28 (statement -> statement simple_statement .)
    ELSE            reduce using rule 28 (statement -> statement simple_statement .)


state 71

    (29) statement -> statement structured_statement .

    READ            reduce using rule 29 (statement -> statement structured_statement .)
    WRITE           reduce using rule 29 (statement -> statement structured_statement .)
    BEGIN           reduce using rule 29 (statement -> statement structured_statement .)
    IF              reduce using rule 29 (statement -> statement structured_statement .)
    WHILE           reduce using rule 29 (statement -> statement structured_statement .)
    ID              reduce using rule 29 (statement -> statement structured_statement .)
    END             reduce using rule 29 (statement -> statement structured_statement .)
    ELSE            reduce using rule 29 (statement -> statement structured_statement .)


state 72

    (24) compound_statement -> BEGIN statement END . DOT compound_statement2

    DOT             shift and go to state 101


state 73

    (44) write_statement -> WRITE LPAREN . output_value output_value2 RPAREN SEMICOLON
    (45) output_value -> . expression
    (46) output_value -> . STRING
    (55) expression -> . simple_expression
    (56) expression -> . simple_expression relational_operator simple_expression
    (57) simple_expression -> . sign term simple_expression2
    (71) sign -> . PLUS
    (72) sign -> . MINUS
    (73) sign -> . empty
    (86) empty -> .

    STRING          shift and go to state 102
    PLUS            shift and go to state 64
    MINUS           shift and go to state 67
    NUMBER          reduce using rule 86 (empty -> .)
    LPAREN          reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)

    sign                           shift and go to state 63
    output_value                   shift and go to state 103
    simple_expression              shift and go to state 65
    expression                     shift and go to state 104
    empty                          shift and go to state 68

state 74

    (37) assignment_statement -> variable COLON . EQUAL expression SEMICOLON

    EQUAL           shift and go to state 105


state 75

    (52) if_statement -> IF LPAREN . expression RPAREN THEN statement
    (53) if_statement -> IF LPAREN . expression RPAREN THEN statement ELSE statement
    (55) expression -> . simple_expression
    (56) expression -> . simple_expression relational_operator simple_expression
    (57) simple_expression -> . sign term simple_expression2
    (71) sign -> . PLUS
    (72) sign -> . MINUS
    (73) sign -> . empty
    (86) empty -> .

    PLUS            shift and go to state 64
    MINUS           shift and go to state 67
    NUMBER          reduce using rule 86 (empty -> .)
    LPAREN          reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)

    sign                           shift and go to state 63
    simple_expression              shift and go to state 65
    expression                     shift and go to state 106
    empty                          shift and go to state 68

state 76

    (7) variable_declaration2 -> COMMA ID variable_declaration2 .

    COLON           reduce using rule 7 (variable_declaration2 -> COMMA ID variable_declaration2 .)


state 77

    (15) simple_type -> type_identifier .

    SEMICOLON       reduce using rule 15 (simple_type -> type_identifier .)
    RPAREN          reduce using rule 15 (simple_type -> type_identifier .)


state 78

    (11) type -> simple_type .

    SEMICOLON       reduce using rule 11 (type -> simple_type .)
    RPAREN          reduce using rule 11 (type -> simple_type .)


state 79

    (6) variable_declaration -> ID variable_declaration2 COLON type .

    SEMICOLON       reduce using rule 6 (variable_declaration -> ID variable_declaration2 COLON type .)
    RPAREN          reduce using rule 6 (variable_declaration -> ID variable_declaration2 COLON type .)


state 80

    (12) type -> array_type .

    SEMICOLON       reduce using rule 12 (type -> array_type .)
    RPAREN          reduce using rule 12 (type -> array_type .)


state 81

    (16) type_identifier -> INTEGER .

    SEMICOLON       reduce using rule 16 (type_identifier -> INTEGER .)
    RPAREN          reduce using rule 16 (type_identifier -> INTEGER .)


state 82

    (13) array_type -> ARRAY . LBRACKET index_range RBRACKET OF simple_type

    LBRACKET        shift and go to state 107


state 83

    (17) type_identifier -> CHAR .

    SEMICOLON       reduce using rule 17 (type_identifier -> CHAR .)
    RPAREN          reduce using rule 17 (type_identifier -> CHAR .)


state 84

    (22) function_declaration -> FUNCTION ID LPAREN variable_declaration RPAREN . COLON type SEMICOLON variable_declaration_part

    COLON           shift and go to state 108


state 85

    (85) variable_identifier -> ID .

    COMMA           reduce using rule 85 (variable_identifier -> ID .)
    RPAREN          reduce using rule 85 (variable_identifier -> ID .)
    LBRACKET        reduce using rule 85 (variable_identifier -> ID .)
    TIMES           reduce using rule 85 (variable_identifier -> ID .)
    DIV             reduce using rule 85 (variable_identifier -> ID .)
    AND             reduce using rule 85 (variable_identifier -> ID .)
    EQUAL           reduce using rule 85 (variable_identifier -> ID .)
    DISTINT         reduce using rule 85 (variable_identifier -> ID .)
    LESS            reduce using rule 85 (variable_identifier -> ID .)
    GREATER         reduce using rule 85 (variable_identifier -> ID .)
    DO              reduce using rule 85 (variable_identifier -> ID .)
    RBRACKET        reduce using rule 85 (variable_identifier -> ID .)
    SEMICOLON       reduce using rule 85 (variable_identifier -> ID .)
    PLUS            reduce using rule 85 (variable_identifier -> ID .)
    MINUS           reduce using rule 85 (variable_identifier -> ID .)
    OR              reduce using rule 85 (variable_identifier -> ID .)


state 86

    (41) input_variable -> variable .

    COMMA           reduce using rule 41 (input_variable -> variable .)
    RPAREN          reduce using rule 41 (input_variable -> variable .)


state 87

    (40) read_statement -> READ LPAREN input_variable . input_variable2 RPAREN SEMICOLON
    (42) input_variable2 -> . empty
    (43) input_variable2 -> . COMMA variable
    (86) empty -> .

    COMMA           shift and go to state 109
    RPAREN          reduce using rule 86 (empty -> .)

    input_variable2                shift and go to state 110
    empty                          shift and go to state 111

state 88

    (57) simple_expression -> sign term . simple_expression2
    (58) simple_expression2 -> . adding_operator term
    (59) simple_expression2 -> . empty
    (74) adding_operator -> . PLUS
    (75) adding_operator -> . MINUS
    (76) adding_operator -> . OR
    (86) empty -> .

    PLUS            shift and go to state 113
    MINUS           shift and go to state 115
    OR              shift and go to state 117
    EQUAL           reduce using rule 86 (empty -> .)
    DISTINT         reduce using rule 86 (empty -> .)
    LESS            reduce using rule 86 (empty -> .)
    GREATER         reduce using rule 86 (empty -> .)
    DO              reduce using rule 86 (empty -> .)
    RBRACKET        reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)

    simple_expression2             shift and go to state 112
    adding_operator                shift and go to state 114
    empty                          shift and go to state 116

state 89

    (64) factor -> NUMBER .

    PLUS            reduce using rule 64 (factor -> NUMBER .)
    MINUS           reduce using rule 64 (factor -> NUMBER .)
    OR              reduce using rule 64 (factor -> NUMBER .)
    EQUAL           reduce using rule 64 (factor -> NUMBER .)
    DISTINT         reduce using rule 64 (factor -> NUMBER .)
    LESS            reduce using rule 64 (factor -> NUMBER .)
    GREATER         reduce using rule 64 (factor -> NUMBER .)
    DO              reduce using rule 64 (factor -> NUMBER .)
    RBRACKET        reduce using rule 64 (factor -> NUMBER .)
    COMMA           reduce using rule 64 (factor -> NUMBER .)
    RPAREN          reduce using rule 64 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 64 (factor -> NUMBER .)
    TIMES           reduce using rule 64 (factor -> NUMBER .)
    DIV             reduce using rule 64 (factor -> NUMBER .)
    AND             reduce using rule 64 (factor -> NUMBER .)


state 90

    (66) factor -> NOT . factor
    (63) factor -> . variable
    (64) factor -> . NUMBER
    (65) factor -> . LPAREN expression RPAREN
    (66) factor -> . NOT factor
    (80) variable -> . entire_variable
    (81) variable -> . indexed_variable
    (84) entire_variable -> . variable_identifier
    (82) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (85) variable_identifier -> . ID
    (83) array_variable -> . entire_variable

    NUMBER          shift and go to state 89
    LPAREN          shift and go to state 91
    NOT             shift and go to state 90
    ID              shift and go to state 85

    indexed_variable               shift and go to state 36
    variable_identifier            shift and go to state 55
    entire_variable                shift and go to state 46
    factor                         shift and go to state 118
    variable                       shift and go to state 93
    array_variable                 shift and go to state 40

state 91

    (65) factor -> LPAREN . expression RPAREN
    (55) expression -> . simple_expression
    (56) expression -> . simple_expression relational_operator simple_expression
    (57) simple_expression -> . sign term simple_expression2
    (71) sign -> . PLUS
    (72) sign -> . MINUS
    (73) sign -> . empty
    (86) empty -> .

    PLUS            shift and go to state 64
    MINUS           shift and go to state 67
    NUMBER          reduce using rule 86 (empty -> .)
    LPAREN          reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)

    sign                           shift and go to state 63
    simple_expression              shift and go to state 65
    expression                     shift and go to state 119
    empty                          shift and go to state 68

state 92

    (60) term -> factor . term2
    (61) term2 -> . multiplying_operator factor
    (62) term2 -> . empty
    (77) multiplying_operator -> . TIMES
    (78) multiplying_operator -> . DIV
    (79) multiplying_operator -> . AND
    (86) empty -> .

    TIMES           shift and go to state 122
    DIV             shift and go to state 123
    AND             shift and go to state 120
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    EQUAL           reduce using rule 86 (empty -> .)
    DISTINT         reduce using rule 86 (empty -> .)
    LESS            reduce using rule 86 (empty -> .)
    GREATER         reduce using rule 86 (empty -> .)
    DO              reduce using rule 86 (empty -> .)
    RBRACKET        reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)

    multiplying_operator           shift and go to state 124
    term2                          shift and go to state 121
    empty                          shift and go to state 125

state 93

    (63) factor -> variable .

    PLUS            reduce using rule 63 (factor -> variable .)
    MINUS           reduce using rule 63 (factor -> variable .)
    OR              reduce using rule 63 (factor -> variable .)
    EQUAL           reduce using rule 63 (factor -> variable .)
    DISTINT         reduce using rule 63 (factor -> variable .)
    LESS            reduce using rule 63 (factor -> variable .)
    GREATER         reduce using rule 63 (factor -> variable .)
    DO              reduce using rule 63 (factor -> variable .)
    RBRACKET        reduce using rule 63 (factor -> variable .)
    COMMA           reduce using rule 63 (factor -> variable .)
    RPAREN          reduce using rule 63 (factor -> variable .)
    SEMICOLON       reduce using rule 63 (factor -> variable .)
    TIMES           reduce using rule 63 (factor -> variable .)
    DIV             reduce using rule 63 (factor -> variable .)
    AND             reduce using rule 63 (factor -> variable .)


state 94

    (56) expression -> simple_expression relational_operator . simple_expression
    (57) simple_expression -> . sign term simple_expression2
    (71) sign -> . PLUS
    (72) sign -> . MINUS
    (73) sign -> . empty
    (86) empty -> .

    PLUS            shift and go to state 64
    MINUS           shift and go to state 67
    NUMBER          reduce using rule 86 (empty -> .)
    LPAREN          reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)

    sign                           shift and go to state 63
    simple_expression              shift and go to state 126
    empty                          shift and go to state 68

state 95

    (69) relational_operator -> LESS .

    PLUS            reduce using rule 69 (relational_operator -> LESS .)
    MINUS           reduce using rule 69 (relational_operator -> LESS .)
    NUMBER          reduce using rule 69 (relational_operator -> LESS .)
    LPAREN          reduce using rule 69 (relational_operator -> LESS .)
    NOT             reduce using rule 69 (relational_operator -> LESS .)
    ID              reduce using rule 69 (relational_operator -> LESS .)


state 96

    (68) relational_operator -> DISTINT .

    PLUS            reduce using rule 68 (relational_operator -> DISTINT .)
    MINUS           reduce using rule 68 (relational_operator -> DISTINT .)
    NUMBER          reduce using rule 68 (relational_operator -> DISTINT .)
    LPAREN          reduce using rule 68 (relational_operator -> DISTINT .)
    NOT             reduce using rule 68 (relational_operator -> DISTINT .)
    ID              reduce using rule 68 (relational_operator -> DISTINT .)


state 97

    (67) relational_operator -> EQUAL .

    PLUS            reduce using rule 67 (relational_operator -> EQUAL .)
    MINUS           reduce using rule 67 (relational_operator -> EQUAL .)
    NUMBER          reduce using rule 67 (relational_operator -> EQUAL .)
    LPAREN          reduce using rule 67 (relational_operator -> EQUAL .)
    NOT             reduce using rule 67 (relational_operator -> EQUAL .)
    ID              reduce using rule 67 (relational_operator -> EQUAL .)


state 98

    (70) relational_operator -> GREATER .

    PLUS            reduce using rule 70 (relational_operator -> GREATER .)
    MINUS           reduce using rule 70 (relational_operator -> GREATER .)
    NUMBER          reduce using rule 70 (relational_operator -> GREATER .)
    LPAREN          reduce using rule 70 (relational_operator -> GREATER .)
    NOT             reduce using rule 70 (relational_operator -> GREATER .)
    ID              reduce using rule 70 (relational_operator -> GREATER .)


state 99

    (54) while_statement -> WHILE expression DO . statement
    (27) statement -> . simple_statement
    (28) statement -> . statement simple_statement
    (29) statement -> . statement structured_statement
    (30) statement -> . structured_statement
    (33) simple_statement -> . assignment_statement
    (34) simple_statement -> . procedure_statement
    (35) simple_statement -> . read_statement
    (36) simple_statement -> . write_statement
    (49) structured_statement -> . compound_statement
    (50) structured_statement -> . if_statement
    (51) structured_statement -> . while_statement
    (37) assignment_statement -> . variable COLON EQUAL expression SEMICOLON
    (38) procedure_statement -> . procedure_identifier
    (40) read_statement -> . READ LPAREN input_variable input_variable2 RPAREN SEMICOLON
    (44) write_statement -> . WRITE LPAREN output_value output_value2 RPAREN SEMICOLON
    (24) compound_statement -> . BEGIN statement END DOT compound_statement2
    (52) if_statement -> . IF LPAREN expression RPAREN THEN statement
    (53) if_statement -> . IF LPAREN expression RPAREN THEN statement ELSE statement
    (54) while_statement -> . WHILE expression DO statement
    (80) variable -> . entire_variable
    (81) variable -> . indexed_variable
    (39) procedure_identifier -> . ID
    (84) entire_variable -> . variable_identifier
    (82) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (85) variable_identifier -> . ID
    (83) array_variable -> . entire_variable

    READ            shift and go to state 37
    WRITE           shift and go to state 51
    BEGIN           shift and go to state 24
    IF              shift and go to state 54
    WHILE           shift and go to state 39
    ID              shift and go to state 53

    indexed_variable               shift and go to state 36
    simple_statement               shift and go to state 38
    compound_statement             shift and go to state 41
    assignment_statement           shift and go to state 42
    procedure_statement            shift and go to state 43
    structured_statement           shift and go to state 44
    write_statement                shift and go to state 45
    entire_variable                shift and go to state 46
    while_statement                shift and go to state 47
    statement                      shift and go to state 127
    array_variable                 shift and go to state 40
    if_statement                   shift and go to state 50
    variable_identifier            shift and go to state 55
    variable                       shift and go to state 52
    read_statement                 shift and go to state 49
    procedure_identifier           shift and go to state 56

state 100

    (82) indexed_variable -> array_variable LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 128


state 101

    (24) compound_statement -> BEGIN statement END DOT . compound_statement2
    (25) compound_statement2 -> . empty
    (26) compound_statement2 -> . compound_statement
    (86) empty -> .
    (24) compound_statement -> . BEGIN statement END DOT compound_statement2

  ! shift/reduce conflict for BEGIN resolved as shift
    $end            reduce using rule 86 (empty -> .)
    END             reduce using rule 86 (empty -> .)
    READ            reduce using rule 86 (empty -> .)
    WRITE           reduce using rule 86 (empty -> .)
    IF              reduce using rule 86 (empty -> .)
    WHILE           reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)
    ELSE            reduce using rule 86 (empty -> .)
    BEGIN           shift and go to state 24

  ! BEGIN           [ reduce using rule 86 (empty -> .) ]

    empty                          shift and go to state 131
    compound_statement2            shift and go to state 130
    compound_statement             shift and go to state 129

state 102

    (46) output_value -> STRING .

    COMMA           reduce using rule 46 (output_value -> STRING .)
    RPAREN          reduce using rule 46 (output_value -> STRING .)


state 103

    (44) write_statement -> WRITE LPAREN output_value . output_value2 RPAREN SEMICOLON
    (47) output_value2 -> . empty
    (48) output_value2 -> . COMMA expression
    (86) empty -> .

    COMMA           shift and go to state 133
    RPAREN          reduce using rule 86 (empty -> .)

    output_value2                  shift and go to state 132
    empty                          shift and go to state 134

state 104

    (45) output_value -> expression .

    COMMA           reduce using rule 45 (output_value -> expression .)
    RPAREN          reduce using rule 45 (output_value -> expression .)


state 105

    (37) assignment_statement -> variable COLON EQUAL . expression SEMICOLON
    (55) expression -> . simple_expression
    (56) expression -> . simple_expression relational_operator simple_expression
    (57) simple_expression -> . sign term simple_expression2
    (71) sign -> . PLUS
    (72) sign -> . MINUS
    (73) sign -> . empty
    (86) empty -> .

    PLUS            shift and go to state 64
    MINUS           shift and go to state 67
    NUMBER          reduce using rule 86 (empty -> .)
    LPAREN          reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)

    sign                           shift and go to state 63
    simple_expression              shift and go to state 65
    expression                     shift and go to state 135
    empty                          shift and go to state 68

state 106

    (52) if_statement -> IF LPAREN expression . RPAREN THEN statement
    (53) if_statement -> IF LPAREN expression . RPAREN THEN statement ELSE statement

    RPAREN          shift and go to state 136


state 107

    (13) array_type -> ARRAY LBRACKET . index_range RBRACKET OF simple_type
    (14) index_range -> . NUMBER DOT DOT NUMBER

    NUMBER          shift and go to state 138

    index_range                    shift and go to state 137

state 108

    (22) function_declaration -> FUNCTION ID LPAREN variable_declaration RPAREN COLON . type SEMICOLON variable_declaration_part
    (11) type -> . simple_type
    (12) type -> . array_type
    (15) simple_type -> . type_identifier
    (13) array_type -> . ARRAY LBRACKET index_range RBRACKET OF simple_type
    (16) type_identifier -> . INTEGER
    (17) type_identifier -> . CHAR

    ARRAY           shift and go to state 82
    INTEGER         shift and go to state 81
    CHAR            shift and go to state 83

    type_identifier                shift and go to state 77
    simple_type                    shift and go to state 78
    array_type                     shift and go to state 80
    type                           shift and go to state 139

state 109

    (43) input_variable2 -> COMMA . variable
    (80) variable -> . entire_variable
    (81) variable -> . indexed_variable
    (84) entire_variable -> . variable_identifier
    (82) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (85) variable_identifier -> . ID
    (83) array_variable -> . entire_variable

    ID              shift and go to state 85

    indexed_variable               shift and go to state 36
    variable_identifier            shift and go to state 55
    entire_variable                shift and go to state 46
    variable                       shift and go to state 140
    array_variable                 shift and go to state 40

state 110

    (40) read_statement -> READ LPAREN input_variable input_variable2 . RPAREN SEMICOLON

    RPAREN          shift and go to state 141


state 111

    (42) input_variable2 -> empty .

    RPAREN          reduce using rule 42 (input_variable2 -> empty .)


state 112

    (57) simple_expression -> sign term simple_expression2 .

    EQUAL           reduce using rule 57 (simple_expression -> sign term simple_expression2 .)
    DISTINT         reduce using rule 57 (simple_expression -> sign term simple_expression2 .)
    LESS            reduce using rule 57 (simple_expression -> sign term simple_expression2 .)
    GREATER         reduce using rule 57 (simple_expression -> sign term simple_expression2 .)
    COMMA           reduce using rule 57 (simple_expression -> sign term simple_expression2 .)
    RPAREN          reduce using rule 57 (simple_expression -> sign term simple_expression2 .)
    DO              reduce using rule 57 (simple_expression -> sign term simple_expression2 .)
    RBRACKET        reduce using rule 57 (simple_expression -> sign term simple_expression2 .)
    SEMICOLON       reduce using rule 57 (simple_expression -> sign term simple_expression2 .)


state 113

    (74) adding_operator -> PLUS .

    NUMBER          reduce using rule 74 (adding_operator -> PLUS .)
    LPAREN          reduce using rule 74 (adding_operator -> PLUS .)
    NOT             reduce using rule 74 (adding_operator -> PLUS .)
    ID              reduce using rule 74 (adding_operator -> PLUS .)


state 114

    (58) simple_expression2 -> adding_operator . term
    (60) term -> . factor term2
    (63) factor -> . variable
    (64) factor -> . NUMBER
    (65) factor -> . LPAREN expression RPAREN
    (66) factor -> . NOT factor
    (80) variable -> . entire_variable
    (81) variable -> . indexed_variable
    (84) entire_variable -> . variable_identifier
    (82) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (85) variable_identifier -> . ID
    (83) array_variable -> . entire_variable

    NUMBER          shift and go to state 89
    LPAREN          shift and go to state 91
    NOT             shift and go to state 90
    ID              shift and go to state 85

    term                           shift and go to state 142
    indexed_variable               shift and go to state 36
    variable_identifier            shift and go to state 55
    entire_variable                shift and go to state 46
    factor                         shift and go to state 92
    variable                       shift and go to state 93
    array_variable                 shift and go to state 40

state 115

    (75) adding_operator -> MINUS .

    NUMBER          reduce using rule 75 (adding_operator -> MINUS .)
    LPAREN          reduce using rule 75 (adding_operator -> MINUS .)
    NOT             reduce using rule 75 (adding_operator -> MINUS .)
    ID              reduce using rule 75 (adding_operator -> MINUS .)


state 116

    (59) simple_expression2 -> empty .

    EQUAL           reduce using rule 59 (simple_expression2 -> empty .)
    DISTINT         reduce using rule 59 (simple_expression2 -> empty .)
    LESS            reduce using rule 59 (simple_expression2 -> empty .)
    GREATER         reduce using rule 59 (simple_expression2 -> empty .)
    DO              reduce using rule 59 (simple_expression2 -> empty .)
    RBRACKET        reduce using rule 59 (simple_expression2 -> empty .)
    COMMA           reduce using rule 59 (simple_expression2 -> empty .)
    RPAREN          reduce using rule 59 (simple_expression2 -> empty .)
    SEMICOLON       reduce using rule 59 (simple_expression2 -> empty .)


state 117

    (76) adding_operator -> OR .

    NUMBER          reduce using rule 76 (adding_operator -> OR .)
    LPAREN          reduce using rule 76 (adding_operator -> OR .)
    NOT             reduce using rule 76 (adding_operator -> OR .)
    ID              reduce using rule 76 (adding_operator -> OR .)


state 118

    (66) factor -> NOT factor .

    PLUS            reduce using rule 66 (factor -> NOT factor .)
    MINUS           reduce using rule 66 (factor -> NOT factor .)
    OR              reduce using rule 66 (factor -> NOT factor .)
    EQUAL           reduce using rule 66 (factor -> NOT factor .)
    DISTINT         reduce using rule 66 (factor -> NOT factor .)
    LESS            reduce using rule 66 (factor -> NOT factor .)
    GREATER         reduce using rule 66 (factor -> NOT factor .)
    DO              reduce using rule 66 (factor -> NOT factor .)
    RBRACKET        reduce using rule 66 (factor -> NOT factor .)
    COMMA           reduce using rule 66 (factor -> NOT factor .)
    RPAREN          reduce using rule 66 (factor -> NOT factor .)
    SEMICOLON       reduce using rule 66 (factor -> NOT factor .)
    TIMES           reduce using rule 66 (factor -> NOT factor .)
    DIV             reduce using rule 66 (factor -> NOT factor .)
    AND             reduce using rule 66 (factor -> NOT factor .)


state 119

    (65) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 143


state 120

    (79) multiplying_operator -> AND .

    NUMBER          reduce using rule 79 (multiplying_operator -> AND .)
    LPAREN          reduce using rule 79 (multiplying_operator -> AND .)
    NOT             reduce using rule 79 (multiplying_operator -> AND .)
    ID              reduce using rule 79 (multiplying_operator -> AND .)


state 121

    (60) term -> factor term2 .

    PLUS            reduce using rule 60 (term -> factor term2 .)
    MINUS           reduce using rule 60 (term -> factor term2 .)
    OR              reduce using rule 60 (term -> factor term2 .)
    EQUAL           reduce using rule 60 (term -> factor term2 .)
    DISTINT         reduce using rule 60 (term -> factor term2 .)
    LESS            reduce using rule 60 (term -> factor term2 .)
    GREATER         reduce using rule 60 (term -> factor term2 .)
    DO              reduce using rule 60 (term -> factor term2 .)
    RBRACKET        reduce using rule 60 (term -> factor term2 .)
    COMMA           reduce using rule 60 (term -> factor term2 .)
    RPAREN          reduce using rule 60 (term -> factor term2 .)
    SEMICOLON       reduce using rule 60 (term -> factor term2 .)


state 122

    (77) multiplying_operator -> TIMES .

    NUMBER          reduce using rule 77 (multiplying_operator -> TIMES .)
    LPAREN          reduce using rule 77 (multiplying_operator -> TIMES .)
    NOT             reduce using rule 77 (multiplying_operator -> TIMES .)
    ID              reduce using rule 77 (multiplying_operator -> TIMES .)


state 123

    (78) multiplying_operator -> DIV .

    NUMBER          reduce using rule 78 (multiplying_operator -> DIV .)
    LPAREN          reduce using rule 78 (multiplying_operator -> DIV .)
    NOT             reduce using rule 78 (multiplying_operator -> DIV .)
    ID              reduce using rule 78 (multiplying_operator -> DIV .)


state 124

    (61) term2 -> multiplying_operator . factor
    (63) factor -> . variable
    (64) factor -> . NUMBER
    (65) factor -> . LPAREN expression RPAREN
    (66) factor -> . NOT factor
    (80) variable -> . entire_variable
    (81) variable -> . indexed_variable
    (84) entire_variable -> . variable_identifier
    (82) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (85) variable_identifier -> . ID
    (83) array_variable -> . entire_variable

    NUMBER          shift and go to state 89
    LPAREN          shift and go to state 91
    NOT             shift and go to state 90
    ID              shift and go to state 85

    indexed_variable               shift and go to state 36
    variable_identifier            shift and go to state 55
    array_variable                 shift and go to state 40
    entire_variable                shift and go to state 46
    factor                         shift and go to state 144
    variable                       shift and go to state 93

state 125

    (62) term2 -> empty .

    PLUS            reduce using rule 62 (term2 -> empty .)
    MINUS           reduce using rule 62 (term2 -> empty .)
    OR              reduce using rule 62 (term2 -> empty .)
    EQUAL           reduce using rule 62 (term2 -> empty .)
    DISTINT         reduce using rule 62 (term2 -> empty .)
    LESS            reduce using rule 62 (term2 -> empty .)
    GREATER         reduce using rule 62 (term2 -> empty .)
    DO              reduce using rule 62 (term2 -> empty .)
    RBRACKET        reduce using rule 62 (term2 -> empty .)
    COMMA           reduce using rule 62 (term2 -> empty .)
    RPAREN          reduce using rule 62 (term2 -> empty .)
    SEMICOLON       reduce using rule 62 (term2 -> empty .)


state 126

    (56) expression -> simple_expression relational_operator simple_expression .

    RPAREN          reduce using rule 56 (expression -> simple_expression relational_operator simple_expression .)
    SEMICOLON       reduce using rule 56 (expression -> simple_expression relational_operator simple_expression .)
    RBRACKET        reduce using rule 56 (expression -> simple_expression relational_operator simple_expression .)
    DO              reduce using rule 56 (expression -> simple_expression relational_operator simple_expression .)
    COMMA           reduce using rule 56 (expression -> simple_expression relational_operator simple_expression .)


state 127

    (54) while_statement -> WHILE expression DO statement .
    (28) statement -> statement . simple_statement
    (29) statement -> statement . structured_statement
    (33) simple_statement -> . assignment_statement
    (34) simple_statement -> . procedure_statement
    (35) simple_statement -> . read_statement
    (36) simple_statement -> . write_statement
    (49) structured_statement -> . compound_statement
    (50) structured_statement -> . if_statement
    (51) structured_statement -> . while_statement
    (37) assignment_statement -> . variable COLON EQUAL expression SEMICOLON
    (38) procedure_statement -> . procedure_identifier
    (40) read_statement -> . READ LPAREN input_variable input_variable2 RPAREN SEMICOLON
    (44) write_statement -> . WRITE LPAREN output_value output_value2 RPAREN SEMICOLON
    (24) compound_statement -> . BEGIN statement END DOT compound_statement2
    (52) if_statement -> . IF LPAREN expression RPAREN THEN statement
    (53) if_statement -> . IF LPAREN expression RPAREN THEN statement ELSE statement
    (54) while_statement -> . WHILE expression DO statement
    (80) variable -> . entire_variable
    (81) variable -> . indexed_variable
    (39) procedure_identifier -> . ID
    (84) entire_variable -> . variable_identifier
    (82) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (85) variable_identifier -> . ID
    (83) array_variable -> . entire_variable

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 54 (while_statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 54 (while_statement -> WHILE expression DO statement .)
    READ            shift and go to state 37
    WRITE           shift and go to state 51
    BEGIN           shift and go to state 24
    IF              shift and go to state 54
    WHILE           shift and go to state 39
    ID              shift and go to state 53

  ! READ            [ reduce using rule 54 (while_statement -> WHILE expression DO statement .) ]
  ! WRITE           [ reduce using rule 54 (while_statement -> WHILE expression DO statement .) ]
  ! BEGIN           [ reduce using rule 54 (while_statement -> WHILE expression DO statement .) ]
  ! IF              [ reduce using rule 54 (while_statement -> WHILE expression DO statement .) ]
  ! WHILE           [ reduce using rule 54 (while_statement -> WHILE expression DO statement .) ]
  ! ID              [ reduce using rule 54 (while_statement -> WHILE expression DO statement .) ]

    indexed_variable               shift and go to state 36
    simple_statement               shift and go to state 70
    compound_statement             shift and go to state 41
    assignment_statement           shift and go to state 42
    procedure_statement            shift and go to state 43
    structured_statement           shift and go to state 71
    write_statement                shift and go to state 45
    entire_variable                shift and go to state 46
    while_statement                shift and go to state 47
    array_variable                 shift and go to state 40
    if_statement                   shift and go to state 50
    variable_identifier            shift and go to state 55
    variable                       shift and go to state 52
    read_statement                 shift and go to state 49
    procedure_identifier           shift and go to state 56

state 128

    (82) indexed_variable -> array_variable LBRACKET expression RBRACKET .

    COLON           reduce using rule 82 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 82 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    DIV             reduce using rule 82 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    AND             reduce using rule 82 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 82 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 82 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    OR              reduce using rule 82 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 82 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    DISTINT         reduce using rule 82 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    LESS            reduce using rule 82 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 82 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    DO              reduce using rule 82 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 82 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 82 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 82 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 82 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)


state 129

    (26) compound_statement2 -> compound_statement .

    $end            reduce using rule 26 (compound_statement2 -> compound_statement .)
    BEGIN           reduce using rule 26 (compound_statement2 -> compound_statement .)
    END             reduce using rule 26 (compound_statement2 -> compound_statement .)
    READ            reduce using rule 26 (compound_statement2 -> compound_statement .)
    WRITE           reduce using rule 26 (compound_statement2 -> compound_statement .)
    IF              reduce using rule 26 (compound_statement2 -> compound_statement .)
    WHILE           reduce using rule 26 (compound_statement2 -> compound_statement .)
    ID              reduce using rule 26 (compound_statement2 -> compound_statement .)
    ELSE            reduce using rule 26 (compound_statement2 -> compound_statement .)


state 130

    (24) compound_statement -> BEGIN statement END DOT compound_statement2 .

    READ            reduce using rule 24 (compound_statement -> BEGIN statement END DOT compound_statement2 .)
    WRITE           reduce using rule 24 (compound_statement -> BEGIN statement END DOT compound_statement2 .)
    BEGIN           reduce using rule 24 (compound_statement -> BEGIN statement END DOT compound_statement2 .)
    IF              reduce using rule 24 (compound_statement -> BEGIN statement END DOT compound_statement2 .)
    WHILE           reduce using rule 24 (compound_statement -> BEGIN statement END DOT compound_statement2 .)
    ID              reduce using rule 24 (compound_statement -> BEGIN statement END DOT compound_statement2 .)
    END             reduce using rule 24 (compound_statement -> BEGIN statement END DOT compound_statement2 .)
    ELSE            reduce using rule 24 (compound_statement -> BEGIN statement END DOT compound_statement2 .)
    $end            reduce using rule 24 (compound_statement -> BEGIN statement END DOT compound_statement2 .)


state 131

    (25) compound_statement2 -> empty .

    $end            reduce using rule 25 (compound_statement2 -> empty .)
    BEGIN           reduce using rule 25 (compound_statement2 -> empty .)
    END             reduce using rule 25 (compound_statement2 -> empty .)
    READ            reduce using rule 25 (compound_statement2 -> empty .)
    WRITE           reduce using rule 25 (compound_statement2 -> empty .)
    IF              reduce using rule 25 (compound_statement2 -> empty .)
    WHILE           reduce using rule 25 (compound_statement2 -> empty .)
    ID              reduce using rule 25 (compound_statement2 -> empty .)
    ELSE            reduce using rule 25 (compound_statement2 -> empty .)


state 132

    (44) write_statement -> WRITE LPAREN output_value output_value2 . RPAREN SEMICOLON

    RPAREN          shift and go to state 145


state 133

    (48) output_value2 -> COMMA . expression
    (55) expression -> . simple_expression
    (56) expression -> . simple_expression relational_operator simple_expression
    (57) simple_expression -> . sign term simple_expression2
    (71) sign -> . PLUS
    (72) sign -> . MINUS
    (73) sign -> . empty
    (86) empty -> .

    PLUS            shift and go to state 64
    MINUS           shift and go to state 67
    NUMBER          reduce using rule 86 (empty -> .)
    LPAREN          reduce using rule 86 (empty -> .)
    NOT             reduce using rule 86 (empty -> .)
    ID              reduce using rule 86 (empty -> .)

    sign                           shift and go to state 63
    simple_expression              shift and go to state 65
    expression                     shift and go to state 146
    empty                          shift and go to state 68

state 134

    (47) output_value2 -> empty .

    RPAREN          reduce using rule 47 (output_value2 -> empty .)


state 135

    (37) assignment_statement -> variable COLON EQUAL expression . SEMICOLON

    SEMICOLON       shift and go to state 147


state 136

    (52) if_statement -> IF LPAREN expression RPAREN . THEN statement
    (53) if_statement -> IF LPAREN expression RPAREN . THEN statement ELSE statement

    THEN            shift and go to state 148


state 137

    (13) array_type -> ARRAY LBRACKET index_range . RBRACKET OF simple_type

    RBRACKET        shift and go to state 149


state 138

    (14) index_range -> NUMBER . DOT DOT NUMBER

    DOT             shift and go to state 150


state 139

    (22) function_declaration -> FUNCTION ID LPAREN variable_declaration RPAREN COLON type . SEMICOLON variable_declaration_part

    SEMICOLON       shift and go to state 151


state 140

    (43) input_variable2 -> COMMA variable .

    RPAREN          reduce using rule 43 (input_variable2 -> COMMA variable .)


state 141

    (40) read_statement -> READ LPAREN input_variable input_variable2 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 152


state 142

    (58) simple_expression2 -> adding_operator term .

    EQUAL           reduce using rule 58 (simple_expression2 -> adding_operator term .)
    DISTINT         reduce using rule 58 (simple_expression2 -> adding_operator term .)
    LESS            reduce using rule 58 (simple_expression2 -> adding_operator term .)
    GREATER         reduce using rule 58 (simple_expression2 -> adding_operator term .)
    DO              reduce using rule 58 (simple_expression2 -> adding_operator term .)
    RBRACKET        reduce using rule 58 (simple_expression2 -> adding_operator term .)
    COMMA           reduce using rule 58 (simple_expression2 -> adding_operator term .)
    RPAREN          reduce using rule 58 (simple_expression2 -> adding_operator term .)
    SEMICOLON       reduce using rule 58 (simple_expression2 -> adding_operator term .)


state 143

    (65) factor -> LPAREN expression RPAREN .

    PLUS            reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    DISTINT         reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    DIV             reduce using rule 65 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 65 (factor -> LPAREN expression RPAREN .)


state 144

    (61) term2 -> multiplying_operator factor .

    PLUS            reduce using rule 61 (term2 -> multiplying_operator factor .)
    MINUS           reduce using rule 61 (term2 -> multiplying_operator factor .)
    OR              reduce using rule 61 (term2 -> multiplying_operator factor .)
    EQUAL           reduce using rule 61 (term2 -> multiplying_operator factor .)
    DISTINT         reduce using rule 61 (term2 -> multiplying_operator factor .)
    LESS            reduce using rule 61 (term2 -> multiplying_operator factor .)
    GREATER         reduce using rule 61 (term2 -> multiplying_operator factor .)
    DO              reduce using rule 61 (term2 -> multiplying_operator factor .)
    RBRACKET        reduce using rule 61 (term2 -> multiplying_operator factor .)
    COMMA           reduce using rule 61 (term2 -> multiplying_operator factor .)
    RPAREN          reduce using rule 61 (term2 -> multiplying_operator factor .)
    SEMICOLON       reduce using rule 61 (term2 -> multiplying_operator factor .)


state 145

    (44) write_statement -> WRITE LPAREN output_value output_value2 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 153


state 146

    (48) output_value2 -> COMMA expression .

    RPAREN          reduce using rule 48 (output_value2 -> COMMA expression .)


state 147

    (37) assignment_statement -> variable COLON EQUAL expression SEMICOLON .

    END             reduce using rule 37 (assignment_statement -> variable COLON EQUAL expression SEMICOLON .)
    READ            reduce using rule 37 (assignment_statement -> variable COLON EQUAL expression SEMICOLON .)
    WRITE           reduce using rule 37 (assignment_statement -> variable COLON EQUAL expression SEMICOLON .)
    BEGIN           reduce using rule 37 (assignment_statement -> variable COLON EQUAL expression SEMICOLON .)
    IF              reduce using rule 37 (assignment_statement -> variable COLON EQUAL expression SEMICOLON .)
    WHILE           reduce using rule 37 (assignment_statement -> variable COLON EQUAL expression SEMICOLON .)
    ID              reduce using rule 37 (assignment_statement -> variable COLON EQUAL expression SEMICOLON .)
    ELSE            reduce using rule 37 (assignment_statement -> variable COLON EQUAL expression SEMICOLON .)


state 148

    (52) if_statement -> IF LPAREN expression RPAREN THEN . statement
    (53) if_statement -> IF LPAREN expression RPAREN THEN . statement ELSE statement
    (27) statement -> . simple_statement
    (28) statement -> . statement simple_statement
    (29) statement -> . statement structured_statement
    (30) statement -> . structured_statement
    (33) simple_statement -> . assignment_statement
    (34) simple_statement -> . procedure_statement
    (35) simple_statement -> . read_statement
    (36) simple_statement -> . write_statement
    (49) structured_statement -> . compound_statement
    (50) structured_statement -> . if_statement
    (51) structured_statement -> . while_statement
    (37) assignment_statement -> . variable COLON EQUAL expression SEMICOLON
    (38) procedure_statement -> . procedure_identifier
    (40) read_statement -> . READ LPAREN input_variable input_variable2 RPAREN SEMICOLON
    (44) write_statement -> . WRITE LPAREN output_value output_value2 RPAREN SEMICOLON
    (24) compound_statement -> . BEGIN statement END DOT compound_statement2
    (52) if_statement -> . IF LPAREN expression RPAREN THEN statement
    (53) if_statement -> . IF LPAREN expression RPAREN THEN statement ELSE statement
    (54) while_statement -> . WHILE expression DO statement
    (80) variable -> . entire_variable
    (81) variable -> . indexed_variable
    (39) procedure_identifier -> . ID
    (84) entire_variable -> . variable_identifier
    (82) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (85) variable_identifier -> . ID
    (83) array_variable -> . entire_variable

    READ            shift and go to state 37
    WRITE           shift and go to state 51
    BEGIN           shift and go to state 24
    IF              shift and go to state 54
    WHILE           shift and go to state 39
    ID              shift and go to state 53

    indexed_variable               shift and go to state 36
    simple_statement               shift and go to state 38
    compound_statement             shift and go to state 41
    assignment_statement           shift and go to state 42
    procedure_statement            shift and go to state 43
    structured_statement           shift and go to state 44
    write_statement                shift and go to state 45
    entire_variable                shift and go to state 46
    while_statement                shift and go to state 47
    statement                      shift and go to state 154
    array_variable                 shift and go to state 40
    if_statement                   shift and go to state 50
    variable_identifier            shift and go to state 55
    variable                       shift and go to state 52
    read_statement                 shift and go to state 49
    procedure_identifier           shift and go to state 56

state 149

    (13) array_type -> ARRAY LBRACKET index_range RBRACKET . OF simple_type

    OF              shift and go to state 155


state 150

    (14) index_range -> NUMBER DOT . DOT NUMBER

    DOT             shift and go to state 156


state 151

    (22) function_declaration -> FUNCTION ID LPAREN variable_declaration RPAREN COLON type SEMICOLON . variable_declaration_part
    (3) variable_declaration_part -> . empty
    (4) variable_declaration_part -> . VAR variable_declaration SEMICOLON variable_declaration_part
    (5) variable_declaration_part -> . CONST const_declaration SEMICOLON variable_declaration_part
    (86) empty -> .

    VAR             shift and go to state 7
    CONST           shift and go to state 5
    BEGIN           reduce using rule 86 (empty -> .)

    variable_declaration_part      shift and go to state 157
    empty                          shift and go to state 8

state 152

    (40) read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .

    READ            reduce using rule 40 (read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .)
    WRITE           reduce using rule 40 (read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .)
    BEGIN           reduce using rule 40 (read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .)
    IF              reduce using rule 40 (read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .)
    WHILE           reduce using rule 40 (read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .)
    ID              reduce using rule 40 (read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .)
    END             reduce using rule 40 (read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .)
    ELSE            reduce using rule 40 (read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .)


state 153

    (44) write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON .

    END             reduce using rule 44 (write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON .)
    READ            reduce using rule 44 (write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON .)
    WRITE           reduce using rule 44 (write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON .)
    BEGIN           reduce using rule 44 (write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON .)
    IF              reduce using rule 44 (write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON .)
    WHILE           reduce using rule 44 (write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON .)
    ID              reduce using rule 44 (write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON .)
    ELSE            reduce using rule 44 (write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON .)


state 154

    (52) if_statement -> IF LPAREN expression RPAREN THEN statement .
    (53) if_statement -> IF LPAREN expression RPAREN THEN statement . ELSE statement
    (28) statement -> statement . simple_statement
    (29) statement -> statement . structured_statement
    (33) simple_statement -> . assignment_statement
    (34) simple_statement -> . procedure_statement
    (35) simple_statement -> . read_statement
    (36) simple_statement -> . write_statement
    (49) structured_statement -> . compound_statement
    (50) structured_statement -> . if_statement
    (51) structured_statement -> . while_statement
    (37) assignment_statement -> . variable COLON EQUAL expression SEMICOLON
    (38) procedure_statement -> . procedure_identifier
    (40) read_statement -> . READ LPAREN input_variable input_variable2 RPAREN SEMICOLON
    (44) write_statement -> . WRITE LPAREN output_value output_value2 RPAREN SEMICOLON
    (24) compound_statement -> . BEGIN statement END DOT compound_statement2
    (52) if_statement -> . IF LPAREN expression RPAREN THEN statement
    (53) if_statement -> . IF LPAREN expression RPAREN THEN statement ELSE statement
    (54) while_statement -> . WHILE expression DO statement
    (80) variable -> . entire_variable
    (81) variable -> . indexed_variable
    (39) procedure_identifier -> . ID
    (84) entire_variable -> . variable_identifier
    (82) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (85) variable_identifier -> . ID
    (83) array_variable -> . entire_variable

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 52 (if_statement -> IF LPAREN expression RPAREN THEN statement .)
    ELSE            shift and go to state 158
    READ            shift and go to state 37
    WRITE           shift and go to state 51
    BEGIN           shift and go to state 24
    IF              shift and go to state 54
    WHILE           shift and go to state 39
    ID              shift and go to state 53

  ! READ            [ reduce using rule 52 (if_statement -> IF LPAREN expression RPAREN THEN statement .) ]
  ! WRITE           [ reduce using rule 52 (if_statement -> IF LPAREN expression RPAREN THEN statement .) ]
  ! BEGIN           [ reduce using rule 52 (if_statement -> IF LPAREN expression RPAREN THEN statement .) ]
  ! IF              [ reduce using rule 52 (if_statement -> IF LPAREN expression RPAREN THEN statement .) ]
  ! WHILE           [ reduce using rule 52 (if_statement -> IF LPAREN expression RPAREN THEN statement .) ]
  ! ID              [ reduce using rule 52 (if_statement -> IF LPAREN expression RPAREN THEN statement .) ]
  ! ELSE            [ reduce using rule 52 (if_statement -> IF LPAREN expression RPAREN THEN statement .) ]

    indexed_variable               shift and go to state 36
    simple_statement               shift and go to state 70
    compound_statement             shift and go to state 41
    assignment_statement           shift and go to state 42
    procedure_statement            shift and go to state 43
    structured_statement           shift and go to state 71
    write_statement                shift and go to state 45
    entire_variable                shift and go to state 46
    while_statement                shift and go to state 47
    array_variable                 shift and go to state 40
    if_statement                   shift and go to state 50
    variable_identifier            shift and go to state 55
    variable                       shift and go to state 52
    read_statement                 shift and go to state 49
    procedure_identifier           shift and go to state 56

state 155

    (13) array_type -> ARRAY LBRACKET index_range RBRACKET OF . simple_type
    (15) simple_type -> . type_identifier
    (16) type_identifier -> . INTEGER
    (17) type_identifier -> . CHAR

    INTEGER         shift and go to state 81
    CHAR            shift and go to state 83

    type_identifier                shift and go to state 77
    simple_type                    shift and go to state 159

state 156

    (14) index_range -> NUMBER DOT DOT . NUMBER

    NUMBER          shift and go to state 160


state 157

    (22) function_declaration -> FUNCTION ID LPAREN variable_declaration RPAREN COLON type SEMICOLON variable_declaration_part .

    BEGIN           reduce using rule 22 (function_declaration -> FUNCTION ID LPAREN variable_declaration RPAREN COLON type SEMICOLON variable_declaration_part .)


state 158

    (53) if_statement -> IF LPAREN expression RPAREN THEN statement ELSE . statement
    (27) statement -> . simple_statement
    (28) statement -> . statement simple_statement
    (29) statement -> . statement structured_statement
    (30) statement -> . structured_statement
    (33) simple_statement -> . assignment_statement
    (34) simple_statement -> . procedure_statement
    (35) simple_statement -> . read_statement
    (36) simple_statement -> . write_statement
    (49) structured_statement -> . compound_statement
    (50) structured_statement -> . if_statement
    (51) structured_statement -> . while_statement
    (37) assignment_statement -> . variable COLON EQUAL expression SEMICOLON
    (38) procedure_statement -> . procedure_identifier
    (40) read_statement -> . READ LPAREN input_variable input_variable2 RPAREN SEMICOLON
    (44) write_statement -> . WRITE LPAREN output_value output_value2 RPAREN SEMICOLON
    (24) compound_statement -> . BEGIN statement END DOT compound_statement2
    (52) if_statement -> . IF LPAREN expression RPAREN THEN statement
    (53) if_statement -> . IF LPAREN expression RPAREN THEN statement ELSE statement
    (54) while_statement -> . WHILE expression DO statement
    (80) variable -> . entire_variable
    (81) variable -> . indexed_variable
    (39) procedure_identifier -> . ID
    (84) entire_variable -> . variable_identifier
    (82) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (85) variable_identifier -> . ID
    (83) array_variable -> . entire_variable

    READ            shift and go to state 37
    WRITE           shift and go to state 51
    BEGIN           shift and go to state 24
    IF              shift and go to state 54
    WHILE           shift and go to state 39
    ID              shift and go to state 53

    indexed_variable               shift and go to state 36
    simple_statement               shift and go to state 38
    compound_statement             shift and go to state 41
    assignment_statement           shift and go to state 42
    procedure_statement            shift and go to state 43
    structured_statement           shift and go to state 44
    write_statement                shift and go to state 45
    entire_variable                shift and go to state 46
    while_statement                shift and go to state 47
    statement                      shift and go to state 161
    array_variable                 shift and go to state 40
    if_statement                   shift and go to state 50
    variable_identifier            shift and go to state 55
    variable                       shift and go to state 52
    read_statement                 shift and go to state 49
    procedure_identifier           shift and go to state 56

state 159

    (13) array_type -> ARRAY LBRACKET index_range RBRACKET OF simple_type .

    SEMICOLON       reduce using rule 13 (array_type -> ARRAY LBRACKET index_range RBRACKET OF simple_type .)
    RPAREN          reduce using rule 13 (array_type -> ARRAY LBRACKET index_range RBRACKET OF simple_type .)


state 160

    (14) index_range -> NUMBER DOT DOT NUMBER .

    RBRACKET        reduce using rule 14 (index_range -> NUMBER DOT DOT NUMBER .)


state 161

    (53) if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .
    (28) statement -> statement . simple_statement
    (29) statement -> statement . structured_statement
    (33) simple_statement -> . assignment_statement
    (34) simple_statement -> . procedure_statement
    (35) simple_statement -> . read_statement
    (36) simple_statement -> . write_statement
    (49) structured_statement -> . compound_statement
    (50) structured_statement -> . if_statement
    (51) structured_statement -> . while_statement
    (37) assignment_statement -> . variable COLON EQUAL expression SEMICOLON
    (38) procedure_statement -> . procedure_identifier
    (40) read_statement -> . READ LPAREN input_variable input_variable2 RPAREN SEMICOLON
    (44) write_statement -> . WRITE LPAREN output_value output_value2 RPAREN SEMICOLON
    (24) compound_statement -> . BEGIN statement END DOT compound_statement2
    (52) if_statement -> . IF LPAREN expression RPAREN THEN statement
    (53) if_statement -> . IF LPAREN expression RPAREN THEN statement ELSE statement
    (54) while_statement -> . WHILE expression DO statement
    (80) variable -> . entire_variable
    (81) variable -> . indexed_variable
    (39) procedure_identifier -> . ID
    (84) entire_variable -> . variable_identifier
    (82) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (85) variable_identifier -> . ID
    (83) array_variable -> . entire_variable

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    END             reduce using rule 53 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .)
    ELSE            reduce using rule 53 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .)
    READ            shift and go to state 37
    WRITE           shift and go to state 51
    BEGIN           shift and go to state 24
    IF              shift and go to state 54
    WHILE           shift and go to state 39
    ID              shift and go to state 53

  ! READ            [ reduce using rule 53 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .) ]
  ! WRITE           [ reduce using rule 53 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .) ]
  ! BEGIN           [ reduce using rule 53 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .) ]
  ! IF              [ reduce using rule 53 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .) ]
  ! WHILE           [ reduce using rule 53 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .) ]
  ! ID              [ reduce using rule 53 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .) ]

    indexed_variable               shift and go to state 36
    simple_statement               shift and go to state 70
    compound_statement             shift and go to state 41
    assignment_statement           shift and go to state 42
    procedure_statement            shift and go to state 43
    structured_statement           shift and go to state 71
    write_statement                shift and go to state 45
    entire_variable                shift and go to state 46
    while_statement                shift and go to state 47
    array_variable                 shift and go to state 40
    if_statement                   shift and go to state 50
    variable_identifier            shift and go to state 55
    variable                       shift and go to state 52
    read_statement                 shift and go to state 49
    procedure_identifier           shift and go to state 56
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for BEGIN in state 101 resolved as shift
WARNING: shift/reduce conflict for READ in state 127 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 127 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 127 resolved as shift
WARNING: shift/reduce conflict for IF in state 127 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 127 resolved as shift
WARNING: shift/reduce conflict for ID in state 127 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 154 resolved as shift
WARNING: shift/reduce conflict for READ in state 154 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 154 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 154 resolved as shift
WARNING: shift/reduce conflict for IF in state 154 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 154 resolved as shift
WARNING: shift/reduce conflict for ID in state 154 resolved as shift
WARNING: shift/reduce conflict for READ in state 161 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 161 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 161 resolved as shift
WARNING: shift/reduce conflict for IF in state 161 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 161 resolved as shift
WARNING: shift/reduce conflict for ID in state 161 resolved as shift
