Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    RESET
    EOF
    SIMPLE
    TEXT
    EXP
    TRUE
    PACKED
    COMMENT
    OPENCOMMENT
    TO
    GOTO
    CHR
    NIL
    OPENCOMMENT2
    SQR
    OUTPUT
    PACK
    FILE
    CLOSECOMMENT2
    LABEL
    SUCC
    AMPERSANT
    ROUND
    GET
    WITH
    SIN
    TRUNC
    FUNCTION
    REPEAT
    DIVIDE
    FOR
    MAXINT
    INPUT
    UNTIL
    ARCTAN
    DOWNTO
    MOD
    REAL
    COS
    NEW
    CASE
    SET
    ODD
    UNPACK
    FALSE
    REWRITE
    PRED
    EOLN
    READLN
    BOOLEAN
    HASHTAG
    PUT
    ORD
    TYPE
    PAGE
    CONST
    LN
    RECORD
    DISPOSE
    ABS
    IN
    WRITELN
    SQRT
    CLOSECOMMENT

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON block
Rule 2     block -> variable_declaration_part procedure_declaration_part statement_part
Rule 3     variable_declaration_part -> empty
Rule 4     variable_declaration_part -> VAR variable_declaration SEMICOLON variable_declaration_part
Rule 5     variable_declaration -> ID variable_declaration2 COLON type
Rule 6     variable_declaration2 -> COMMA ID variable_declaration2
Rule 7     variable_declaration2 -> empty
Rule 8     type -> simple_type
Rule 9     type -> array_type
Rule 10    array_type -> ARRAY LBRACKET index_range RBRACKET OF simple_type
Rule 11    index_range -> NUMBER DOT DOT NUMBER
Rule 12    simple_type -> type_identifier
Rule 13    type_identifier -> INTEGER
Rule 14    type_identifier -> CHAR
Rule 15    procedure_declaration_part -> empty
Rule 16    procedure_declaration_part -> procedure_declaration
Rule 17    procedure_declaration -> PROCEDURE ID SEMICOLON block
Rule 18    statement_part -> compound_statement
Rule 19    compound_statement -> BEGIN statement END DOT
Rule 20    statement -> simple_statement
Rule 21    statement -> statement simple_statement
Rule 22    statement -> statement structured_statement
Rule 23    statement -> structured_statement
Rule 24    statement3 -> SEMICOLON statement
Rule 25    statement3 -> empty
Rule 26    simple_statement -> assignment_statement
Rule 27    simple_statement -> procedure_statement
Rule 28    simple_statement -> read_statement
Rule 29    simple_statement -> write_statement
Rule 30    assignment_statement -> variable
Rule 31    assignment_statement -> expression
Rule 32    procedure_statement -> procedure_identifier
Rule 33    procedure_identifier -> ID
Rule 34    read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON
Rule 35    input_variable -> variable
Rule 36    input_variable2 -> empty
Rule 37    input_variable2 -> COMMA variable
Rule 38    write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON
Rule 39    output_value -> expression
Rule 40    output_value -> STRING
Rule 41    output_value2 -> empty
Rule 42    output_value2 -> COMMA expression
Rule 43    structured_statement -> compound_statement
Rule 44    structured_statement -> if_statement
Rule 45    structured_statement -> while_statement
Rule 46    if_statement -> IF LPAREN expression RPAREN THEN statement
Rule 47    if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement
Rule 48    while_statement -> WHILE expression DO statement
Rule 49    expression -> simple_expression
Rule 50    expression -> simple_expression relational_operator simple_expression
Rule 51    simple_expression -> sign term simple_expression2
Rule 52    simple_expression2 -> adding_operator term
Rule 53    simple_expression2 -> empty
Rule 54    term -> factor term2
Rule 55    term2 -> multiplying_operator factor
Rule 56    term2 -> empty
Rule 57    factor -> variable
Rule 58    factor -> NUMBER
Rule 59    factor -> LPAREN expression RPAREN
Rule 60    factor -> NOT factor
Rule 61    relational_operator -> EQUAL
Rule 62    relational_operator -> DISTINT
Rule 63    relational_operator -> LESS
Rule 64    relational_operator -> GREATER
Rule 65    sign -> PLUS
Rule 66    sign -> MINUS
Rule 67    sign -> empty
Rule 68    adding_operator -> PLUS
Rule 69    adding_operator -> MINUS
Rule 70    adding_operator -> OR
Rule 71    multiplying_operator -> TIMES
Rule 72    multiplying_operator -> DIV
Rule 73    multiplying_operator -> AND
Rule 74    variable -> entire_variable
Rule 75    variable -> indexed_variable
Rule 76    indexed_variable -> array_variable LBRACKET expression RBRACKET
Rule 77    array_variable -> entire_variable
Rule 78    entire_variable -> variable_identifier
Rule 79    variable_identifier -> ID
Rule 80    empty -> <empty>

Terminals, with rules where they appear

ABS                  : 
AMPERSANT            : 
AND                  : 73
ARCTAN               : 
ARRAY                : 10
BEGIN                : 19
BOOLEAN              : 
CASE                 : 
CHAR                 : 14
CHR                  : 
CLOSECOMMENT         : 
CLOSECOMMENT2        : 
COLON                : 5
COMMA                : 6 37 42
COMMENT              : 
CONST                : 
COS                  : 
DISPOSE              : 
DISTINT              : 62
DIV                  : 72
DIVIDE               : 
DO                   : 48
DOT                  : 11 11 19
DOWNTO               : 
ELSE                 : 47
END                  : 19
EOF                  : 
EOLN                 : 
EQUAL                : 61
EXP                  : 
FALSE                : 
FILE                 : 
FOR                  : 
FUNCTION             : 
GET                  : 
GOTO                 : 
GREATER              : 64
HASHTAG              : 
ID                   : 1 5 6 17 33 79
IF                   : 46 47
IN                   : 
INPUT                : 
INTEGER              : 13
LABEL                : 
LBRACKET             : 10 76
LESS                 : 63
LN                   : 
LPAREN               : 34 38 46 47 59
MAXINT               : 
MINUS                : 66 69
MOD                  : 
NEW                  : 
NIL                  : 
NOT                  : 60
NUMBER               : 11 11 58
ODD                  : 
OF                   : 10
OPENCOMMENT          : 
OPENCOMMENT2         : 
OR                   : 70
ORD                  : 
OUTPUT               : 
PACK                 : 
PACKED               : 
PAGE                 : 
PLUS                 : 65 68
PRED                 : 
PROCEDURE            : 17
PROGRAM              : 1
PUT                  : 
RBRACKET             : 10 76
READ                 : 34
READLN               : 
REAL                 : 
RECORD               : 
REPEAT               : 
RESET                : 
REWRITE              : 
ROUND                : 
RPAREN               : 34 38 46 47 59
SEMICOLON            : 1 4 17 24 34 38
SET                  : 
SIMPLE               : 
SIN                  : 
SQR                  : 
SQRT                 : 
STRING               : 40
SUCC                 : 
TEXT                 : 
THEN                 : 46 47
TIMES                : 71
TO                   : 
TRUE                 : 
TRUNC                : 
TYPE                 : 
UNPACK               : 
UNTIL                : 
VAR                  : 4
WHILE                : 48
WITH                 : 
WRITE                : 38
WRITELN              : 
error                : 

Nonterminals, with rules where they appear

adding_operator      : 52
array_type           : 9
array_variable       : 76
assignment_statement : 26
block                : 1 17
compound_statement   : 18 43
empty                : 3 7 15 25 36 41 53 56 67
entire_variable      : 74 77
expression           : 31 39 42 46 47 48 59 76
factor               : 54 55 60
if_statement         : 44
index_range          : 10
indexed_variable     : 75
input_variable       : 34
input_variable2      : 34
multiplying_operator : 55
output_value         : 38
output_value2        : 38
procedure_declaration : 16
procedure_declaration_part : 2
procedure_identifier : 32
procedure_statement  : 27
program              : 0
read_statement       : 28
relational_operator  : 50
sign                 : 51
simple_expression    : 49 50 50
simple_expression2   : 51
simple_statement     : 20 21
simple_type          : 8 10
statement            : 19 21 22 24 46 47 47 48
statement3           : 
statement_part       : 2
structured_statement : 22 23
term                 : 51 52
term2                : 54
type                 : 5
type_identifier      : 12
variable             : 30 35 37 57
variable_declaration : 4
variable_declaration2 : 5 6
variable_declaration_part : 2 4
variable_identifier  : 78
while_statement      : 45
write_statement      : 29

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON block

    PROGRAM         shift and go to state 1

    program                        shift and go to state 2

state 1

    (1) program -> PROGRAM . ID SEMICOLON block

    ID              shift and go to state 3


state 2

    (0) S' -> program .



state 3

    (1) program -> PROGRAM ID . SEMICOLON block

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . block
    (2) block -> . variable_declaration_part procedure_declaration_part statement_part
    (3) variable_declaration_part -> . empty
    (4) variable_declaration_part -> . VAR variable_declaration SEMICOLON variable_declaration_part
    (80) empty -> .

    VAR             shift and go to state 6
    PROCEDURE       reduce using rule 80 (empty -> .)
    BEGIN           reduce using rule 80 (empty -> .)

    variable_declaration_part      shift and go to state 5
    block                          shift and go to state 8
    empty                          shift and go to state 7

state 5

    (2) block -> variable_declaration_part . procedure_declaration_part statement_part
    (15) procedure_declaration_part -> . empty
    (16) procedure_declaration_part -> . procedure_declaration
    (80) empty -> .
    (17) procedure_declaration -> . PROCEDURE ID SEMICOLON block

    BEGIN           reduce using rule 80 (empty -> .)
    PROCEDURE       shift and go to state 12

    procedure_declaration          shift and go to state 9
    empty                          shift and go to state 10
    procedure_declaration_part     shift and go to state 11

state 6

    (4) variable_declaration_part -> VAR . variable_declaration SEMICOLON variable_declaration_part
    (5) variable_declaration -> . ID variable_declaration2 COLON type

    ID              shift and go to state 13

    variable_declaration           shift and go to state 14

state 7

    (3) variable_declaration_part -> empty .

    PROCEDURE       reduce using rule 3 (variable_declaration_part -> empty .)
    BEGIN           reduce using rule 3 (variable_declaration_part -> empty .)


state 8

    (1) program -> PROGRAM ID SEMICOLON block .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON block .)


state 9

    (16) procedure_declaration_part -> procedure_declaration .

    BEGIN           reduce using rule 16 (procedure_declaration_part -> procedure_declaration .)


state 10

    (15) procedure_declaration_part -> empty .

    BEGIN           reduce using rule 15 (procedure_declaration_part -> empty .)


state 11

    (2) block -> variable_declaration_part procedure_declaration_part . statement_part
    (18) statement_part -> . compound_statement
    (19) compound_statement -> . BEGIN statement END DOT

    BEGIN           shift and go to state 15

    statement_part                 shift and go to state 17
    compound_statement             shift and go to state 16

state 12

    (17) procedure_declaration -> PROCEDURE . ID SEMICOLON block

    ID              shift and go to state 18


state 13

    (5) variable_declaration -> ID . variable_declaration2 COLON type
    (6) variable_declaration2 -> . COMMA ID variable_declaration2
    (7) variable_declaration2 -> . empty
    (80) empty -> .

    COMMA           shift and go to state 19
    COLON           reduce using rule 80 (empty -> .)

    variable_declaration2          shift and go to state 20
    empty                          shift and go to state 21

state 14

    (4) variable_declaration_part -> VAR variable_declaration . SEMICOLON variable_declaration_part

    SEMICOLON       shift and go to state 22


state 15

    (19) compound_statement -> BEGIN . statement END DOT
    (20) statement -> . simple_statement
    (21) statement -> . statement simple_statement
    (22) statement -> . statement structured_statement
    (23) statement -> . structured_statement
    (26) simple_statement -> . assignment_statement
    (27) simple_statement -> . procedure_statement
    (28) simple_statement -> . read_statement
    (29) simple_statement -> . write_statement
    (43) structured_statement -> . compound_statement
    (44) structured_statement -> . if_statement
    (45) structured_statement -> . while_statement
    (30) assignment_statement -> . variable
    (31) assignment_statement -> . expression
    (32) procedure_statement -> . procedure_identifier
    (34) read_statement -> . READ LPAREN input_variable input_variable2 RPAREN SEMICOLON
    (38) write_statement -> . WRITE LPAREN output_value output_value2 RPAREN SEMICOLON
    (19) compound_statement -> . BEGIN statement END DOT
    (46) if_statement -> . IF LPAREN expression RPAREN THEN statement
    (47) if_statement -> . IF LPAREN expression RPAREN THEN statement ELSE statement
    (48) while_statement -> . WHILE expression DO statement
    (74) variable -> . entire_variable
    (75) variable -> . indexed_variable
    (49) expression -> . simple_expression
    (50) expression -> . simple_expression relational_operator simple_expression
    (33) procedure_identifier -> . ID
    (78) entire_variable -> . variable_identifier
    (76) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (51) simple_expression -> . sign term simple_expression2
    (79) variable_identifier -> . ID
    (77) array_variable -> . entire_variable
    (65) sign -> . PLUS
    (66) sign -> . MINUS
    (67) sign -> . empty
    (80) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    READ            shift and go to state 24
    WRITE           shift and go to state 43
    BEGIN           shift and go to state 15
    IF              shift and go to state 46
    WHILE           shift and go to state 27
    ID              shift and go to state 45
    PLUS            shift and go to state 38
    MINUS           shift and go to state 30
    NUMBER          reduce using rule 80 (empty -> .)
    LPAREN          reduce using rule 80 (empty -> .)
    NOT             reduce using rule 80 (empty -> .)

  ! ID              [ reduce using rule 80 (empty -> .) ]

    indexed_variable               shift and go to state 23
    simple_statement               shift and go to state 25
    sign                           shift and go to state 26
    simple_expression              shift and go to state 28
    array_variable                 shift and go to state 29
    compound_statement             shift and go to state 31
    assignment_statement           shift and go to state 32
    procedure_statement            shift and go to state 33
    structured_statement           shift and go to state 34
    write_statement                shift and go to state 35
    entire_variable                shift and go to state 36
    while_statement                shift and go to state 37
    statement                      shift and go to state 39
    read_statement                 shift and go to state 40
    if_statement                   shift and go to state 41
    empty                          shift and go to state 42
    variable_identifier            shift and go to state 47
    variable                       shift and go to state 44
    procedure_identifier           shift and go to state 48
    expression                     shift and go to state 49

state 16

    (18) statement_part -> compound_statement .

    $end            reduce using rule 18 (statement_part -> compound_statement .)
    BEGIN           reduce using rule 18 (statement_part -> compound_statement .)


state 17

    (2) block -> variable_declaration_part procedure_declaration_part statement_part .

    BEGIN           reduce using rule 2 (block -> variable_declaration_part procedure_declaration_part statement_part .)
    $end            reduce using rule 2 (block -> variable_declaration_part procedure_declaration_part statement_part .)


state 18

    (17) procedure_declaration -> PROCEDURE ID . SEMICOLON block

    SEMICOLON       shift and go to state 50


state 19

    (6) variable_declaration2 -> COMMA . ID variable_declaration2

    ID              shift and go to state 51


state 20

    (5) variable_declaration -> ID variable_declaration2 . COLON type

    COLON           shift and go to state 52


state 21

    (7) variable_declaration2 -> empty .

    COLON           reduce using rule 7 (variable_declaration2 -> empty .)


state 22

    (4) variable_declaration_part -> VAR variable_declaration SEMICOLON . variable_declaration_part
    (3) variable_declaration_part -> . empty
    (4) variable_declaration_part -> . VAR variable_declaration SEMICOLON variable_declaration_part
    (80) empty -> .

    VAR             shift and go to state 6
    PROCEDURE       reduce using rule 80 (empty -> .)
    BEGIN           reduce using rule 80 (empty -> .)

    variable_declaration_part      shift and go to state 53
    empty                          shift and go to state 7

state 23

    (75) variable -> indexed_variable .

    END             reduce using rule 75 (variable -> indexed_variable .)
    READ            reduce using rule 75 (variable -> indexed_variable .)
    WRITE           reduce using rule 75 (variable -> indexed_variable .)
    BEGIN           reduce using rule 75 (variable -> indexed_variable .)
    IF              reduce using rule 75 (variable -> indexed_variable .)
    WHILE           reduce using rule 75 (variable -> indexed_variable .)
    ID              reduce using rule 75 (variable -> indexed_variable .)
    PLUS            reduce using rule 75 (variable -> indexed_variable .)
    MINUS           reduce using rule 75 (variable -> indexed_variable .)
    NUMBER          reduce using rule 75 (variable -> indexed_variable .)
    LPAREN          reduce using rule 75 (variable -> indexed_variable .)
    NOT             reduce using rule 75 (variable -> indexed_variable .)
    TIMES           reduce using rule 75 (variable -> indexed_variable .)
    DIV             reduce using rule 75 (variable -> indexed_variable .)
    AND             reduce using rule 75 (variable -> indexed_variable .)
    EQUAL           reduce using rule 75 (variable -> indexed_variable .)
    DISTINT         reduce using rule 75 (variable -> indexed_variable .)
    LESS            reduce using rule 75 (variable -> indexed_variable .)
    GREATER         reduce using rule 75 (variable -> indexed_variable .)
    DO              reduce using rule 75 (variable -> indexed_variable .)
    RPAREN          reduce using rule 75 (variable -> indexed_variable .)
    RBRACKET        reduce using rule 75 (variable -> indexed_variable .)
    COMMA           reduce using rule 75 (variable -> indexed_variable .)
    ELSE            reduce using rule 75 (variable -> indexed_variable .)
    OR              reduce using rule 75 (variable -> indexed_variable .)


state 24

    (34) read_statement -> READ . LPAREN input_variable input_variable2 RPAREN SEMICOLON

    LPAREN          shift and go to state 54


state 25

    (20) statement -> simple_statement .

    READ            reduce using rule 20 (statement -> simple_statement .)
    WRITE           reduce using rule 20 (statement -> simple_statement .)
    BEGIN           reduce using rule 20 (statement -> simple_statement .)
    IF              reduce using rule 20 (statement -> simple_statement .)
    WHILE           reduce using rule 20 (statement -> simple_statement .)
    ID              reduce using rule 20 (statement -> simple_statement .)
    PLUS            reduce using rule 20 (statement -> simple_statement .)
    MINUS           reduce using rule 20 (statement -> simple_statement .)
    NUMBER          reduce using rule 20 (statement -> simple_statement .)
    LPAREN          reduce using rule 20 (statement -> simple_statement .)
    NOT             reduce using rule 20 (statement -> simple_statement .)
    END             reduce using rule 20 (statement -> simple_statement .)
    ELSE            reduce using rule 20 (statement -> simple_statement .)


state 26

    (51) simple_expression -> sign . term simple_expression2
    (54) term -> . factor term2
    (57) factor -> . variable
    (58) factor -> . NUMBER
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . NOT factor
    (74) variable -> . entire_variable
    (75) variable -> . indexed_variable
    (78) entire_variable -> . variable_identifier
    (76) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (79) variable_identifier -> . ID
    (77) array_variable -> . entire_variable

    NUMBER          shift and go to state 56
    LPAREN          shift and go to state 58
    NOT             shift and go to state 57
    ID              shift and go to state 61

    term                           shift and go to state 55
    indexed_variable               shift and go to state 23
    variable_identifier            shift and go to state 47
    entire_variable                shift and go to state 36
    factor                         shift and go to state 59
    variable                       shift and go to state 60
    array_variable                 shift and go to state 29

state 27

    (48) while_statement -> WHILE . expression DO statement
    (49) expression -> . simple_expression
    (50) expression -> . simple_expression relational_operator simple_expression
    (51) simple_expression -> . sign term simple_expression2
    (65) sign -> . PLUS
    (66) sign -> . MINUS
    (67) sign -> . empty
    (80) empty -> .

    PLUS            shift and go to state 38
    MINUS           shift and go to state 30
    NUMBER          reduce using rule 80 (empty -> .)
    LPAREN          reduce using rule 80 (empty -> .)
    NOT             reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)

    sign                           shift and go to state 26
    simple_expression              shift and go to state 28
    expression                     shift and go to state 62
    empty                          shift and go to state 42

state 28

    (49) expression -> simple_expression .
    (50) expression -> simple_expression . relational_operator simple_expression
    (61) relational_operator -> . EQUAL
    (62) relational_operator -> . DISTINT
    (63) relational_operator -> . LESS
    (64) relational_operator -> . GREATER

    RPAREN          reduce using rule 49 (expression -> simple_expression .)
    RBRACKET        reduce using rule 49 (expression -> simple_expression .)
    READ            reduce using rule 49 (expression -> simple_expression .)
    WRITE           reduce using rule 49 (expression -> simple_expression .)
    BEGIN           reduce using rule 49 (expression -> simple_expression .)
    IF              reduce using rule 49 (expression -> simple_expression .)
    WHILE           reduce using rule 49 (expression -> simple_expression .)
    ID              reduce using rule 49 (expression -> simple_expression .)
    PLUS            reduce using rule 49 (expression -> simple_expression .)
    MINUS           reduce using rule 49 (expression -> simple_expression .)
    NUMBER          reduce using rule 49 (expression -> simple_expression .)
    LPAREN          reduce using rule 49 (expression -> simple_expression .)
    NOT             reduce using rule 49 (expression -> simple_expression .)
    END             reduce using rule 49 (expression -> simple_expression .)
    ELSE            reduce using rule 49 (expression -> simple_expression .)
    COMMA           reduce using rule 49 (expression -> simple_expression .)
    DO              reduce using rule 49 (expression -> simple_expression .)
    EQUAL           shift and go to state 66
    DISTINT         shift and go to state 65
    LESS            shift and go to state 64
    GREATER         shift and go to state 67

    relational_operator            shift and go to state 63

state 29

    (76) indexed_variable -> array_variable . LBRACKET expression RBRACKET

    LBRACKET        shift and go to state 68


state 30

    (66) sign -> MINUS .

    NUMBER          reduce using rule 66 (sign -> MINUS .)
    LPAREN          reduce using rule 66 (sign -> MINUS .)
    NOT             reduce using rule 66 (sign -> MINUS .)
    ID              reduce using rule 66 (sign -> MINUS .)


state 31

    (43) structured_statement -> compound_statement .

    READ            reduce using rule 43 (structured_statement -> compound_statement .)
    WRITE           reduce using rule 43 (structured_statement -> compound_statement .)
    BEGIN           reduce using rule 43 (structured_statement -> compound_statement .)
    IF              reduce using rule 43 (structured_statement -> compound_statement .)
    WHILE           reduce using rule 43 (structured_statement -> compound_statement .)
    ID              reduce using rule 43 (structured_statement -> compound_statement .)
    PLUS            reduce using rule 43 (structured_statement -> compound_statement .)
    MINUS           reduce using rule 43 (structured_statement -> compound_statement .)
    NUMBER          reduce using rule 43 (structured_statement -> compound_statement .)
    LPAREN          reduce using rule 43 (structured_statement -> compound_statement .)
    NOT             reduce using rule 43 (structured_statement -> compound_statement .)
    END             reduce using rule 43 (structured_statement -> compound_statement .)
    ELSE            reduce using rule 43 (structured_statement -> compound_statement .)


state 32

    (26) simple_statement -> assignment_statement .

    READ            reduce using rule 26 (simple_statement -> assignment_statement .)
    WRITE           reduce using rule 26 (simple_statement -> assignment_statement .)
    BEGIN           reduce using rule 26 (simple_statement -> assignment_statement .)
    IF              reduce using rule 26 (simple_statement -> assignment_statement .)
    WHILE           reduce using rule 26 (simple_statement -> assignment_statement .)
    ID              reduce using rule 26 (simple_statement -> assignment_statement .)
    PLUS            reduce using rule 26 (simple_statement -> assignment_statement .)
    MINUS           reduce using rule 26 (simple_statement -> assignment_statement .)
    NUMBER          reduce using rule 26 (simple_statement -> assignment_statement .)
    LPAREN          reduce using rule 26 (simple_statement -> assignment_statement .)
    NOT             reduce using rule 26 (simple_statement -> assignment_statement .)
    END             reduce using rule 26 (simple_statement -> assignment_statement .)
    ELSE            reduce using rule 26 (simple_statement -> assignment_statement .)


state 33

    (27) simple_statement -> procedure_statement .

    READ            reduce using rule 27 (simple_statement -> procedure_statement .)
    WRITE           reduce using rule 27 (simple_statement -> procedure_statement .)
    BEGIN           reduce using rule 27 (simple_statement -> procedure_statement .)
    IF              reduce using rule 27 (simple_statement -> procedure_statement .)
    WHILE           reduce using rule 27 (simple_statement -> procedure_statement .)
    ID              reduce using rule 27 (simple_statement -> procedure_statement .)
    PLUS            reduce using rule 27 (simple_statement -> procedure_statement .)
    MINUS           reduce using rule 27 (simple_statement -> procedure_statement .)
    NUMBER          reduce using rule 27 (simple_statement -> procedure_statement .)
    LPAREN          reduce using rule 27 (simple_statement -> procedure_statement .)
    NOT             reduce using rule 27 (simple_statement -> procedure_statement .)
    END             reduce using rule 27 (simple_statement -> procedure_statement .)
    ELSE            reduce using rule 27 (simple_statement -> procedure_statement .)


state 34

    (23) statement -> structured_statement .

    READ            reduce using rule 23 (statement -> structured_statement .)
    WRITE           reduce using rule 23 (statement -> structured_statement .)
    BEGIN           reduce using rule 23 (statement -> structured_statement .)
    IF              reduce using rule 23 (statement -> structured_statement .)
    WHILE           reduce using rule 23 (statement -> structured_statement .)
    ID              reduce using rule 23 (statement -> structured_statement .)
    PLUS            reduce using rule 23 (statement -> structured_statement .)
    MINUS           reduce using rule 23 (statement -> structured_statement .)
    NUMBER          reduce using rule 23 (statement -> structured_statement .)
    LPAREN          reduce using rule 23 (statement -> structured_statement .)
    NOT             reduce using rule 23 (statement -> structured_statement .)
    END             reduce using rule 23 (statement -> structured_statement .)
    ELSE            reduce using rule 23 (statement -> structured_statement .)


state 35

    (29) simple_statement -> write_statement .

    READ            reduce using rule 29 (simple_statement -> write_statement .)
    WRITE           reduce using rule 29 (simple_statement -> write_statement .)
    BEGIN           reduce using rule 29 (simple_statement -> write_statement .)
    IF              reduce using rule 29 (simple_statement -> write_statement .)
    WHILE           reduce using rule 29 (simple_statement -> write_statement .)
    ID              reduce using rule 29 (simple_statement -> write_statement .)
    PLUS            reduce using rule 29 (simple_statement -> write_statement .)
    MINUS           reduce using rule 29 (simple_statement -> write_statement .)
    NUMBER          reduce using rule 29 (simple_statement -> write_statement .)
    LPAREN          reduce using rule 29 (simple_statement -> write_statement .)
    NOT             reduce using rule 29 (simple_statement -> write_statement .)
    END             reduce using rule 29 (simple_statement -> write_statement .)
    ELSE            reduce using rule 29 (simple_statement -> write_statement .)


state 36

    (74) variable -> entire_variable .
    (77) array_variable -> entire_variable .

    END             reduce using rule 74 (variable -> entire_variable .)
    READ            reduce using rule 74 (variable -> entire_variable .)
    WRITE           reduce using rule 74 (variable -> entire_variable .)
    BEGIN           reduce using rule 74 (variable -> entire_variable .)
    IF              reduce using rule 74 (variable -> entire_variable .)
    WHILE           reduce using rule 74 (variable -> entire_variable .)
    ID              reduce using rule 74 (variable -> entire_variable .)
    PLUS            reduce using rule 74 (variable -> entire_variable .)
    MINUS           reduce using rule 74 (variable -> entire_variable .)
    NUMBER          reduce using rule 74 (variable -> entire_variable .)
    LPAREN          reduce using rule 74 (variable -> entire_variable .)
    NOT             reduce using rule 74 (variable -> entire_variable .)
    TIMES           reduce using rule 74 (variable -> entire_variable .)
    DIV             reduce using rule 74 (variable -> entire_variable .)
    AND             reduce using rule 74 (variable -> entire_variable .)
    EQUAL           reduce using rule 74 (variable -> entire_variable .)
    DISTINT         reduce using rule 74 (variable -> entire_variable .)
    LESS            reduce using rule 74 (variable -> entire_variable .)
    GREATER         reduce using rule 74 (variable -> entire_variable .)
    DO              reduce using rule 74 (variable -> entire_variable .)
    RPAREN          reduce using rule 74 (variable -> entire_variable .)
    RBRACKET        reduce using rule 74 (variable -> entire_variable .)
    COMMA           reduce using rule 74 (variable -> entire_variable .)
    ELSE            reduce using rule 74 (variable -> entire_variable .)
    OR              reduce using rule 74 (variable -> entire_variable .)
    LBRACKET        reduce using rule 77 (array_variable -> entire_variable .)


state 37

    (45) structured_statement -> while_statement .

    READ            reduce using rule 45 (structured_statement -> while_statement .)
    WRITE           reduce using rule 45 (structured_statement -> while_statement .)
    BEGIN           reduce using rule 45 (structured_statement -> while_statement .)
    IF              reduce using rule 45 (structured_statement -> while_statement .)
    WHILE           reduce using rule 45 (structured_statement -> while_statement .)
    ID              reduce using rule 45 (structured_statement -> while_statement .)
    PLUS            reduce using rule 45 (structured_statement -> while_statement .)
    MINUS           reduce using rule 45 (structured_statement -> while_statement .)
    NUMBER          reduce using rule 45 (structured_statement -> while_statement .)
    LPAREN          reduce using rule 45 (structured_statement -> while_statement .)
    NOT             reduce using rule 45 (structured_statement -> while_statement .)
    END             reduce using rule 45 (structured_statement -> while_statement .)
    ELSE            reduce using rule 45 (structured_statement -> while_statement .)


state 38

    (65) sign -> PLUS .

    NUMBER          reduce using rule 65 (sign -> PLUS .)
    LPAREN          reduce using rule 65 (sign -> PLUS .)
    NOT             reduce using rule 65 (sign -> PLUS .)
    ID              reduce using rule 65 (sign -> PLUS .)


state 39

    (19) compound_statement -> BEGIN statement . END DOT
    (21) statement -> statement . simple_statement
    (22) statement -> statement . structured_statement
    (26) simple_statement -> . assignment_statement
    (27) simple_statement -> . procedure_statement
    (28) simple_statement -> . read_statement
    (29) simple_statement -> . write_statement
    (43) structured_statement -> . compound_statement
    (44) structured_statement -> . if_statement
    (45) structured_statement -> . while_statement
    (30) assignment_statement -> . variable
    (31) assignment_statement -> . expression
    (32) procedure_statement -> . procedure_identifier
    (34) read_statement -> . READ LPAREN input_variable input_variable2 RPAREN SEMICOLON
    (38) write_statement -> . WRITE LPAREN output_value output_value2 RPAREN SEMICOLON
    (19) compound_statement -> . BEGIN statement END DOT
    (46) if_statement -> . IF LPAREN expression RPAREN THEN statement
    (47) if_statement -> . IF LPAREN expression RPAREN THEN statement ELSE statement
    (48) while_statement -> . WHILE expression DO statement
    (74) variable -> . entire_variable
    (75) variable -> . indexed_variable
    (49) expression -> . simple_expression
    (50) expression -> . simple_expression relational_operator simple_expression
    (33) procedure_identifier -> . ID
    (78) entire_variable -> . variable_identifier
    (76) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (51) simple_expression -> . sign term simple_expression2
    (79) variable_identifier -> . ID
    (77) array_variable -> . entire_variable
    (65) sign -> . PLUS
    (66) sign -> . MINUS
    (67) sign -> . empty
    (80) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    END             shift and go to state 71
    READ            shift and go to state 24
    WRITE           shift and go to state 43
    BEGIN           shift and go to state 15
    IF              shift and go to state 46
    WHILE           shift and go to state 27
    ID              shift and go to state 45
    PLUS            shift and go to state 38
    MINUS           shift and go to state 30
    NUMBER          reduce using rule 80 (empty -> .)
    LPAREN          reduce using rule 80 (empty -> .)
    NOT             reduce using rule 80 (empty -> .)

  ! ID              [ reduce using rule 80 (empty -> .) ]

    indexed_variable               shift and go to state 23
    simple_statement               shift and go to state 69
    sign                           shift and go to state 26
    simple_expression              shift and go to state 28
    array_variable                 shift and go to state 29
    compound_statement             shift and go to state 31
    assignment_statement           shift and go to state 32
    procedure_statement            shift and go to state 33
    structured_statement           shift and go to state 70
    write_statement                shift and go to state 35
    entire_variable                shift and go to state 36
    while_statement                shift and go to state 37
    read_statement                 shift and go to state 40
    if_statement                   shift and go to state 41
    empty                          shift and go to state 42
    variable_identifier            shift and go to state 47
    variable                       shift and go to state 44
    procedure_identifier           shift and go to state 48
    expression                     shift and go to state 49

state 40

    (28) simple_statement -> read_statement .

    READ            reduce using rule 28 (simple_statement -> read_statement .)
    WRITE           reduce using rule 28 (simple_statement -> read_statement .)
    BEGIN           reduce using rule 28 (simple_statement -> read_statement .)
    IF              reduce using rule 28 (simple_statement -> read_statement .)
    WHILE           reduce using rule 28 (simple_statement -> read_statement .)
    ID              reduce using rule 28 (simple_statement -> read_statement .)
    PLUS            reduce using rule 28 (simple_statement -> read_statement .)
    MINUS           reduce using rule 28 (simple_statement -> read_statement .)
    NUMBER          reduce using rule 28 (simple_statement -> read_statement .)
    LPAREN          reduce using rule 28 (simple_statement -> read_statement .)
    NOT             reduce using rule 28 (simple_statement -> read_statement .)
    END             reduce using rule 28 (simple_statement -> read_statement .)
    ELSE            reduce using rule 28 (simple_statement -> read_statement .)


state 41

    (44) structured_statement -> if_statement .

    READ            reduce using rule 44 (structured_statement -> if_statement .)
    WRITE           reduce using rule 44 (structured_statement -> if_statement .)
    BEGIN           reduce using rule 44 (structured_statement -> if_statement .)
    IF              reduce using rule 44 (structured_statement -> if_statement .)
    WHILE           reduce using rule 44 (structured_statement -> if_statement .)
    ID              reduce using rule 44 (structured_statement -> if_statement .)
    PLUS            reduce using rule 44 (structured_statement -> if_statement .)
    MINUS           reduce using rule 44 (structured_statement -> if_statement .)
    NUMBER          reduce using rule 44 (structured_statement -> if_statement .)
    LPAREN          reduce using rule 44 (structured_statement -> if_statement .)
    NOT             reduce using rule 44 (structured_statement -> if_statement .)
    END             reduce using rule 44 (structured_statement -> if_statement .)
    ELSE            reduce using rule 44 (structured_statement -> if_statement .)


state 42

    (67) sign -> empty .

    NUMBER          reduce using rule 67 (sign -> empty .)
    LPAREN          reduce using rule 67 (sign -> empty .)
    NOT             reduce using rule 67 (sign -> empty .)
    ID              reduce using rule 67 (sign -> empty .)


state 43

    (38) write_statement -> WRITE . LPAREN output_value output_value2 RPAREN SEMICOLON

    LPAREN          shift and go to state 72


state 44

    (30) assignment_statement -> variable .

    READ            reduce using rule 30 (assignment_statement -> variable .)
    WRITE           reduce using rule 30 (assignment_statement -> variable .)
    BEGIN           reduce using rule 30 (assignment_statement -> variable .)
    IF              reduce using rule 30 (assignment_statement -> variable .)
    WHILE           reduce using rule 30 (assignment_statement -> variable .)
    ID              reduce using rule 30 (assignment_statement -> variable .)
    PLUS            reduce using rule 30 (assignment_statement -> variable .)
    MINUS           reduce using rule 30 (assignment_statement -> variable .)
    NUMBER          reduce using rule 30 (assignment_statement -> variable .)
    LPAREN          reduce using rule 30 (assignment_statement -> variable .)
    NOT             reduce using rule 30 (assignment_statement -> variable .)
    END             reduce using rule 30 (assignment_statement -> variable .)
    ELSE            reduce using rule 30 (assignment_statement -> variable .)


state 45

    (33) procedure_identifier -> ID .
    (79) variable_identifier -> ID .

  ! reduce/reduce conflict for READ resolved using rule 33 (procedure_identifier -> ID .)
  ! reduce/reduce conflict for WRITE resolved using rule 33 (procedure_identifier -> ID .)
  ! reduce/reduce conflict for BEGIN resolved using rule 33 (procedure_identifier -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 33 (procedure_identifier -> ID .)
  ! reduce/reduce conflict for WHILE resolved using rule 33 (procedure_identifier -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 33 (procedure_identifier -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 33 (procedure_identifier -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 33 (procedure_identifier -> ID .)
  ! reduce/reduce conflict for NUMBER resolved using rule 33 (procedure_identifier -> ID .)
  ! reduce/reduce conflict for LPAREN resolved using rule 33 (procedure_identifier -> ID .)
  ! reduce/reduce conflict for NOT resolved using rule 33 (procedure_identifier -> ID .)
  ! reduce/reduce conflict for END resolved using rule 33 (procedure_identifier -> ID .)
  ! reduce/reduce conflict for ELSE resolved using rule 33 (procedure_identifier -> ID .)
    READ            reduce using rule 33 (procedure_identifier -> ID .)
    WRITE           reduce using rule 33 (procedure_identifier -> ID .)
    BEGIN           reduce using rule 33 (procedure_identifier -> ID .)
    IF              reduce using rule 33 (procedure_identifier -> ID .)
    WHILE           reduce using rule 33 (procedure_identifier -> ID .)
    ID              reduce using rule 33 (procedure_identifier -> ID .)
    PLUS            reduce using rule 33 (procedure_identifier -> ID .)
    MINUS           reduce using rule 33 (procedure_identifier -> ID .)
    NUMBER          reduce using rule 33 (procedure_identifier -> ID .)
    LPAREN          reduce using rule 33 (procedure_identifier -> ID .)
    NOT             reduce using rule 33 (procedure_identifier -> ID .)
    END             reduce using rule 33 (procedure_identifier -> ID .)
    ELSE            reduce using rule 33 (procedure_identifier -> ID .)
    LBRACKET        reduce using rule 79 (variable_identifier -> ID .)

  ! READ            [ reduce using rule 79 (variable_identifier -> ID .) ]
  ! WRITE           [ reduce using rule 79 (variable_identifier -> ID .) ]
  ! BEGIN           [ reduce using rule 79 (variable_identifier -> ID .) ]
  ! IF              [ reduce using rule 79 (variable_identifier -> ID .) ]
  ! WHILE           [ reduce using rule 79 (variable_identifier -> ID .) ]
  ! ID              [ reduce using rule 79 (variable_identifier -> ID .) ]
  ! PLUS            [ reduce using rule 79 (variable_identifier -> ID .) ]
  ! MINUS           [ reduce using rule 79 (variable_identifier -> ID .) ]
  ! NUMBER          [ reduce using rule 79 (variable_identifier -> ID .) ]
  ! LPAREN          [ reduce using rule 79 (variable_identifier -> ID .) ]
  ! NOT             [ reduce using rule 79 (variable_identifier -> ID .) ]
  ! END             [ reduce using rule 79 (variable_identifier -> ID .) ]
  ! ELSE            [ reduce using rule 79 (variable_identifier -> ID .) ]


state 46

    (46) if_statement -> IF . LPAREN expression RPAREN THEN statement
    (47) if_statement -> IF . LPAREN expression RPAREN THEN statement ELSE statement

    LPAREN          shift and go to state 73


state 47

    (78) entire_variable -> variable_identifier .

    TIMES           reduce using rule 78 (entire_variable -> variable_identifier .)
    DIV             reduce using rule 78 (entire_variable -> variable_identifier .)
    AND             reduce using rule 78 (entire_variable -> variable_identifier .)
    PLUS            reduce using rule 78 (entire_variable -> variable_identifier .)
    MINUS           reduce using rule 78 (entire_variable -> variable_identifier .)
    OR              reduce using rule 78 (entire_variable -> variable_identifier .)
    EQUAL           reduce using rule 78 (entire_variable -> variable_identifier .)
    DISTINT         reduce using rule 78 (entire_variable -> variable_identifier .)
    LESS            reduce using rule 78 (entire_variable -> variable_identifier .)
    GREATER         reduce using rule 78 (entire_variable -> variable_identifier .)
    END             reduce using rule 78 (entire_variable -> variable_identifier .)
    READ            reduce using rule 78 (entire_variable -> variable_identifier .)
    WRITE           reduce using rule 78 (entire_variable -> variable_identifier .)
    BEGIN           reduce using rule 78 (entire_variable -> variable_identifier .)
    IF              reduce using rule 78 (entire_variable -> variable_identifier .)
    WHILE           reduce using rule 78 (entire_variable -> variable_identifier .)
    ID              reduce using rule 78 (entire_variable -> variable_identifier .)
    NUMBER          reduce using rule 78 (entire_variable -> variable_identifier .)
    LPAREN          reduce using rule 78 (entire_variable -> variable_identifier .)
    NOT             reduce using rule 78 (entire_variable -> variable_identifier .)
    DO              reduce using rule 78 (entire_variable -> variable_identifier .)
    RPAREN          reduce using rule 78 (entire_variable -> variable_identifier .)
    RBRACKET        reduce using rule 78 (entire_variable -> variable_identifier .)
    COMMA           reduce using rule 78 (entire_variable -> variable_identifier .)
    ELSE            reduce using rule 78 (entire_variable -> variable_identifier .)
    LBRACKET        reduce using rule 78 (entire_variable -> variable_identifier .)


state 48

    (32) procedure_statement -> procedure_identifier .

    END             reduce using rule 32 (procedure_statement -> procedure_identifier .)
    READ            reduce using rule 32 (procedure_statement -> procedure_identifier .)
    WRITE           reduce using rule 32 (procedure_statement -> procedure_identifier .)
    BEGIN           reduce using rule 32 (procedure_statement -> procedure_identifier .)
    IF              reduce using rule 32 (procedure_statement -> procedure_identifier .)
    WHILE           reduce using rule 32 (procedure_statement -> procedure_identifier .)
    ID              reduce using rule 32 (procedure_statement -> procedure_identifier .)
    PLUS            reduce using rule 32 (procedure_statement -> procedure_identifier .)
    MINUS           reduce using rule 32 (procedure_statement -> procedure_identifier .)
    NUMBER          reduce using rule 32 (procedure_statement -> procedure_identifier .)
    LPAREN          reduce using rule 32 (procedure_statement -> procedure_identifier .)
    NOT             reduce using rule 32 (procedure_statement -> procedure_identifier .)
    ELSE            reduce using rule 32 (procedure_statement -> procedure_identifier .)


state 49

    (31) assignment_statement -> expression .

    READ            reduce using rule 31 (assignment_statement -> expression .)
    WRITE           reduce using rule 31 (assignment_statement -> expression .)
    BEGIN           reduce using rule 31 (assignment_statement -> expression .)
    IF              reduce using rule 31 (assignment_statement -> expression .)
    WHILE           reduce using rule 31 (assignment_statement -> expression .)
    ID              reduce using rule 31 (assignment_statement -> expression .)
    PLUS            reduce using rule 31 (assignment_statement -> expression .)
    MINUS           reduce using rule 31 (assignment_statement -> expression .)
    NUMBER          reduce using rule 31 (assignment_statement -> expression .)
    LPAREN          reduce using rule 31 (assignment_statement -> expression .)
    NOT             reduce using rule 31 (assignment_statement -> expression .)
    END             reduce using rule 31 (assignment_statement -> expression .)
    ELSE            reduce using rule 31 (assignment_statement -> expression .)


state 50

    (17) procedure_declaration -> PROCEDURE ID SEMICOLON . block
    (2) block -> . variable_declaration_part procedure_declaration_part statement_part
    (3) variable_declaration_part -> . empty
    (4) variable_declaration_part -> . VAR variable_declaration SEMICOLON variable_declaration_part
    (80) empty -> .

    VAR             shift and go to state 6
    PROCEDURE       reduce using rule 80 (empty -> .)
    BEGIN           reduce using rule 80 (empty -> .)

    variable_declaration_part      shift and go to state 5
    block                          shift and go to state 74
    empty                          shift and go to state 7

state 51

    (6) variable_declaration2 -> COMMA ID . variable_declaration2
    (6) variable_declaration2 -> . COMMA ID variable_declaration2
    (7) variable_declaration2 -> . empty
    (80) empty -> .

    COMMA           shift and go to state 19
    COLON           reduce using rule 80 (empty -> .)

    variable_declaration2          shift and go to state 75
    empty                          shift and go to state 21

state 52

    (5) variable_declaration -> ID variable_declaration2 COLON . type
    (8) type -> . simple_type
    (9) type -> . array_type
    (12) simple_type -> . type_identifier
    (10) array_type -> . ARRAY LBRACKET index_range RBRACKET OF simple_type
    (13) type_identifier -> . INTEGER
    (14) type_identifier -> . CHAR

    ARRAY           shift and go to state 81
    INTEGER         shift and go to state 80
    CHAR            shift and go to state 82

    type_identifier                shift and go to state 76
    simple_type                    shift and go to state 77
    array_type                     shift and go to state 79
    type                           shift and go to state 78

state 53

    (4) variable_declaration_part -> VAR variable_declaration SEMICOLON variable_declaration_part .

    PROCEDURE       reduce using rule 4 (variable_declaration_part -> VAR variable_declaration SEMICOLON variable_declaration_part .)
    BEGIN           reduce using rule 4 (variable_declaration_part -> VAR variable_declaration SEMICOLON variable_declaration_part .)


state 54

    (34) read_statement -> READ LPAREN . input_variable input_variable2 RPAREN SEMICOLON
    (35) input_variable -> . variable
    (74) variable -> . entire_variable
    (75) variable -> . indexed_variable
    (78) entire_variable -> . variable_identifier
    (76) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (79) variable_identifier -> . ID
    (77) array_variable -> . entire_variable

    ID              shift and go to state 61

    indexed_variable               shift and go to state 23
    variable_identifier            shift and go to state 47
    entire_variable                shift and go to state 36
    variable                       shift and go to state 83
    array_variable                 shift and go to state 29
    input_variable                 shift and go to state 84

state 55

    (51) simple_expression -> sign term . simple_expression2
    (52) simple_expression2 -> . adding_operator term
    (53) simple_expression2 -> . empty
    (68) adding_operator -> . PLUS
    (69) adding_operator -> . MINUS
    (70) adding_operator -> . OR
    (80) empty -> .

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 86
    MINUS           shift and go to state 88
    OR              shift and go to state 90
    EQUAL           reduce using rule 80 (empty -> .)
    DISTINT         reduce using rule 80 (empty -> .)
    LESS            reduce using rule 80 (empty -> .)
    GREATER         reduce using rule 80 (empty -> .)
    END             reduce using rule 80 (empty -> .)
    READ            reduce using rule 80 (empty -> .)
    WRITE           reduce using rule 80 (empty -> .)
    BEGIN           reduce using rule 80 (empty -> .)
    IF              reduce using rule 80 (empty -> .)
    WHILE           reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)
    NUMBER          reduce using rule 80 (empty -> .)
    LPAREN          reduce using rule 80 (empty -> .)
    NOT             reduce using rule 80 (empty -> .)
    DO              reduce using rule 80 (empty -> .)
    RPAREN          reduce using rule 80 (empty -> .)
    RBRACKET        reduce using rule 80 (empty -> .)
    COMMA           reduce using rule 80 (empty -> .)
    ELSE            reduce using rule 80 (empty -> .)

  ! PLUS            [ reduce using rule 80 (empty -> .) ]
  ! MINUS           [ reduce using rule 80 (empty -> .) ]

    simple_expression2             shift and go to state 85
    adding_operator                shift and go to state 87
    empty                          shift and go to state 89

state 56

    (58) factor -> NUMBER .

    PLUS            reduce using rule 58 (factor -> NUMBER .)
    MINUS           reduce using rule 58 (factor -> NUMBER .)
    OR              reduce using rule 58 (factor -> NUMBER .)
    EQUAL           reduce using rule 58 (factor -> NUMBER .)
    DISTINT         reduce using rule 58 (factor -> NUMBER .)
    LESS            reduce using rule 58 (factor -> NUMBER .)
    GREATER         reduce using rule 58 (factor -> NUMBER .)
    END             reduce using rule 58 (factor -> NUMBER .)
    READ            reduce using rule 58 (factor -> NUMBER .)
    WRITE           reduce using rule 58 (factor -> NUMBER .)
    BEGIN           reduce using rule 58 (factor -> NUMBER .)
    IF              reduce using rule 58 (factor -> NUMBER .)
    WHILE           reduce using rule 58 (factor -> NUMBER .)
    ID              reduce using rule 58 (factor -> NUMBER .)
    NUMBER          reduce using rule 58 (factor -> NUMBER .)
    LPAREN          reduce using rule 58 (factor -> NUMBER .)
    NOT             reduce using rule 58 (factor -> NUMBER .)
    DO              reduce using rule 58 (factor -> NUMBER .)
    RPAREN          reduce using rule 58 (factor -> NUMBER .)
    RBRACKET        reduce using rule 58 (factor -> NUMBER .)
    COMMA           reduce using rule 58 (factor -> NUMBER .)
    ELSE            reduce using rule 58 (factor -> NUMBER .)
    TIMES           reduce using rule 58 (factor -> NUMBER .)
    DIV             reduce using rule 58 (factor -> NUMBER .)
    AND             reduce using rule 58 (factor -> NUMBER .)


state 57

    (60) factor -> NOT . factor
    (57) factor -> . variable
    (58) factor -> . NUMBER
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . NOT factor
    (74) variable -> . entire_variable
    (75) variable -> . indexed_variable
    (78) entire_variable -> . variable_identifier
    (76) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (79) variable_identifier -> . ID
    (77) array_variable -> . entire_variable

    NUMBER          shift and go to state 56
    LPAREN          shift and go to state 58
    NOT             shift and go to state 57
    ID              shift and go to state 61

    indexed_variable               shift and go to state 23
    variable_identifier            shift and go to state 47
    entire_variable                shift and go to state 36
    factor                         shift and go to state 91
    variable                       shift and go to state 60
    array_variable                 shift and go to state 29

state 58

    (59) factor -> LPAREN . expression RPAREN
    (49) expression -> . simple_expression
    (50) expression -> . simple_expression relational_operator simple_expression
    (51) simple_expression -> . sign term simple_expression2
    (65) sign -> . PLUS
    (66) sign -> . MINUS
    (67) sign -> . empty
    (80) empty -> .

    PLUS            shift and go to state 38
    MINUS           shift and go to state 30
    NUMBER          reduce using rule 80 (empty -> .)
    LPAREN          reduce using rule 80 (empty -> .)
    NOT             reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)

    sign                           shift and go to state 26
    simple_expression              shift and go to state 28
    expression                     shift and go to state 92
    empty                          shift and go to state 42

state 59

    (54) term -> factor . term2
    (55) term2 -> . multiplying_operator factor
    (56) term2 -> . empty
    (71) multiplying_operator -> . TIMES
    (72) multiplying_operator -> . DIV
    (73) multiplying_operator -> . AND
    (80) empty -> .

    TIMES           shift and go to state 95
    DIV             shift and go to state 96
    AND             shift and go to state 93
    PLUS            reduce using rule 80 (empty -> .)
    MINUS           reduce using rule 80 (empty -> .)
    OR              reduce using rule 80 (empty -> .)
    EQUAL           reduce using rule 80 (empty -> .)
    DISTINT         reduce using rule 80 (empty -> .)
    LESS            reduce using rule 80 (empty -> .)
    GREATER         reduce using rule 80 (empty -> .)
    END             reduce using rule 80 (empty -> .)
    READ            reduce using rule 80 (empty -> .)
    WRITE           reduce using rule 80 (empty -> .)
    BEGIN           reduce using rule 80 (empty -> .)
    IF              reduce using rule 80 (empty -> .)
    WHILE           reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)
    NUMBER          reduce using rule 80 (empty -> .)
    LPAREN          reduce using rule 80 (empty -> .)
    NOT             reduce using rule 80 (empty -> .)
    DO              reduce using rule 80 (empty -> .)
    RPAREN          reduce using rule 80 (empty -> .)
    RBRACKET        reduce using rule 80 (empty -> .)
    COMMA           reduce using rule 80 (empty -> .)
    ELSE            reduce using rule 80 (empty -> .)

    multiplying_operator           shift and go to state 97
    term2                          shift and go to state 94
    empty                          shift and go to state 98

state 60

    (57) factor -> variable .

    PLUS            reduce using rule 57 (factor -> variable .)
    MINUS           reduce using rule 57 (factor -> variable .)
    OR              reduce using rule 57 (factor -> variable .)
    EQUAL           reduce using rule 57 (factor -> variable .)
    DISTINT         reduce using rule 57 (factor -> variable .)
    LESS            reduce using rule 57 (factor -> variable .)
    GREATER         reduce using rule 57 (factor -> variable .)
    END             reduce using rule 57 (factor -> variable .)
    READ            reduce using rule 57 (factor -> variable .)
    WRITE           reduce using rule 57 (factor -> variable .)
    BEGIN           reduce using rule 57 (factor -> variable .)
    IF              reduce using rule 57 (factor -> variable .)
    WHILE           reduce using rule 57 (factor -> variable .)
    ID              reduce using rule 57 (factor -> variable .)
    NUMBER          reduce using rule 57 (factor -> variable .)
    LPAREN          reduce using rule 57 (factor -> variable .)
    NOT             reduce using rule 57 (factor -> variable .)
    DO              reduce using rule 57 (factor -> variable .)
    RPAREN          reduce using rule 57 (factor -> variable .)
    RBRACKET        reduce using rule 57 (factor -> variable .)
    COMMA           reduce using rule 57 (factor -> variable .)
    ELSE            reduce using rule 57 (factor -> variable .)
    TIMES           reduce using rule 57 (factor -> variable .)
    DIV             reduce using rule 57 (factor -> variable .)
    AND             reduce using rule 57 (factor -> variable .)


state 61

    (79) variable_identifier -> ID .

    RPAREN          reduce using rule 79 (variable_identifier -> ID .)
    LBRACKET        reduce using rule 79 (variable_identifier -> ID .)
    COMMA           reduce using rule 79 (variable_identifier -> ID .)
    TIMES           reduce using rule 79 (variable_identifier -> ID .)
    DIV             reduce using rule 79 (variable_identifier -> ID .)
    AND             reduce using rule 79 (variable_identifier -> ID .)
    PLUS            reduce using rule 79 (variable_identifier -> ID .)
    MINUS           reduce using rule 79 (variable_identifier -> ID .)
    OR              reduce using rule 79 (variable_identifier -> ID .)
    EQUAL           reduce using rule 79 (variable_identifier -> ID .)
    DISTINT         reduce using rule 79 (variable_identifier -> ID .)
    LESS            reduce using rule 79 (variable_identifier -> ID .)
    GREATER         reduce using rule 79 (variable_identifier -> ID .)
    END             reduce using rule 79 (variable_identifier -> ID .)
    READ            reduce using rule 79 (variable_identifier -> ID .)
    WRITE           reduce using rule 79 (variable_identifier -> ID .)
    BEGIN           reduce using rule 79 (variable_identifier -> ID .)
    IF              reduce using rule 79 (variable_identifier -> ID .)
    WHILE           reduce using rule 79 (variable_identifier -> ID .)
    ID              reduce using rule 79 (variable_identifier -> ID .)
    NUMBER          reduce using rule 79 (variable_identifier -> ID .)
    LPAREN          reduce using rule 79 (variable_identifier -> ID .)
    NOT             reduce using rule 79 (variable_identifier -> ID .)
    DO              reduce using rule 79 (variable_identifier -> ID .)
    RBRACKET        reduce using rule 79 (variable_identifier -> ID .)
    ELSE            reduce using rule 79 (variable_identifier -> ID .)


state 62

    (48) while_statement -> WHILE expression . DO statement

    DO              shift and go to state 99


state 63

    (50) expression -> simple_expression relational_operator . simple_expression
    (51) simple_expression -> . sign term simple_expression2
    (65) sign -> . PLUS
    (66) sign -> . MINUS
    (67) sign -> . empty
    (80) empty -> .

    PLUS            shift and go to state 38
    MINUS           shift and go to state 30
    NUMBER          reduce using rule 80 (empty -> .)
    LPAREN          reduce using rule 80 (empty -> .)
    NOT             reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)

    sign                           shift and go to state 26
    simple_expression              shift and go to state 100
    empty                          shift and go to state 42

state 64

    (63) relational_operator -> LESS .

    PLUS            reduce using rule 63 (relational_operator -> LESS .)
    MINUS           reduce using rule 63 (relational_operator -> LESS .)
    NUMBER          reduce using rule 63 (relational_operator -> LESS .)
    LPAREN          reduce using rule 63 (relational_operator -> LESS .)
    NOT             reduce using rule 63 (relational_operator -> LESS .)
    ID              reduce using rule 63 (relational_operator -> LESS .)


state 65

    (62) relational_operator -> DISTINT .

    PLUS            reduce using rule 62 (relational_operator -> DISTINT .)
    MINUS           reduce using rule 62 (relational_operator -> DISTINT .)
    NUMBER          reduce using rule 62 (relational_operator -> DISTINT .)
    LPAREN          reduce using rule 62 (relational_operator -> DISTINT .)
    NOT             reduce using rule 62 (relational_operator -> DISTINT .)
    ID              reduce using rule 62 (relational_operator -> DISTINT .)


state 66

    (61) relational_operator -> EQUAL .

    PLUS            reduce using rule 61 (relational_operator -> EQUAL .)
    MINUS           reduce using rule 61 (relational_operator -> EQUAL .)
    NUMBER          reduce using rule 61 (relational_operator -> EQUAL .)
    LPAREN          reduce using rule 61 (relational_operator -> EQUAL .)
    NOT             reduce using rule 61 (relational_operator -> EQUAL .)
    ID              reduce using rule 61 (relational_operator -> EQUAL .)


state 67

    (64) relational_operator -> GREATER .

    PLUS            reduce using rule 64 (relational_operator -> GREATER .)
    MINUS           reduce using rule 64 (relational_operator -> GREATER .)
    NUMBER          reduce using rule 64 (relational_operator -> GREATER .)
    LPAREN          reduce using rule 64 (relational_operator -> GREATER .)
    NOT             reduce using rule 64 (relational_operator -> GREATER .)
    ID              reduce using rule 64 (relational_operator -> GREATER .)


state 68

    (76) indexed_variable -> array_variable LBRACKET . expression RBRACKET
    (49) expression -> . simple_expression
    (50) expression -> . simple_expression relational_operator simple_expression
    (51) simple_expression -> . sign term simple_expression2
    (65) sign -> . PLUS
    (66) sign -> . MINUS
    (67) sign -> . empty
    (80) empty -> .

    PLUS            shift and go to state 38
    MINUS           shift and go to state 30
    NUMBER          reduce using rule 80 (empty -> .)
    LPAREN          reduce using rule 80 (empty -> .)
    NOT             reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)

    sign                           shift and go to state 26
    simple_expression              shift and go to state 28
    expression                     shift and go to state 101
    empty                          shift and go to state 42

state 69

    (21) statement -> statement simple_statement .

    READ            reduce using rule 21 (statement -> statement simple_statement .)
    WRITE           reduce using rule 21 (statement -> statement simple_statement .)
    BEGIN           reduce using rule 21 (statement -> statement simple_statement .)
    IF              reduce using rule 21 (statement -> statement simple_statement .)
    WHILE           reduce using rule 21 (statement -> statement simple_statement .)
    ID              reduce using rule 21 (statement -> statement simple_statement .)
    PLUS            reduce using rule 21 (statement -> statement simple_statement .)
    MINUS           reduce using rule 21 (statement -> statement simple_statement .)
    NUMBER          reduce using rule 21 (statement -> statement simple_statement .)
    LPAREN          reduce using rule 21 (statement -> statement simple_statement .)
    NOT             reduce using rule 21 (statement -> statement simple_statement .)
    END             reduce using rule 21 (statement -> statement simple_statement .)
    ELSE            reduce using rule 21 (statement -> statement simple_statement .)


state 70

    (22) statement -> statement structured_statement .

    READ            reduce using rule 22 (statement -> statement structured_statement .)
    WRITE           reduce using rule 22 (statement -> statement structured_statement .)
    BEGIN           reduce using rule 22 (statement -> statement structured_statement .)
    IF              reduce using rule 22 (statement -> statement structured_statement .)
    WHILE           reduce using rule 22 (statement -> statement structured_statement .)
    ID              reduce using rule 22 (statement -> statement structured_statement .)
    PLUS            reduce using rule 22 (statement -> statement structured_statement .)
    MINUS           reduce using rule 22 (statement -> statement structured_statement .)
    NUMBER          reduce using rule 22 (statement -> statement structured_statement .)
    LPAREN          reduce using rule 22 (statement -> statement structured_statement .)
    NOT             reduce using rule 22 (statement -> statement structured_statement .)
    END             reduce using rule 22 (statement -> statement structured_statement .)
    ELSE            reduce using rule 22 (statement -> statement structured_statement .)


state 71

    (19) compound_statement -> BEGIN statement END . DOT

    DOT             shift and go to state 102


state 72

    (38) write_statement -> WRITE LPAREN . output_value output_value2 RPAREN SEMICOLON
    (39) output_value -> . expression
    (40) output_value -> . STRING
    (49) expression -> . simple_expression
    (50) expression -> . simple_expression relational_operator simple_expression
    (51) simple_expression -> . sign term simple_expression2
    (65) sign -> . PLUS
    (66) sign -> . MINUS
    (67) sign -> . empty
    (80) empty -> .

    STRING          shift and go to state 103
    PLUS            shift and go to state 38
    MINUS           shift and go to state 30
    NUMBER          reduce using rule 80 (empty -> .)
    LPAREN          reduce using rule 80 (empty -> .)
    NOT             reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)

    sign                           shift and go to state 26
    output_value                   shift and go to state 104
    simple_expression              shift and go to state 28
    expression                     shift and go to state 105
    empty                          shift and go to state 42

state 73

    (46) if_statement -> IF LPAREN . expression RPAREN THEN statement
    (47) if_statement -> IF LPAREN . expression RPAREN THEN statement ELSE statement
    (49) expression -> . simple_expression
    (50) expression -> . simple_expression relational_operator simple_expression
    (51) simple_expression -> . sign term simple_expression2
    (65) sign -> . PLUS
    (66) sign -> . MINUS
    (67) sign -> . empty
    (80) empty -> .

    PLUS            shift and go to state 38
    MINUS           shift and go to state 30
    NUMBER          reduce using rule 80 (empty -> .)
    LPAREN          reduce using rule 80 (empty -> .)
    NOT             reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)

    sign                           shift and go to state 26
    simple_expression              shift and go to state 28
    expression                     shift and go to state 106
    empty                          shift and go to state 42

state 74

    (17) procedure_declaration -> PROCEDURE ID SEMICOLON block .

    BEGIN           reduce using rule 17 (procedure_declaration -> PROCEDURE ID SEMICOLON block .)


state 75

    (6) variable_declaration2 -> COMMA ID variable_declaration2 .

    COLON           reduce using rule 6 (variable_declaration2 -> COMMA ID variable_declaration2 .)


state 76

    (12) simple_type -> type_identifier .

    SEMICOLON       reduce using rule 12 (simple_type -> type_identifier .)


state 77

    (8) type -> simple_type .

    SEMICOLON       reduce using rule 8 (type -> simple_type .)


state 78

    (5) variable_declaration -> ID variable_declaration2 COLON type .

    SEMICOLON       reduce using rule 5 (variable_declaration -> ID variable_declaration2 COLON type .)


state 79

    (9) type -> array_type .

    SEMICOLON       reduce using rule 9 (type -> array_type .)


state 80

    (13) type_identifier -> INTEGER .

    SEMICOLON       reduce using rule 13 (type_identifier -> INTEGER .)


state 81

    (10) array_type -> ARRAY . LBRACKET index_range RBRACKET OF simple_type

    LBRACKET        shift and go to state 107


state 82

    (14) type_identifier -> CHAR .

    SEMICOLON       reduce using rule 14 (type_identifier -> CHAR .)


state 83

    (35) input_variable -> variable .

    COMMA           reduce using rule 35 (input_variable -> variable .)
    RPAREN          reduce using rule 35 (input_variable -> variable .)


state 84

    (34) read_statement -> READ LPAREN input_variable . input_variable2 RPAREN SEMICOLON
    (36) input_variable2 -> . empty
    (37) input_variable2 -> . COMMA variable
    (80) empty -> .

    COMMA           shift and go to state 108
    RPAREN          reduce using rule 80 (empty -> .)

    input_variable2                shift and go to state 109
    empty                          shift and go to state 110

state 85

    (51) simple_expression -> sign term simple_expression2 .

    EQUAL           reduce using rule 51 (simple_expression -> sign term simple_expression2 .)
    DISTINT         reduce using rule 51 (simple_expression -> sign term simple_expression2 .)
    LESS            reduce using rule 51 (simple_expression -> sign term simple_expression2 .)
    GREATER         reduce using rule 51 (simple_expression -> sign term simple_expression2 .)
    RPAREN          reduce using rule 51 (simple_expression -> sign term simple_expression2 .)
    READ            reduce using rule 51 (simple_expression -> sign term simple_expression2 .)
    WRITE           reduce using rule 51 (simple_expression -> sign term simple_expression2 .)
    BEGIN           reduce using rule 51 (simple_expression -> sign term simple_expression2 .)
    IF              reduce using rule 51 (simple_expression -> sign term simple_expression2 .)
    WHILE           reduce using rule 51 (simple_expression -> sign term simple_expression2 .)
    ID              reduce using rule 51 (simple_expression -> sign term simple_expression2 .)
    PLUS            reduce using rule 51 (simple_expression -> sign term simple_expression2 .)
    MINUS           reduce using rule 51 (simple_expression -> sign term simple_expression2 .)
    NUMBER          reduce using rule 51 (simple_expression -> sign term simple_expression2 .)
    LPAREN          reduce using rule 51 (simple_expression -> sign term simple_expression2 .)
    NOT             reduce using rule 51 (simple_expression -> sign term simple_expression2 .)
    END             reduce using rule 51 (simple_expression -> sign term simple_expression2 .)
    ELSE            reduce using rule 51 (simple_expression -> sign term simple_expression2 .)
    DO              reduce using rule 51 (simple_expression -> sign term simple_expression2 .)
    RBRACKET        reduce using rule 51 (simple_expression -> sign term simple_expression2 .)
    COMMA           reduce using rule 51 (simple_expression -> sign term simple_expression2 .)


state 86

    (68) adding_operator -> PLUS .

    NUMBER          reduce using rule 68 (adding_operator -> PLUS .)
    LPAREN          reduce using rule 68 (adding_operator -> PLUS .)
    NOT             reduce using rule 68 (adding_operator -> PLUS .)
    ID              reduce using rule 68 (adding_operator -> PLUS .)


state 87

    (52) simple_expression2 -> adding_operator . term
    (54) term -> . factor term2
    (57) factor -> . variable
    (58) factor -> . NUMBER
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . NOT factor
    (74) variable -> . entire_variable
    (75) variable -> . indexed_variable
    (78) entire_variable -> . variable_identifier
    (76) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (79) variable_identifier -> . ID
    (77) array_variable -> . entire_variable

    NUMBER          shift and go to state 56
    LPAREN          shift and go to state 58
    NOT             shift and go to state 57
    ID              shift and go to state 61

    term                           shift and go to state 111
    indexed_variable               shift and go to state 23
    variable_identifier            shift and go to state 47
    entire_variable                shift and go to state 36
    factor                         shift and go to state 59
    variable                       shift and go to state 60
    array_variable                 shift and go to state 29

state 88

    (69) adding_operator -> MINUS .

    NUMBER          reduce using rule 69 (adding_operator -> MINUS .)
    LPAREN          reduce using rule 69 (adding_operator -> MINUS .)
    NOT             reduce using rule 69 (adding_operator -> MINUS .)
    ID              reduce using rule 69 (adding_operator -> MINUS .)


state 89

    (53) simple_expression2 -> empty .

    EQUAL           reduce using rule 53 (simple_expression2 -> empty .)
    DISTINT         reduce using rule 53 (simple_expression2 -> empty .)
    LESS            reduce using rule 53 (simple_expression2 -> empty .)
    GREATER         reduce using rule 53 (simple_expression2 -> empty .)
    END             reduce using rule 53 (simple_expression2 -> empty .)
    READ            reduce using rule 53 (simple_expression2 -> empty .)
    WRITE           reduce using rule 53 (simple_expression2 -> empty .)
    BEGIN           reduce using rule 53 (simple_expression2 -> empty .)
    IF              reduce using rule 53 (simple_expression2 -> empty .)
    WHILE           reduce using rule 53 (simple_expression2 -> empty .)
    ID              reduce using rule 53 (simple_expression2 -> empty .)
    PLUS            reduce using rule 53 (simple_expression2 -> empty .)
    MINUS           reduce using rule 53 (simple_expression2 -> empty .)
    NUMBER          reduce using rule 53 (simple_expression2 -> empty .)
    LPAREN          reduce using rule 53 (simple_expression2 -> empty .)
    NOT             reduce using rule 53 (simple_expression2 -> empty .)
    DO              reduce using rule 53 (simple_expression2 -> empty .)
    RPAREN          reduce using rule 53 (simple_expression2 -> empty .)
    RBRACKET        reduce using rule 53 (simple_expression2 -> empty .)
    COMMA           reduce using rule 53 (simple_expression2 -> empty .)
    ELSE            reduce using rule 53 (simple_expression2 -> empty .)


state 90

    (70) adding_operator -> OR .

    NUMBER          reduce using rule 70 (adding_operator -> OR .)
    LPAREN          reduce using rule 70 (adding_operator -> OR .)
    NOT             reduce using rule 70 (adding_operator -> OR .)
    ID              reduce using rule 70 (adding_operator -> OR .)


state 91

    (60) factor -> NOT factor .

    PLUS            reduce using rule 60 (factor -> NOT factor .)
    MINUS           reduce using rule 60 (factor -> NOT factor .)
    OR              reduce using rule 60 (factor -> NOT factor .)
    EQUAL           reduce using rule 60 (factor -> NOT factor .)
    DISTINT         reduce using rule 60 (factor -> NOT factor .)
    LESS            reduce using rule 60 (factor -> NOT factor .)
    GREATER         reduce using rule 60 (factor -> NOT factor .)
    END             reduce using rule 60 (factor -> NOT factor .)
    READ            reduce using rule 60 (factor -> NOT factor .)
    WRITE           reduce using rule 60 (factor -> NOT factor .)
    BEGIN           reduce using rule 60 (factor -> NOT factor .)
    IF              reduce using rule 60 (factor -> NOT factor .)
    WHILE           reduce using rule 60 (factor -> NOT factor .)
    ID              reduce using rule 60 (factor -> NOT factor .)
    NUMBER          reduce using rule 60 (factor -> NOT factor .)
    LPAREN          reduce using rule 60 (factor -> NOT factor .)
    NOT             reduce using rule 60 (factor -> NOT factor .)
    DO              reduce using rule 60 (factor -> NOT factor .)
    RPAREN          reduce using rule 60 (factor -> NOT factor .)
    RBRACKET        reduce using rule 60 (factor -> NOT factor .)
    COMMA           reduce using rule 60 (factor -> NOT factor .)
    ELSE            reduce using rule 60 (factor -> NOT factor .)
    TIMES           reduce using rule 60 (factor -> NOT factor .)
    DIV             reduce using rule 60 (factor -> NOT factor .)
    AND             reduce using rule 60 (factor -> NOT factor .)


state 92

    (59) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 112


state 93

    (73) multiplying_operator -> AND .

    NUMBER          reduce using rule 73 (multiplying_operator -> AND .)
    LPAREN          reduce using rule 73 (multiplying_operator -> AND .)
    NOT             reduce using rule 73 (multiplying_operator -> AND .)
    ID              reduce using rule 73 (multiplying_operator -> AND .)


state 94

    (54) term -> factor term2 .

    PLUS            reduce using rule 54 (term -> factor term2 .)
    MINUS           reduce using rule 54 (term -> factor term2 .)
    OR              reduce using rule 54 (term -> factor term2 .)
    EQUAL           reduce using rule 54 (term -> factor term2 .)
    DISTINT         reduce using rule 54 (term -> factor term2 .)
    LESS            reduce using rule 54 (term -> factor term2 .)
    GREATER         reduce using rule 54 (term -> factor term2 .)
    END             reduce using rule 54 (term -> factor term2 .)
    READ            reduce using rule 54 (term -> factor term2 .)
    WRITE           reduce using rule 54 (term -> factor term2 .)
    BEGIN           reduce using rule 54 (term -> factor term2 .)
    IF              reduce using rule 54 (term -> factor term2 .)
    WHILE           reduce using rule 54 (term -> factor term2 .)
    ID              reduce using rule 54 (term -> factor term2 .)
    NUMBER          reduce using rule 54 (term -> factor term2 .)
    LPAREN          reduce using rule 54 (term -> factor term2 .)
    NOT             reduce using rule 54 (term -> factor term2 .)
    DO              reduce using rule 54 (term -> factor term2 .)
    RPAREN          reduce using rule 54 (term -> factor term2 .)
    RBRACKET        reduce using rule 54 (term -> factor term2 .)
    COMMA           reduce using rule 54 (term -> factor term2 .)
    ELSE            reduce using rule 54 (term -> factor term2 .)


state 95

    (71) multiplying_operator -> TIMES .

    NUMBER          reduce using rule 71 (multiplying_operator -> TIMES .)
    LPAREN          reduce using rule 71 (multiplying_operator -> TIMES .)
    NOT             reduce using rule 71 (multiplying_operator -> TIMES .)
    ID              reduce using rule 71 (multiplying_operator -> TIMES .)


state 96

    (72) multiplying_operator -> DIV .

    NUMBER          reduce using rule 72 (multiplying_operator -> DIV .)
    LPAREN          reduce using rule 72 (multiplying_operator -> DIV .)
    NOT             reduce using rule 72 (multiplying_operator -> DIV .)
    ID              reduce using rule 72 (multiplying_operator -> DIV .)


state 97

    (55) term2 -> multiplying_operator . factor
    (57) factor -> . variable
    (58) factor -> . NUMBER
    (59) factor -> . LPAREN expression RPAREN
    (60) factor -> . NOT factor
    (74) variable -> . entire_variable
    (75) variable -> . indexed_variable
    (78) entire_variable -> . variable_identifier
    (76) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (79) variable_identifier -> . ID
    (77) array_variable -> . entire_variable

    NUMBER          shift and go to state 56
    LPAREN          shift and go to state 58
    NOT             shift and go to state 57
    ID              shift and go to state 61

    indexed_variable               shift and go to state 23
    variable_identifier            shift and go to state 47
    array_variable                 shift and go to state 29
    entire_variable                shift and go to state 36
    factor                         shift and go to state 113
    variable                       shift and go to state 60

state 98

    (56) term2 -> empty .

    PLUS            reduce using rule 56 (term2 -> empty .)
    MINUS           reduce using rule 56 (term2 -> empty .)
    OR              reduce using rule 56 (term2 -> empty .)
    EQUAL           reduce using rule 56 (term2 -> empty .)
    DISTINT         reduce using rule 56 (term2 -> empty .)
    LESS            reduce using rule 56 (term2 -> empty .)
    GREATER         reduce using rule 56 (term2 -> empty .)
    END             reduce using rule 56 (term2 -> empty .)
    READ            reduce using rule 56 (term2 -> empty .)
    WRITE           reduce using rule 56 (term2 -> empty .)
    BEGIN           reduce using rule 56 (term2 -> empty .)
    IF              reduce using rule 56 (term2 -> empty .)
    WHILE           reduce using rule 56 (term2 -> empty .)
    ID              reduce using rule 56 (term2 -> empty .)
    NUMBER          reduce using rule 56 (term2 -> empty .)
    LPAREN          reduce using rule 56 (term2 -> empty .)
    NOT             reduce using rule 56 (term2 -> empty .)
    DO              reduce using rule 56 (term2 -> empty .)
    RPAREN          reduce using rule 56 (term2 -> empty .)
    RBRACKET        reduce using rule 56 (term2 -> empty .)
    COMMA           reduce using rule 56 (term2 -> empty .)
    ELSE            reduce using rule 56 (term2 -> empty .)


state 99

    (48) while_statement -> WHILE expression DO . statement
    (20) statement -> . simple_statement
    (21) statement -> . statement simple_statement
    (22) statement -> . statement structured_statement
    (23) statement -> . structured_statement
    (26) simple_statement -> . assignment_statement
    (27) simple_statement -> . procedure_statement
    (28) simple_statement -> . read_statement
    (29) simple_statement -> . write_statement
    (43) structured_statement -> . compound_statement
    (44) structured_statement -> . if_statement
    (45) structured_statement -> . while_statement
    (30) assignment_statement -> . variable
    (31) assignment_statement -> . expression
    (32) procedure_statement -> . procedure_identifier
    (34) read_statement -> . READ LPAREN input_variable input_variable2 RPAREN SEMICOLON
    (38) write_statement -> . WRITE LPAREN output_value output_value2 RPAREN SEMICOLON
    (19) compound_statement -> . BEGIN statement END DOT
    (46) if_statement -> . IF LPAREN expression RPAREN THEN statement
    (47) if_statement -> . IF LPAREN expression RPAREN THEN statement ELSE statement
    (48) while_statement -> . WHILE expression DO statement
    (74) variable -> . entire_variable
    (75) variable -> . indexed_variable
    (49) expression -> . simple_expression
    (50) expression -> . simple_expression relational_operator simple_expression
    (33) procedure_identifier -> . ID
    (78) entire_variable -> . variable_identifier
    (76) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (51) simple_expression -> . sign term simple_expression2
    (79) variable_identifier -> . ID
    (77) array_variable -> . entire_variable
    (65) sign -> . PLUS
    (66) sign -> . MINUS
    (67) sign -> . empty
    (80) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    READ            shift and go to state 24
    WRITE           shift and go to state 43
    BEGIN           shift and go to state 15
    IF              shift and go to state 46
    WHILE           shift and go to state 27
    ID              shift and go to state 45
    PLUS            shift and go to state 38
    MINUS           shift and go to state 30
    NUMBER          reduce using rule 80 (empty -> .)
    LPAREN          reduce using rule 80 (empty -> .)
    NOT             reduce using rule 80 (empty -> .)

  ! ID              [ reduce using rule 80 (empty -> .) ]

    indexed_variable               shift and go to state 23
    simple_statement               shift and go to state 25
    sign                           shift and go to state 26
    simple_expression              shift and go to state 28
    array_variable                 shift and go to state 29
    compound_statement             shift and go to state 31
    assignment_statement           shift and go to state 32
    procedure_statement            shift and go to state 33
    structured_statement           shift and go to state 34
    write_statement                shift and go to state 35
    entire_variable                shift and go to state 36
    while_statement                shift and go to state 37
    statement                      shift and go to state 114
    read_statement                 shift and go to state 40
    if_statement                   shift and go to state 41
    empty                          shift and go to state 42
    variable_identifier            shift and go to state 47
    variable                       shift and go to state 44
    procedure_identifier           shift and go to state 48
    expression                     shift and go to state 49

state 100

    (50) expression -> simple_expression relational_operator simple_expression .

    RPAREN          reduce using rule 50 (expression -> simple_expression relational_operator simple_expression .)
    RBRACKET        reduce using rule 50 (expression -> simple_expression relational_operator simple_expression .)
    READ            reduce using rule 50 (expression -> simple_expression relational_operator simple_expression .)
    WRITE           reduce using rule 50 (expression -> simple_expression relational_operator simple_expression .)
    BEGIN           reduce using rule 50 (expression -> simple_expression relational_operator simple_expression .)
    IF              reduce using rule 50 (expression -> simple_expression relational_operator simple_expression .)
    WHILE           reduce using rule 50 (expression -> simple_expression relational_operator simple_expression .)
    ID              reduce using rule 50 (expression -> simple_expression relational_operator simple_expression .)
    PLUS            reduce using rule 50 (expression -> simple_expression relational_operator simple_expression .)
    MINUS           reduce using rule 50 (expression -> simple_expression relational_operator simple_expression .)
    NUMBER          reduce using rule 50 (expression -> simple_expression relational_operator simple_expression .)
    LPAREN          reduce using rule 50 (expression -> simple_expression relational_operator simple_expression .)
    NOT             reduce using rule 50 (expression -> simple_expression relational_operator simple_expression .)
    END             reduce using rule 50 (expression -> simple_expression relational_operator simple_expression .)
    ELSE            reduce using rule 50 (expression -> simple_expression relational_operator simple_expression .)
    COMMA           reduce using rule 50 (expression -> simple_expression relational_operator simple_expression .)
    DO              reduce using rule 50 (expression -> simple_expression relational_operator simple_expression .)


state 101

    (76) indexed_variable -> array_variable LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 115


state 102

    (19) compound_statement -> BEGIN statement END DOT .

    READ            reduce using rule 19 (compound_statement -> BEGIN statement END DOT .)
    WRITE           reduce using rule 19 (compound_statement -> BEGIN statement END DOT .)
    BEGIN           reduce using rule 19 (compound_statement -> BEGIN statement END DOT .)
    IF              reduce using rule 19 (compound_statement -> BEGIN statement END DOT .)
    WHILE           reduce using rule 19 (compound_statement -> BEGIN statement END DOT .)
    ID              reduce using rule 19 (compound_statement -> BEGIN statement END DOT .)
    PLUS            reduce using rule 19 (compound_statement -> BEGIN statement END DOT .)
    MINUS           reduce using rule 19 (compound_statement -> BEGIN statement END DOT .)
    NUMBER          reduce using rule 19 (compound_statement -> BEGIN statement END DOT .)
    LPAREN          reduce using rule 19 (compound_statement -> BEGIN statement END DOT .)
    NOT             reduce using rule 19 (compound_statement -> BEGIN statement END DOT .)
    END             reduce using rule 19 (compound_statement -> BEGIN statement END DOT .)
    ELSE            reduce using rule 19 (compound_statement -> BEGIN statement END DOT .)
    $end            reduce using rule 19 (compound_statement -> BEGIN statement END DOT .)


state 103

    (40) output_value -> STRING .

    COMMA           reduce using rule 40 (output_value -> STRING .)
    RPAREN          reduce using rule 40 (output_value -> STRING .)


state 104

    (38) write_statement -> WRITE LPAREN output_value . output_value2 RPAREN SEMICOLON
    (41) output_value2 -> . empty
    (42) output_value2 -> . COMMA expression
    (80) empty -> .

    COMMA           shift and go to state 117
    RPAREN          reduce using rule 80 (empty -> .)

    output_value2                  shift and go to state 116
    empty                          shift and go to state 118

state 105

    (39) output_value -> expression .

    COMMA           reduce using rule 39 (output_value -> expression .)
    RPAREN          reduce using rule 39 (output_value -> expression .)


state 106

    (46) if_statement -> IF LPAREN expression . RPAREN THEN statement
    (47) if_statement -> IF LPAREN expression . RPAREN THEN statement ELSE statement

    RPAREN          shift and go to state 119


state 107

    (10) array_type -> ARRAY LBRACKET . index_range RBRACKET OF simple_type
    (11) index_range -> . NUMBER DOT DOT NUMBER

    NUMBER          shift and go to state 121

    index_range                    shift and go to state 120

state 108

    (37) input_variable2 -> COMMA . variable
    (74) variable -> . entire_variable
    (75) variable -> . indexed_variable
    (78) entire_variable -> . variable_identifier
    (76) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (79) variable_identifier -> . ID
    (77) array_variable -> . entire_variable

    ID              shift and go to state 61

    indexed_variable               shift and go to state 23
    variable_identifier            shift and go to state 47
    entire_variable                shift and go to state 36
    variable                       shift and go to state 122
    array_variable                 shift and go to state 29

state 109

    (34) read_statement -> READ LPAREN input_variable input_variable2 . RPAREN SEMICOLON

    RPAREN          shift and go to state 123


state 110

    (36) input_variable2 -> empty .

    RPAREN          reduce using rule 36 (input_variable2 -> empty .)


state 111

    (52) simple_expression2 -> adding_operator term .

    EQUAL           reduce using rule 52 (simple_expression2 -> adding_operator term .)
    DISTINT         reduce using rule 52 (simple_expression2 -> adding_operator term .)
    LESS            reduce using rule 52 (simple_expression2 -> adding_operator term .)
    GREATER         reduce using rule 52 (simple_expression2 -> adding_operator term .)
    END             reduce using rule 52 (simple_expression2 -> adding_operator term .)
    READ            reduce using rule 52 (simple_expression2 -> adding_operator term .)
    WRITE           reduce using rule 52 (simple_expression2 -> adding_operator term .)
    BEGIN           reduce using rule 52 (simple_expression2 -> adding_operator term .)
    IF              reduce using rule 52 (simple_expression2 -> adding_operator term .)
    WHILE           reduce using rule 52 (simple_expression2 -> adding_operator term .)
    ID              reduce using rule 52 (simple_expression2 -> adding_operator term .)
    PLUS            reduce using rule 52 (simple_expression2 -> adding_operator term .)
    MINUS           reduce using rule 52 (simple_expression2 -> adding_operator term .)
    NUMBER          reduce using rule 52 (simple_expression2 -> adding_operator term .)
    LPAREN          reduce using rule 52 (simple_expression2 -> adding_operator term .)
    NOT             reduce using rule 52 (simple_expression2 -> adding_operator term .)
    DO              reduce using rule 52 (simple_expression2 -> adding_operator term .)
    RPAREN          reduce using rule 52 (simple_expression2 -> adding_operator term .)
    RBRACKET        reduce using rule 52 (simple_expression2 -> adding_operator term .)
    COMMA           reduce using rule 52 (simple_expression2 -> adding_operator term .)
    ELSE            reduce using rule 52 (simple_expression2 -> adding_operator term .)


state 112

    (59) factor -> LPAREN expression RPAREN .

    PLUS            reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    DISTINT         reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    READ            reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    WRITE           reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    BEGIN           reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    IF              reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    ID              reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    NOT             reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    DIV             reduce using rule 59 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 59 (factor -> LPAREN expression RPAREN .)


state 113

    (55) term2 -> multiplying_operator factor .

    PLUS            reduce using rule 55 (term2 -> multiplying_operator factor .)
    MINUS           reduce using rule 55 (term2 -> multiplying_operator factor .)
    OR              reduce using rule 55 (term2 -> multiplying_operator factor .)
    EQUAL           reduce using rule 55 (term2 -> multiplying_operator factor .)
    DISTINT         reduce using rule 55 (term2 -> multiplying_operator factor .)
    LESS            reduce using rule 55 (term2 -> multiplying_operator factor .)
    GREATER         reduce using rule 55 (term2 -> multiplying_operator factor .)
    END             reduce using rule 55 (term2 -> multiplying_operator factor .)
    READ            reduce using rule 55 (term2 -> multiplying_operator factor .)
    WRITE           reduce using rule 55 (term2 -> multiplying_operator factor .)
    BEGIN           reduce using rule 55 (term2 -> multiplying_operator factor .)
    IF              reduce using rule 55 (term2 -> multiplying_operator factor .)
    WHILE           reduce using rule 55 (term2 -> multiplying_operator factor .)
    ID              reduce using rule 55 (term2 -> multiplying_operator factor .)
    NUMBER          reduce using rule 55 (term2 -> multiplying_operator factor .)
    LPAREN          reduce using rule 55 (term2 -> multiplying_operator factor .)
    NOT             reduce using rule 55 (term2 -> multiplying_operator factor .)
    DO              reduce using rule 55 (term2 -> multiplying_operator factor .)
    RPAREN          reduce using rule 55 (term2 -> multiplying_operator factor .)
    RBRACKET        reduce using rule 55 (term2 -> multiplying_operator factor .)
    COMMA           reduce using rule 55 (term2 -> multiplying_operator factor .)
    ELSE            reduce using rule 55 (term2 -> multiplying_operator factor .)


state 114

    (48) while_statement -> WHILE expression DO statement .
    (21) statement -> statement . simple_statement
    (22) statement -> statement . structured_statement
    (26) simple_statement -> . assignment_statement
    (27) simple_statement -> . procedure_statement
    (28) simple_statement -> . read_statement
    (29) simple_statement -> . write_statement
    (43) structured_statement -> . compound_statement
    (44) structured_statement -> . if_statement
    (45) structured_statement -> . while_statement
    (30) assignment_statement -> . variable
    (31) assignment_statement -> . expression
    (32) procedure_statement -> . procedure_identifier
    (34) read_statement -> . READ LPAREN input_variable input_variable2 RPAREN SEMICOLON
    (38) write_statement -> . WRITE LPAREN output_value output_value2 RPAREN SEMICOLON
    (19) compound_statement -> . BEGIN statement END DOT
    (46) if_statement -> . IF LPAREN expression RPAREN THEN statement
    (47) if_statement -> . IF LPAREN expression RPAREN THEN statement ELSE statement
    (48) while_statement -> . WHILE expression DO statement
    (74) variable -> . entire_variable
    (75) variable -> . indexed_variable
    (49) expression -> . simple_expression
    (50) expression -> . simple_expression relational_operator simple_expression
    (33) procedure_identifier -> . ID
    (78) entire_variable -> . variable_identifier
    (76) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (51) simple_expression -> . sign term simple_expression2
    (79) variable_identifier -> . ID
    (77) array_variable -> . entire_variable
    (65) sign -> . PLUS
    (66) sign -> . MINUS
    (67) sign -> . empty
    (80) empty -> .

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for NUMBER resolved using rule 48 (while_statement -> WHILE expression DO statement .)
  ! reduce/reduce conflict for LPAREN resolved using rule 48 (while_statement -> WHILE expression DO statement .)
  ! reduce/reduce conflict for NOT resolved using rule 48 (while_statement -> WHILE expression DO statement .)
  ! shift/reduce conflict for ID resolved as shift
    NUMBER          reduce using rule 48 (while_statement -> WHILE expression DO statement .)
    LPAREN          reduce using rule 48 (while_statement -> WHILE expression DO statement .)
    NOT             reduce using rule 48 (while_statement -> WHILE expression DO statement .)
    END             reduce using rule 48 (while_statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 48 (while_statement -> WHILE expression DO statement .)
    READ            shift and go to state 24
    WRITE           shift and go to state 43
    BEGIN           shift and go to state 15
    IF              shift and go to state 46
    WHILE           shift and go to state 27
    ID              shift and go to state 45
    PLUS            shift and go to state 38
    MINUS           shift and go to state 30

  ! READ            [ reduce using rule 48 (while_statement -> WHILE expression DO statement .) ]
  ! WRITE           [ reduce using rule 48 (while_statement -> WHILE expression DO statement .) ]
  ! BEGIN           [ reduce using rule 48 (while_statement -> WHILE expression DO statement .) ]
  ! IF              [ reduce using rule 48 (while_statement -> WHILE expression DO statement .) ]
  ! WHILE           [ reduce using rule 48 (while_statement -> WHILE expression DO statement .) ]
  ! ID              [ reduce using rule 48 (while_statement -> WHILE expression DO statement .) ]
  ! PLUS            [ reduce using rule 48 (while_statement -> WHILE expression DO statement .) ]
  ! MINUS           [ reduce using rule 48 (while_statement -> WHILE expression DO statement .) ]
  ! NUMBER          [ reduce using rule 80 (empty -> .) ]
  ! LPAREN          [ reduce using rule 80 (empty -> .) ]
  ! NOT             [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]

    indexed_variable               shift and go to state 23
    simple_statement               shift and go to state 69
    sign                           shift and go to state 26
    simple_expression              shift and go to state 28
    array_variable                 shift and go to state 29
    compound_statement             shift and go to state 31
    assignment_statement           shift and go to state 32
    procedure_statement            shift and go to state 33
    structured_statement           shift and go to state 70
    write_statement                shift and go to state 35
    entire_variable                shift and go to state 36
    while_statement                shift and go to state 37
    read_statement                 shift and go to state 40
    if_statement                   shift and go to state 41
    empty                          shift and go to state 42
    variable_identifier            shift and go to state 47
    variable                       shift and go to state 44
    procedure_identifier           shift and go to state 48
    expression                     shift and go to state 49

state 115

    (76) indexed_variable -> array_variable LBRACKET expression RBRACKET .

    TIMES           reduce using rule 76 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    DIV             reduce using rule 76 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    AND             reduce using rule 76 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 76 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 76 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    OR              reduce using rule 76 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 76 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    DISTINT         reduce using rule 76 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    LESS            reduce using rule 76 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 76 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    END             reduce using rule 76 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    READ            reduce using rule 76 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    WRITE           reduce using rule 76 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    BEGIN           reduce using rule 76 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    IF              reduce using rule 76 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 76 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    ID              reduce using rule 76 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    NUMBER          reduce using rule 76 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 76 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    NOT             reduce using rule 76 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    DO              reduce using rule 76 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 76 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 76 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 76 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 76 (indexed_variable -> array_variable LBRACKET expression RBRACKET .)


state 116

    (38) write_statement -> WRITE LPAREN output_value output_value2 . RPAREN SEMICOLON

    RPAREN          shift and go to state 124


state 117

    (42) output_value2 -> COMMA . expression
    (49) expression -> . simple_expression
    (50) expression -> . simple_expression relational_operator simple_expression
    (51) simple_expression -> . sign term simple_expression2
    (65) sign -> . PLUS
    (66) sign -> . MINUS
    (67) sign -> . empty
    (80) empty -> .

    PLUS            shift and go to state 38
    MINUS           shift and go to state 30
    NUMBER          reduce using rule 80 (empty -> .)
    LPAREN          reduce using rule 80 (empty -> .)
    NOT             reduce using rule 80 (empty -> .)
    ID              reduce using rule 80 (empty -> .)

    sign                           shift and go to state 26
    simple_expression              shift and go to state 28
    expression                     shift and go to state 125
    empty                          shift and go to state 42

state 118

    (41) output_value2 -> empty .

    RPAREN          reduce using rule 41 (output_value2 -> empty .)


state 119

    (46) if_statement -> IF LPAREN expression RPAREN . THEN statement
    (47) if_statement -> IF LPAREN expression RPAREN . THEN statement ELSE statement

    THEN            shift and go to state 126


state 120

    (10) array_type -> ARRAY LBRACKET index_range . RBRACKET OF simple_type

    RBRACKET        shift and go to state 127


state 121

    (11) index_range -> NUMBER . DOT DOT NUMBER

    DOT             shift and go to state 128


state 122

    (37) input_variable2 -> COMMA variable .

    RPAREN          reduce using rule 37 (input_variable2 -> COMMA variable .)


state 123

    (34) read_statement -> READ LPAREN input_variable input_variable2 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 129


state 124

    (38) write_statement -> WRITE LPAREN output_value output_value2 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 130


state 125

    (42) output_value2 -> COMMA expression .

    RPAREN          reduce using rule 42 (output_value2 -> COMMA expression .)


state 126

    (46) if_statement -> IF LPAREN expression RPAREN THEN . statement
    (47) if_statement -> IF LPAREN expression RPAREN THEN . statement ELSE statement
    (20) statement -> . simple_statement
    (21) statement -> . statement simple_statement
    (22) statement -> . statement structured_statement
    (23) statement -> . structured_statement
    (26) simple_statement -> . assignment_statement
    (27) simple_statement -> . procedure_statement
    (28) simple_statement -> . read_statement
    (29) simple_statement -> . write_statement
    (43) structured_statement -> . compound_statement
    (44) structured_statement -> . if_statement
    (45) structured_statement -> . while_statement
    (30) assignment_statement -> . variable
    (31) assignment_statement -> . expression
    (32) procedure_statement -> . procedure_identifier
    (34) read_statement -> . READ LPAREN input_variable input_variable2 RPAREN SEMICOLON
    (38) write_statement -> . WRITE LPAREN output_value output_value2 RPAREN SEMICOLON
    (19) compound_statement -> . BEGIN statement END DOT
    (46) if_statement -> . IF LPAREN expression RPAREN THEN statement
    (47) if_statement -> . IF LPAREN expression RPAREN THEN statement ELSE statement
    (48) while_statement -> . WHILE expression DO statement
    (74) variable -> . entire_variable
    (75) variable -> . indexed_variable
    (49) expression -> . simple_expression
    (50) expression -> . simple_expression relational_operator simple_expression
    (33) procedure_identifier -> . ID
    (78) entire_variable -> . variable_identifier
    (76) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (51) simple_expression -> . sign term simple_expression2
    (79) variable_identifier -> . ID
    (77) array_variable -> . entire_variable
    (65) sign -> . PLUS
    (66) sign -> . MINUS
    (67) sign -> . empty
    (80) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    READ            shift and go to state 24
    WRITE           shift and go to state 43
    BEGIN           shift and go to state 15
    IF              shift and go to state 46
    WHILE           shift and go to state 27
    ID              shift and go to state 45
    PLUS            shift and go to state 38
    MINUS           shift and go to state 30
    NUMBER          reduce using rule 80 (empty -> .)
    LPAREN          reduce using rule 80 (empty -> .)
    NOT             reduce using rule 80 (empty -> .)

  ! ID              [ reduce using rule 80 (empty -> .) ]

    indexed_variable               shift and go to state 23
    simple_statement               shift and go to state 25
    sign                           shift and go to state 26
    simple_expression              shift and go to state 28
    array_variable                 shift and go to state 29
    compound_statement             shift and go to state 31
    assignment_statement           shift and go to state 32
    procedure_statement            shift and go to state 33
    structured_statement           shift and go to state 34
    write_statement                shift and go to state 35
    entire_variable                shift and go to state 36
    while_statement                shift and go to state 37
    statement                      shift and go to state 131
    read_statement                 shift and go to state 40
    if_statement                   shift and go to state 41
    empty                          shift and go to state 42
    variable_identifier            shift and go to state 47
    variable                       shift and go to state 44
    procedure_identifier           shift and go to state 48
    expression                     shift and go to state 49

state 127

    (10) array_type -> ARRAY LBRACKET index_range RBRACKET . OF simple_type

    OF              shift and go to state 132


state 128

    (11) index_range -> NUMBER DOT . DOT NUMBER

    DOT             shift and go to state 133


state 129

    (34) read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .

    READ            reduce using rule 34 (read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .)
    WRITE           reduce using rule 34 (read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .)
    BEGIN           reduce using rule 34 (read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .)
    IF              reduce using rule 34 (read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .)
    WHILE           reduce using rule 34 (read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .)
    ID              reduce using rule 34 (read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .)
    PLUS            reduce using rule 34 (read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .)
    MINUS           reduce using rule 34 (read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .)
    NUMBER          reduce using rule 34 (read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .)
    LPAREN          reduce using rule 34 (read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .)
    NOT             reduce using rule 34 (read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .)
    END             reduce using rule 34 (read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .)
    ELSE            reduce using rule 34 (read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON .)


state 130

    (38) write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON .

    READ            reduce using rule 38 (write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON .)
    WRITE           reduce using rule 38 (write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON .)
    BEGIN           reduce using rule 38 (write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON .)
    IF              reduce using rule 38 (write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON .)
    WHILE           reduce using rule 38 (write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON .)
    ID              reduce using rule 38 (write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON .)
    PLUS            reduce using rule 38 (write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON .)
    MINUS           reduce using rule 38 (write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON .)
    NUMBER          reduce using rule 38 (write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON .)
    LPAREN          reduce using rule 38 (write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON .)
    NOT             reduce using rule 38 (write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON .)
    END             reduce using rule 38 (write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON .)
    ELSE            reduce using rule 38 (write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON .)


state 131

    (46) if_statement -> IF LPAREN expression RPAREN THEN statement .
    (47) if_statement -> IF LPAREN expression RPAREN THEN statement . ELSE statement
    (21) statement -> statement . simple_statement
    (22) statement -> statement . structured_statement
    (26) simple_statement -> . assignment_statement
    (27) simple_statement -> . procedure_statement
    (28) simple_statement -> . read_statement
    (29) simple_statement -> . write_statement
    (43) structured_statement -> . compound_statement
    (44) structured_statement -> . if_statement
    (45) structured_statement -> . while_statement
    (30) assignment_statement -> . variable
    (31) assignment_statement -> . expression
    (32) procedure_statement -> . procedure_identifier
    (34) read_statement -> . READ LPAREN input_variable input_variable2 RPAREN SEMICOLON
    (38) write_statement -> . WRITE LPAREN output_value output_value2 RPAREN SEMICOLON
    (19) compound_statement -> . BEGIN statement END DOT
    (46) if_statement -> . IF LPAREN expression RPAREN THEN statement
    (47) if_statement -> . IF LPAREN expression RPAREN THEN statement ELSE statement
    (48) while_statement -> . WHILE expression DO statement
    (74) variable -> . entire_variable
    (75) variable -> . indexed_variable
    (49) expression -> . simple_expression
    (50) expression -> . simple_expression relational_operator simple_expression
    (33) procedure_identifier -> . ID
    (78) entire_variable -> . variable_identifier
    (76) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (51) simple_expression -> . sign term simple_expression2
    (79) variable_identifier -> . ID
    (77) array_variable -> . entire_variable
    (65) sign -> . PLUS
    (66) sign -> . MINUS
    (67) sign -> . empty
    (80) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for NUMBER resolved using rule 46 (if_statement -> IF LPAREN expression RPAREN THEN statement .)
  ! reduce/reduce conflict for LPAREN resolved using rule 46 (if_statement -> IF LPAREN expression RPAREN THEN statement .)
  ! reduce/reduce conflict for NOT resolved using rule 46 (if_statement -> IF LPAREN expression RPAREN THEN statement .)
  ! shift/reduce conflict for ID resolved as shift
    NUMBER          reduce using rule 46 (if_statement -> IF LPAREN expression RPAREN THEN statement .)
    LPAREN          reduce using rule 46 (if_statement -> IF LPAREN expression RPAREN THEN statement .)
    NOT             reduce using rule 46 (if_statement -> IF LPAREN expression RPAREN THEN statement .)
    END             reduce using rule 46 (if_statement -> IF LPAREN expression RPAREN THEN statement .)
    ELSE            shift and go to state 134
    READ            shift and go to state 24
    WRITE           shift and go to state 43
    BEGIN           shift and go to state 15
    IF              shift and go to state 46
    WHILE           shift and go to state 27
    ID              shift and go to state 45
    PLUS            shift and go to state 38
    MINUS           shift and go to state 30

  ! READ            [ reduce using rule 46 (if_statement -> IF LPAREN expression RPAREN THEN statement .) ]
  ! WRITE           [ reduce using rule 46 (if_statement -> IF LPAREN expression RPAREN THEN statement .) ]
  ! BEGIN           [ reduce using rule 46 (if_statement -> IF LPAREN expression RPAREN THEN statement .) ]
  ! IF              [ reduce using rule 46 (if_statement -> IF LPAREN expression RPAREN THEN statement .) ]
  ! WHILE           [ reduce using rule 46 (if_statement -> IF LPAREN expression RPAREN THEN statement .) ]
  ! ID              [ reduce using rule 46 (if_statement -> IF LPAREN expression RPAREN THEN statement .) ]
  ! PLUS            [ reduce using rule 46 (if_statement -> IF LPAREN expression RPAREN THEN statement .) ]
  ! MINUS           [ reduce using rule 46 (if_statement -> IF LPAREN expression RPAREN THEN statement .) ]
  ! ELSE            [ reduce using rule 46 (if_statement -> IF LPAREN expression RPAREN THEN statement .) ]
  ! NUMBER          [ reduce using rule 80 (empty -> .) ]
  ! LPAREN          [ reduce using rule 80 (empty -> .) ]
  ! NOT             [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]

    indexed_variable               shift and go to state 23
    simple_statement               shift and go to state 69
    sign                           shift and go to state 26
    simple_expression              shift and go to state 28
    array_variable                 shift and go to state 29
    compound_statement             shift and go to state 31
    assignment_statement           shift and go to state 32
    procedure_statement            shift and go to state 33
    structured_statement           shift and go to state 70
    write_statement                shift and go to state 35
    entire_variable                shift and go to state 36
    while_statement                shift and go to state 37
    read_statement                 shift and go to state 40
    if_statement                   shift and go to state 41
    empty                          shift and go to state 42
    variable_identifier            shift and go to state 47
    variable                       shift and go to state 44
    procedure_identifier           shift and go to state 48
    expression                     shift and go to state 49

state 132

    (10) array_type -> ARRAY LBRACKET index_range RBRACKET OF . simple_type
    (12) simple_type -> . type_identifier
    (13) type_identifier -> . INTEGER
    (14) type_identifier -> . CHAR

    INTEGER         shift and go to state 80
    CHAR            shift and go to state 82

    type_identifier                shift and go to state 76
    simple_type                    shift and go to state 135

state 133

    (11) index_range -> NUMBER DOT DOT . NUMBER

    NUMBER          shift and go to state 136


state 134

    (47) if_statement -> IF LPAREN expression RPAREN THEN statement ELSE . statement
    (20) statement -> . simple_statement
    (21) statement -> . statement simple_statement
    (22) statement -> . statement structured_statement
    (23) statement -> . structured_statement
    (26) simple_statement -> . assignment_statement
    (27) simple_statement -> . procedure_statement
    (28) simple_statement -> . read_statement
    (29) simple_statement -> . write_statement
    (43) structured_statement -> . compound_statement
    (44) structured_statement -> . if_statement
    (45) structured_statement -> . while_statement
    (30) assignment_statement -> . variable
    (31) assignment_statement -> . expression
    (32) procedure_statement -> . procedure_identifier
    (34) read_statement -> . READ LPAREN input_variable input_variable2 RPAREN SEMICOLON
    (38) write_statement -> . WRITE LPAREN output_value output_value2 RPAREN SEMICOLON
    (19) compound_statement -> . BEGIN statement END DOT
    (46) if_statement -> . IF LPAREN expression RPAREN THEN statement
    (47) if_statement -> . IF LPAREN expression RPAREN THEN statement ELSE statement
    (48) while_statement -> . WHILE expression DO statement
    (74) variable -> . entire_variable
    (75) variable -> . indexed_variable
    (49) expression -> . simple_expression
    (50) expression -> . simple_expression relational_operator simple_expression
    (33) procedure_identifier -> . ID
    (78) entire_variable -> . variable_identifier
    (76) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (51) simple_expression -> . sign term simple_expression2
    (79) variable_identifier -> . ID
    (77) array_variable -> . entire_variable
    (65) sign -> . PLUS
    (66) sign -> . MINUS
    (67) sign -> . empty
    (80) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    READ            shift and go to state 24
    WRITE           shift and go to state 43
    BEGIN           shift and go to state 15
    IF              shift and go to state 46
    WHILE           shift and go to state 27
    ID              shift and go to state 45
    PLUS            shift and go to state 38
    MINUS           shift and go to state 30
    NUMBER          reduce using rule 80 (empty -> .)
    LPAREN          reduce using rule 80 (empty -> .)
    NOT             reduce using rule 80 (empty -> .)

  ! ID              [ reduce using rule 80 (empty -> .) ]

    indexed_variable               shift and go to state 23
    simple_statement               shift and go to state 25
    sign                           shift and go to state 26
    simple_expression              shift and go to state 28
    array_variable                 shift and go to state 29
    compound_statement             shift and go to state 31
    assignment_statement           shift and go to state 32
    procedure_statement            shift and go to state 33
    structured_statement           shift and go to state 34
    write_statement                shift and go to state 35
    entire_variable                shift and go to state 36
    while_statement                shift and go to state 37
    statement                      shift and go to state 137
    read_statement                 shift and go to state 40
    if_statement                   shift and go to state 41
    empty                          shift and go to state 42
    variable_identifier            shift and go to state 47
    variable                       shift and go to state 44
    procedure_identifier           shift and go to state 48
    expression                     shift and go to state 49

state 135

    (10) array_type -> ARRAY LBRACKET index_range RBRACKET OF simple_type .

    SEMICOLON       reduce using rule 10 (array_type -> ARRAY LBRACKET index_range RBRACKET OF simple_type .)


state 136

    (11) index_range -> NUMBER DOT DOT NUMBER .

    RBRACKET        reduce using rule 11 (index_range -> NUMBER DOT DOT NUMBER .)


state 137

    (47) if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .
    (21) statement -> statement . simple_statement
    (22) statement -> statement . structured_statement
    (26) simple_statement -> . assignment_statement
    (27) simple_statement -> . procedure_statement
    (28) simple_statement -> . read_statement
    (29) simple_statement -> . write_statement
    (43) structured_statement -> . compound_statement
    (44) structured_statement -> . if_statement
    (45) structured_statement -> . while_statement
    (30) assignment_statement -> . variable
    (31) assignment_statement -> . expression
    (32) procedure_statement -> . procedure_identifier
    (34) read_statement -> . READ LPAREN input_variable input_variable2 RPAREN SEMICOLON
    (38) write_statement -> . WRITE LPAREN output_value output_value2 RPAREN SEMICOLON
    (19) compound_statement -> . BEGIN statement END DOT
    (46) if_statement -> . IF LPAREN expression RPAREN THEN statement
    (47) if_statement -> . IF LPAREN expression RPAREN THEN statement ELSE statement
    (48) while_statement -> . WHILE expression DO statement
    (74) variable -> . entire_variable
    (75) variable -> . indexed_variable
    (49) expression -> . simple_expression
    (50) expression -> . simple_expression relational_operator simple_expression
    (33) procedure_identifier -> . ID
    (78) entire_variable -> . variable_identifier
    (76) indexed_variable -> . array_variable LBRACKET expression RBRACKET
    (51) simple_expression -> . sign term simple_expression2
    (79) variable_identifier -> . ID
    (77) array_variable -> . entire_variable
    (65) sign -> . PLUS
    (66) sign -> . MINUS
    (67) sign -> . empty
    (80) empty -> .

  ! shift/reduce conflict for READ resolved as shift
  ! shift/reduce conflict for WRITE resolved as shift
  ! shift/reduce conflict for BEGIN resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! reduce/reduce conflict for NUMBER resolved using rule 47 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .)
  ! reduce/reduce conflict for LPAREN resolved using rule 47 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .)
  ! reduce/reduce conflict for NOT resolved using rule 47 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .)
  ! shift/reduce conflict for ID resolved as shift
    NUMBER          reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .)
    LPAREN          reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .)
    NOT             reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .)
    END             reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .)
    ELSE            reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .)
    READ            shift and go to state 24
    WRITE           shift and go to state 43
    BEGIN           shift and go to state 15
    IF              shift and go to state 46
    WHILE           shift and go to state 27
    ID              shift and go to state 45
    PLUS            shift and go to state 38
    MINUS           shift and go to state 30

  ! READ            [ reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .) ]
  ! WRITE           [ reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .) ]
  ! BEGIN           [ reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .) ]
  ! IF              [ reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .) ]
  ! WHILE           [ reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .) ]
  ! ID              [ reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .) ]
  ! PLUS            [ reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .) ]
  ! MINUS           [ reduce using rule 47 (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement .) ]
  ! NUMBER          [ reduce using rule 80 (empty -> .) ]
  ! LPAREN          [ reduce using rule 80 (empty -> .) ]
  ! NOT             [ reduce using rule 80 (empty -> .) ]
  ! ID              [ reduce using rule 80 (empty -> .) ]

    indexed_variable               shift and go to state 23
    simple_statement               shift and go to state 69
    sign                           shift and go to state 26
    simple_expression              shift and go to state 28
    array_variable                 shift and go to state 29
    compound_statement             shift and go to state 31
    assignment_statement           shift and go to state 32
    procedure_statement            shift and go to state 33
    structured_statement           shift and go to state 70
    write_statement                shift and go to state 35
    entire_variable                shift and go to state 36
    while_statement                shift and go to state 37
    read_statement                 shift and go to state 40
    if_statement                   shift and go to state 41
    empty                          shift and go to state 42
    variable_identifier            shift and go to state 47
    variable                       shift and go to state 44
    procedure_identifier           shift and go to state 48
    expression                     shift and go to state 49
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 15 resolved as shift
WARNING: shift/reduce conflict for ID in state 39 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 55 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 55 resolved as shift
WARNING: shift/reduce conflict for ID in state 99 resolved as shift
WARNING: shift/reduce conflict for READ in state 114 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 114 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 114 resolved as shift
WARNING: shift/reduce conflict for IF in state 114 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 114 resolved as shift
WARNING: shift/reduce conflict for ID in state 114 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 114 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 114 resolved as shift
WARNING: shift/reduce conflict for ID in state 114 resolved as shift
WARNING: shift/reduce conflict for ID in state 126 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 131 resolved as shift
WARNING: shift/reduce conflict for READ in state 131 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 131 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 131 resolved as shift
WARNING: shift/reduce conflict for IF in state 131 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 131 resolved as shift
WARNING: shift/reduce conflict for ID in state 131 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 131 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 131 resolved as shift
WARNING: shift/reduce conflict for ID in state 131 resolved as shift
WARNING: shift/reduce conflict for ID in state 134 resolved as shift
WARNING: shift/reduce conflict for READ in state 137 resolved as shift
WARNING: shift/reduce conflict for WRITE in state 137 resolved as shift
WARNING: shift/reduce conflict for BEGIN in state 137 resolved as shift
WARNING: shift/reduce conflict for IF in state 137 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 137 resolved as shift
WARNING: shift/reduce conflict for ID in state 137 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 137 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 137 resolved as shift
WARNING: shift/reduce conflict for ID in state 137 resolved as shift
WARNING: reduce/reduce conflict in state 45 resolved using rule (procedure_identifier -> ID)
WARNING: rejected rule (variable_identifier -> ID) in state 45
WARNING: reduce/reduce conflict in state 114 resolved using rule (while_statement -> WHILE expression DO statement)
WARNING: rejected rule (empty -> <empty>) in state 114
WARNING: reduce/reduce conflict in state 131 resolved using rule (if_statement -> IF LPAREN expression RPAREN THEN statement)
WARNING: rejected rule (empty -> <empty>) in state 131
WARNING: reduce/reduce conflict in state 137 resolved using rule (if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement)
WARNING: rejected rule (empty -> <empty>) in state 137
