
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABS AMPERSANT AND ARCTAN ARRAY BEGIN BOOLEAN CASE CHAR CHR CLOSECOMMENT CLOSECOMMENT2 COLON COMMA COMMENT CONST COS DISPOSE DISTINT DIV DIVIDE DO DOT DOWNTO ELSE END EOF EOLN EQUAL EXP FALSE FILE FOR FUNCTION GET GOTO GREATER HASHTAG ID IF IN INPUT INTEGER LABEL LBRACKET LESS LN LPAREN MAXINT MINUS MOD NEW NIL NOT NUMBER ODD OF OPENCOMMENT OPENCOMMENT2 OR ORD OUTPUT PACK PACKED PAGE PLUS PRED PROCEDURE PROGRAM PUT RBRACKET READ READLN REAL RECORD REPEAT RESET REWRITE ROUND RPAREN SEMICOLON SET SIMPLE SIN SQR SQRT STRING SUCC TEXT THEN TIMES TO TRUE TRUNC TYPE UNPACK UNTIL VAR WHILE WITH WRITE WRITELNprogram : PROGRAM ID SEMICOLON blockblock : variable_declaration_part procedure_declaration_part statement_partvariable_declaration_part : empty\n                                 | VAR variable_declaration SEMICOLON variable_declaration_partvariable_declaration : ID  variable_declaration2 COLON typevariable_declaration2 :  COMMA ID variable_declaration2  \n                             | empty type : simple_typetype : array_typearray_type : ARRAY LBRACKET index_range RBRACKET OF simple_typeindex_range : NUMBER DOT DOT NUMBER simple_type : type_identifiertype_identifier : INTEGER\n                       | CHARprocedure_declaration_part : emptyprocedure_declaration_part : procedure_declarationprocedure_declaration : PROCEDURE ID SEMICOLON blockstatement_part : compound_statementcompound_statement : BEGIN statement  END DOTstatement : simple_statementstatement : statement  simple_statementstatement : statement structured_statementstatement : structured_statementstatement3 : SEMICOLON statementstatement3 : emptysimple_statement : assignment_statementsimple_statement : procedure_statementsimple_statement : read_statementsimple_statement : write_statementassignment_statement : variable COLON EQUAL expression SEMICOLONprocedure_statement : procedure_identifierprocedure_identifier : IDread_statement : READ LPAREN input_variable input_variable2 RPAREN SEMICOLONinput_variable : variableinput_variable2 : empty\n                    | COMMA variablewrite_statement : WRITE LPAREN output_value  output_value2 RPAREN SEMICOLONoutput_value : expression\n                    | STRINGoutput_value2 : empty\n                     | COMMA expressionstructured_statement : compound_statementstructured_statement : if_statementstructured_statement : while_statementif_statement : IF LPAREN expression RPAREN THEN statementif_statement : IF LPAREN expression RPAREN THEN statement ELSE statementwhile_statement : WHILE expression DO statementexpression : simple_expressionexpression : simple_expression relational_operator simple_expressionsimple_expression : sign term   simple_expression2simple_expression2 : adding_operator term\n                          | emptyterm : factor term2term2 : multiplying_operator factor\n             | emptyfactor : variablefactor : NUMBERfactor : LPAREN expression RPARENfactor : NOT factorrelational_operator : EQUAL \n                           | DISTINT\n                           | LESS\n                           | GREATERsign : PLUS\n            | MINUS\n            | emptyadding_operator : PLUS\n                       | MINUS\n                       | ORmultiplying_operator : TIMES \n                            | DIV\n                            | ANDvariable : entire_variablevariable : indexed_variableindexed_variable : array_variable LBRACKET expression RBRACKETarray_variable : entire_variableentire_variable : variable_identifiervariable_identifier : IDempty :'
    
_lr_action_items = {'DO':([23,33,42,51,52,71,74,75,78,79,97,101,103,106,110,111,113,123,124,125,],[-74,-73,-77,-48,85,-78,-79,-57,-79,-56,-50,-52,-59,-53,-55,-49,-75,-51,-58,-54,]),'LESS':([23,33,42,51,71,74,75,78,79,97,101,103,106,110,113,123,124,125,],[-74,-73,-77,81,-78,-79,-57,-79,-56,-50,-52,-59,-53,-55,-75,-51,-58,-54,]),'READ':([15,25,28,29,30,31,32,34,35,36,37,40,43,56,57,85,87,112,128,129,132,133,134,137,140,],[24,-20,-42,-26,-27,-23,-29,-44,24,-28,-43,-32,-31,-21,-22,24,-19,24,-30,24,-33,-37,24,24,24,]),'THEN':([118,],[129,]),'EQUAL':([23,33,42,51,60,71,74,75,78,79,97,101,103,106,110,113,123,124,125,],[-74,-73,-77,83,91,-78,-79,-57,-79,-56,-50,-52,-59,-53,-55,-75,-51,-58,-54,]),'LBRACKET':([27,33,40,42,69,71,],[55,-76,-78,-77,93,-78,]),'WHILE':([15,25,28,29,30,31,32,34,35,36,37,40,43,56,57,85,87,112,128,129,132,133,134,137,140,],[26,-20,-42,-26,-27,-23,-29,-44,26,-28,-43,-32,-31,-21,-22,26,-19,26,-30,26,-33,-37,26,26,26,]),'PROGRAM':([0,],[1,]),'DIV':([23,33,42,71,75,78,79,103,113,124,],[-74,-73,-77,-78,-57,108,-56,-59,-75,-58,]),'MINUS':([23,26,33,42,55,59,61,71,74,75,77,78,79,80,81,82,83,84,91,103,106,110,113,115,124,125,],[-74,53,-73,-77,53,53,53,-78,100,-57,53,-79,-56,53,-62,-61,-60,-63,53,-59,-53,-55,-75,53,-58,-54,]),'DOT':([58,120,131,],[87,131,136,]),'BEGIN':([4,5,7,9,10,11,15,16,17,22,25,28,29,30,31,32,34,35,36,37,40,43,44,47,56,57,62,85,87,112,128,129,132,133,134,137,140,],[-79,-79,-3,-16,-15,15,15,-18,-2,-79,-20,-42,-26,-27,-23,-29,-44,15,-28,-43,-32,-31,-79,-4,-21,-22,-17,15,-19,15,-30,15,-33,-37,15,15,15,]),'RPAREN':([23,33,42,51,71,72,73,74,75,78,79,88,89,90,92,95,96,97,101,103,104,106,110,111,113,114,116,121,123,124,125,127,],[-74,-73,-77,-48,-78,-34,-79,-79,-57,-79,-56,-39,-79,-38,118,122,-35,-50,-52,-59,124,-53,-55,-49,-75,126,-40,-36,-51,-58,-54,-41,]),'SEMICOLON':([3,14,18,23,33,42,51,64,65,66,67,68,70,71,74,75,78,79,97,101,103,106,110,111,113,117,122,123,124,125,126,138,],[4,22,44,-74,-73,-77,-48,-12,-8,-5,-9,-13,-14,-78,-79,-57,-79,-56,-50,-52,-59,-53,-55,-49,-75,128,132,-51,-58,-54,133,-10,]),'PLUS':([23,26,33,42,55,59,61,71,74,75,77,78,79,80,81,82,83,84,91,103,106,110,113,115,124,125,],[-74,50,-73,-77,50,50,50,-78,98,-57,50,-79,-56,50,-62,-61,-60,-63,50,-59,-53,-55,-75,50,-58,-54,]),'COLON':([13,20,21,23,33,39,40,42,45,63,113,],[-79,46,-7,-74,-73,60,-78,-77,-79,-6,-75,]),'COMMA':([13,23,33,42,45,51,71,72,73,74,75,78,79,88,89,90,97,101,103,106,110,111,113,123,124,125,],[19,-74,-73,-77,19,-48,-78,-34,94,-79,-57,-79,-56,-39,115,-38,-50,-52,-59,-53,-55,-49,-75,-51,-58,-54,]),'ARRAY':([46,],[69,]),'$end':([2,8,16,17,87,],[0,-1,-18,-2,-19,]),'END':([25,28,29,30,31,32,34,35,36,37,40,43,56,57,87,112,128,132,133,134,140,],[-20,-42,-26,-27,-23,-29,-44,58,-28,-43,-32,-31,-21,-22,-19,-47,-30,-33,-37,-45,-46,]),'STRING':([59,],[88,]),'NUMBER':([26,49,50,53,54,55,59,61,76,77,80,81,82,83,84,91,93,98,99,100,102,105,107,108,109,115,136,],[-79,75,-64,-65,-66,-79,-79,-79,75,-79,-79,-62,-61,-60,-63,-79,120,-67,75,-68,-69,-72,-70,-71,75,-79,139,]),'TIMES':([23,33,42,71,75,78,79,103,113,124,],[-74,-73,-77,-78,-57,107,-56,-59,-75,-58,]),'WRITE':([15,25,28,29,30,31,32,34,35,36,37,40,43,56,57,85,87,112,128,129,132,133,134,137,140,],[38,-20,-42,-26,-27,-23,-29,-44,38,-28,-43,-32,-31,-21,-22,38,-19,38,-30,38,-33,-37,38,38,38,]),'LPAREN':([24,26,38,41,49,50,53,54,55,59,61,76,77,80,81,82,83,84,91,98,99,100,102,105,107,108,109,115,],[48,-79,59,61,77,-64,-65,-66,-79,-79,-79,77,-79,-79,-62,-61,-60,-63,-79,-67,77,-68,-69,-72,-70,-71,77,-79,]),'INTEGER':([46,135,],[68,68,]),'VAR':([4,22,44,],[6,6,6,]),'ELSE':([25,28,29,30,31,32,34,36,37,40,43,56,57,87,112,128,132,133,134,140,],[-20,-42,-26,-27,-23,-29,-44,-28,-43,-32,-31,-21,-22,-19,-47,-30,-33,-37,137,-46,]),'ID':([1,6,12,15,19,25,26,28,29,30,31,32,34,35,36,37,40,43,48,49,50,53,54,55,56,57,59,61,76,77,80,81,82,83,84,85,87,91,94,98,99,100,102,105,107,108,109,112,115,128,129,132,133,134,137,140,],[3,13,18,40,45,-20,-79,-42,-26,-27,-23,-29,-44,40,-28,-43,-32,-31,71,71,-64,-65,-66,-79,-21,-22,-79,-79,71,-79,-79,-62,-61,-60,-63,40,-19,-79,71,-67,71,-68,-69,-72,-70,-71,71,40,-79,-30,40,-33,-37,40,40,40,]),'PROCEDURE':([4,5,7,22,44,47,],[-79,12,-3,-79,-79,-4,]),'IF':([15,25,28,29,30,31,32,34,35,36,37,40,43,56,57,85,87,112,128,129,132,133,134,137,140,],[41,-20,-42,-26,-27,-23,-29,-44,41,-28,-43,-32,-31,-21,-22,41,-19,41,-30,41,-33,-37,41,41,41,]),'AND':([23,33,42,71,75,78,79,103,113,124,],[-74,-73,-77,-78,-57,105,-56,-59,-75,-58,]),'CHAR':([46,135,],[70,70,]),'GREATER':([23,33,42,51,71,74,75,78,79,97,101,103,106,110,113,123,124,125,],[-74,-73,-77,84,-78,-79,-57,-79,-56,-50,-52,-59,-53,-55,-75,-51,-58,-54,]),'OF':([130,],[135,]),'DISTINT':([23,33,42,51,71,74,75,78,79,97,101,103,106,110,113,123,124,125,],[-74,-73,-77,82,-78,-79,-57,-79,-56,-50,-52,-59,-53,-55,-75,-51,-58,-54,]),'NOT':([26,49,50,53,54,55,59,61,76,77,80,81,82,83,84,91,98,99,100,102,105,107,108,109,115,],[-79,76,-64,-65,-66,-79,-79,-79,76,-79,-79,-62,-61,-60,-63,-79,-67,76,-68,-69,-72,-70,-71,76,-79,]),'RBRACKET':([23,33,42,51,71,74,75,78,79,86,97,101,103,106,110,111,113,119,123,124,125,139,],[-74,-73,-77,-48,-78,-79,-57,-79,-56,113,-50,-52,-59,-53,-55,-49,-75,130,-51,-58,-54,-11,]),'OR':([23,33,42,71,74,75,78,79,103,106,110,113,124,125,],[-74,-73,-77,-78,102,-57,-79,-56,-59,-53,-55,-75,-58,-54,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'type_identifier':([46,135,],[64,64,]),'indexed_variable':([15,35,48,49,76,85,94,99,109,112,129,134,137,140,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'variable_declaration_part':([4,22,44,],[5,47,5,]),'input_variable':([48,],[73,]),'simple_statement':([15,35,85,112,129,134,137,140,],[25,56,25,56,25,56,25,56,]),'sign':([26,55,59,61,77,80,91,115,],[49,49,49,49,49,49,49,49,]),'procedure_declaration_part':([5,],[11,]),'simple_expression':([26,55,59,61,77,80,91,115,],[51,51,51,51,51,111,51,51,]),'variable_declaration':([6,],[14,]),'relational_operator':([51,],[80,]),'simple_type':([46,135,],[65,138,]),'compound_statement':([11,15,35,85,112,129,134,137,140,],[16,28,28,28,28,28,28,28,28,]),'statement_part':([11,],[17,]),'assignment_statement':([15,35,85,112,129,134,137,140,],[29,29,29,29,29,29,29,29,]),'procedure_statement':([15,35,85,112,129,134,137,140,],[30,30,30,30,30,30,30,30,]),'structured_statement':([15,35,85,112,129,134,137,140,],[31,57,31,57,31,57,31,57,]),'write_statement':([15,35,85,112,129,134,137,140,],[32,32,32,32,32,32,32,32,]),'entire_variable':([15,35,48,49,76,85,94,99,109,112,129,134,137,140,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'while_statement':([15,35,85,112,129,134,137,140,],[34,34,34,34,34,34,34,34,]),'program':([0,],[2,]),'statement':([15,85,129,137,],[35,112,134,140,]),'factor':([49,76,99,109,],[78,103,78,125,]),'array_variable':([15,35,48,49,76,85,94,99,109,112,129,134,137,140,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'if_statement':([15,35,85,112,129,134,137,140,],[37,37,37,37,37,37,37,37,]),'type':([46,],[66,]),'empty':([4,5,13,22,26,44,45,55,59,61,73,74,77,78,80,89,91,115,],[7,10,21,7,54,7,21,54,54,54,96,101,54,110,54,116,54,54,]),'term2':([78,],[106,]),'simple_expression2':([74,],[97,]),'input_variable2':([73,],[95,]),'index_range':([93,],[119,]),'variable_identifier':([15,35,48,49,76,85,94,99,109,112,129,134,137,140,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'variable':([15,35,48,49,76,85,94,99,109,112,129,134,137,140,],[39,39,72,79,79,39,121,79,79,39,39,39,39,39,]),'read_statement':([15,35,85,112,129,134,137,140,],[36,36,36,36,36,36,36,36,]),'term':([49,99,],[74,123,]),'procedure_declaration':([5,],[9,]),'output_value2':([89,],[114,]),'expression':([26,55,59,61,77,91,115,],[52,86,90,92,104,117,127,]),'procedure_identifier':([15,35,85,112,129,134,137,140,],[43,43,43,43,43,43,43,43,]),'array_type':([46,],[67,]),'output_value':([59,],[89,]),'adding_operator':([74,],[99,]),'multiplying_operator':([78,],[109,]),'variable_declaration2':([13,45,],[20,63,]),'block':([4,44,],[8,62,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON block','program',4,'p_program','miniPas_parser.py',9),
  ('block -> variable_declaration_part procedure_declaration_part statement_part','block',3,'p_block','miniPas_parser.py',12),
  ('variable_declaration_part -> empty','variable_declaration_part',1,'p_variable_declaration_part','miniPas_parser.py',15),
  ('variable_declaration_part -> VAR variable_declaration SEMICOLON variable_declaration_part','variable_declaration_part',4,'p_variable_declaration_part','miniPas_parser.py',16),
  ('variable_declaration -> ID variable_declaration2 COLON type','variable_declaration',4,'p_variable_declaration','miniPas_parser.py',19),
  ('variable_declaration2 -> COMMA ID variable_declaration2','variable_declaration2',3,'p_variable_declaration1','miniPas_parser.py',22),
  ('variable_declaration2 -> empty','variable_declaration2',1,'p_variable_declaration1','miniPas_parser.py',23),
  ('type -> simple_type','type',1,'p_type','miniPas_parser.py',26),
  ('type -> array_type','type',1,'p_type2','miniPas_parser.py',29),
  ('array_type -> ARRAY LBRACKET index_range RBRACKET OF simple_type','array_type',6,'p_array_type','miniPas_parser.py',32),
  ('index_range -> NUMBER DOT DOT NUMBER','index_range',4,'p_index_range','miniPas_parser.py',35),
  ('simple_type -> type_identifier','simple_type',1,'p_simple_type','miniPas_parser.py',38),
  ('type_identifier -> INTEGER','type_identifier',1,'p_type_identifier','miniPas_parser.py',42),
  ('type_identifier -> CHAR','type_identifier',1,'p_type_identifier','miniPas_parser.py',43),
  ('procedure_declaration_part -> empty','procedure_declaration_part',1,'p_procedure_declaration_part','miniPas_parser.py',48),
  ('procedure_declaration_part -> procedure_declaration','procedure_declaration_part',1,'p_procedure_declaration_part2','miniPas_parser.py',51),
  ('procedure_declaration -> PROCEDURE ID SEMICOLON block','procedure_declaration',4,'p_procedure_declaration','miniPas_parser.py',54),
  ('statement_part -> compound_statement','statement_part',1,'p_statement_part','miniPas_parser.py',60),
  ('compound_statement -> BEGIN statement END DOT','compound_statement',4,'p_compound_statement','miniPas_parser.py',67),
  ('statement -> simple_statement','statement',1,'p_statement','miniPas_parser.py',70),
  ('statement -> statement simple_statement','statement',2,'p_statement4','miniPas_parser.py',73),
  ('statement -> statement structured_statement','statement',2,'p_statement5','miniPas_parser.py',76),
  ('statement -> structured_statement','statement',1,'p_statement2','miniPas_parser.py',79),
  ('statement3 -> SEMICOLON statement','statement3',2,'p_statement3','miniPas_parser.py',82),
  ('statement3 -> empty','statement3',1,'p_statement3e','miniPas_parser.py',90),
  ('simple_statement -> assignment_statement','simple_statement',1,'p_simple_statement','miniPas_parser.py',96),
  ('simple_statement -> procedure_statement','simple_statement',1,'p_simple_statemen1','miniPas_parser.py',99),
  ('simple_statement -> read_statement','simple_statement',1,'p_simple_statemen2','miniPas_parser.py',102),
  ('simple_statement -> write_statement','simple_statement',1,'p_simple_statemen3','miniPas_parser.py',105),
  ('assignment_statement -> variable COLON EQUAL expression SEMICOLON','assignment_statement',5,'p_assignment_statement','miniPas_parser.py',108),
  ('procedure_statement -> procedure_identifier','procedure_statement',1,'p_procedure_statement','miniPas_parser.py',113),
  ('procedure_identifier -> ID','procedure_identifier',1,'p_procedure_identifier','miniPas_parser.py',116),
  ('read_statement -> READ LPAREN input_variable input_variable2 RPAREN SEMICOLON','read_statement',6,'p_read_statement','miniPas_parser.py',118),
  ('input_variable -> variable','input_variable',1,'p_input_variable','miniPas_parser.py',121),
  ('input_variable2 -> empty','input_variable2',1,'p_input_variable2','miniPas_parser.py',124),
  ('input_variable2 -> COMMA variable','input_variable2',2,'p_input_variable2','miniPas_parser.py',125),
  ('write_statement -> WRITE LPAREN output_value output_value2 RPAREN SEMICOLON','write_statement',6,'p_write_statement','miniPas_parser.py',128),
  ('output_value -> expression','output_value',1,'p_output_value','miniPas_parser.py',131),
  ('output_value -> STRING','output_value',1,'p_output_value','miniPas_parser.py',132),
  ('output_value2 -> empty','output_value2',1,'p_output_value2','miniPas_parser.py',135),
  ('output_value2 -> COMMA expression','output_value2',2,'p_output_value2','miniPas_parser.py',136),
  ('structured_statement -> compound_statement','structured_statement',1,'p_structured_statement','miniPas_parser.py',141),
  ('structured_statement -> if_statement','structured_statement',1,'p_structured_statement2','miniPas_parser.py',144),
  ('structured_statement -> while_statement','structured_statement',1,'p_structured_statement3','miniPas_parser.py',147),
  ('if_statement -> IF LPAREN expression RPAREN THEN statement','if_statement',6,'p_if_statement','miniPas_parser.py',151),
  ('if_statement -> IF LPAREN expression RPAREN THEN statement ELSE statement','if_statement',8,'p_if_statement2','miniPas_parser.py',154),
  ('while_statement -> WHILE expression DO statement','while_statement',4,'p_while_statement','miniPas_parser.py',157),
  ('expression -> simple_expression','expression',1,'p_expression','miniPas_parser.py',161),
  ('expression -> simple_expression relational_operator simple_expression','expression',3,'p_expression2','miniPas_parser.py',164),
  ('simple_expression -> sign term simple_expression2','simple_expression',3,'p_simple_expression','miniPas_parser.py',167),
  ('simple_expression2 -> adding_operator term','simple_expression2',2,'p_simple_expression2','miniPas_parser.py',171),
  ('simple_expression2 -> empty','simple_expression2',1,'p_simple_expression2','miniPas_parser.py',172),
  ('term -> factor term2','term',2,'p_term','miniPas_parser.py',176),
  ('term2 -> multiplying_operator factor','term2',2,'p_term2','miniPas_parser.py',179),
  ('term2 -> empty','term2',1,'p_term2','miniPas_parser.py',180),
  ('factor -> variable','factor',1,'p_factor','miniPas_parser.py',183),
  ('factor -> NUMBER','factor',1,'p_factor2','miniPas_parser.py',187),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor3','miniPas_parser.py',190),
  ('factor -> NOT factor','factor',2,'p_factor4','miniPas_parser.py',193),
  ('relational_operator -> EQUAL','relational_operator',1,'p_relational_operator','miniPas_parser.py',197),
  ('relational_operator -> DISTINT','relational_operator',1,'p_relational_operator','miniPas_parser.py',198),
  ('relational_operator -> LESS','relational_operator',1,'p_relational_operator','miniPas_parser.py',199),
  ('relational_operator -> GREATER','relational_operator',1,'p_relational_operator','miniPas_parser.py',200),
  ('sign -> PLUS','sign',1,'p_sign','miniPas_parser.py',203),
  ('sign -> MINUS','sign',1,'p_sign','miniPas_parser.py',204),
  ('sign -> empty','sign',1,'p_sign','miniPas_parser.py',205),
  ('adding_operator -> PLUS','adding_operator',1,'p_adding_operator','miniPas_parser.py',208),
  ('adding_operator -> MINUS','adding_operator',1,'p_adding_operator','miniPas_parser.py',209),
  ('adding_operator -> OR','adding_operator',1,'p_adding_operator','miniPas_parser.py',210),
  ('multiplying_operator -> TIMES','multiplying_operator',1,'p_multiplying_operator','miniPas_parser.py',213),
  ('multiplying_operator -> DIV','multiplying_operator',1,'p_multiplying_operator','miniPas_parser.py',214),
  ('multiplying_operator -> AND','multiplying_operator',1,'p_multiplying_operator','miniPas_parser.py',215),
  ('variable -> entire_variable','variable',1,'p_variable','miniPas_parser.py',219),
  ('variable -> indexed_variable','variable',1,'p_variable2','miniPas_parser.py',222),
  ('indexed_variable -> array_variable LBRACKET expression RBRACKET','indexed_variable',4,'p_indexed_variable','miniPas_parser.py',225),
  ('array_variable -> entire_variable','array_variable',1,'p_array_variable','miniPas_parser.py',228),
  ('entire_variable -> variable_identifier','entire_variable',1,'p_entire_variable','miniPas_parser.py',231),
  ('variable_identifier -> ID','variable_identifier',1,'p_variable_identifier','miniPas_parser.py',234),
  ('empty -> <empty>','empty',0,'p_empty','miniPas_parser.py',240),
]
